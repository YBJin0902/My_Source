
STM32F412G-DISCO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bfcc  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009f0  0800c19c  0800c19c  0000d19c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 000001a6  0800cb8c  0800cb8c  0000db8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 00000018  0800cd34  0800cd34  0000dd34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM.extab    00000000  0800cd4c  0800cd4c  0000e078  2**0
                  CONTENTS
  6 .ARM          00000008  0800cd4c  0800cd4c  0000dd4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .preinit_array 00000000  0800cd54  0800cd54  0000e078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  8 .init_array   00000018  0800cd54  0800cd54  0000dd54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .fini_array   00000004  0800cd6c  0800cd6c  0000dd6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .data         00000078  20000000  0800cd70  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00009438  20000078  0800cde8  0000e078  2**2
                  ALLOC
 12 ._user_heap_stack 00000800  200094b0  0800cde8  0000e4b0  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  0000e078  2**0
                  CONTENTS, READONLY
 14 FramebufferSection 0001c200  20020000  20020000  0000f000  2**2
                  ALLOC
 15 ExtFlashSection 00000000  90000000  90000000  0000e0a8  2**0
                  CONTENTS
 16 .debug_line   0003a075  00000000  00000000  0000e0a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line_str 0000009b  00000000  00000000  0004811d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_info   00065270  00000000  00000000  000481b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_abbrev 0000d7d1  00000000  00000000  000ad428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_aranges 00002220  00000000  00000000  000bac00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000eff5f  00000000  00000000  000bce20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_rnglists 0000244b  00000000  00000000  001acd7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_loclists 000134e9  00000000  00000000  001af1ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_macro  0002b0e7  00000000  00000000  001c26b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .comment      000000c2  00000000  00000000  001ed79a  2**0
                  CONTENTS, READONLY
 26 .debug_frame  00006318  00000000  00000000  001ed85c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000078 	.word	0x20000078
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800c184 	.word	0x0800c184

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000007c 	.word	0x2000007c
 800020c:	0800c184 	.word	0x0800c184

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b988 	b.w	80005d8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	468e      	mov	lr, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	4688      	mov	r8, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d962      	bls.n	80003bc <__udivmoddi4+0xdc>
 80002f6:	fab2 f682 	clz	r6, r2
 80002fa:	b14e      	cbz	r6, 8000310 <__udivmoddi4+0x30>
 80002fc:	f1c6 0320 	rsb	r3, r6, #32
 8000300:	fa01 f806 	lsl.w	r8, r1, r6
 8000304:	fa20 f303 	lsr.w	r3, r0, r3
 8000308:	40b7      	lsls	r7, r6
 800030a:	ea43 0808 	orr.w	r8, r3, r8
 800030e:	40b4      	lsls	r4, r6
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	fa1f fc87 	uxth.w	ip, r7
 8000318:	fbb8 f1fe 	udiv	r1, r8, lr
 800031c:	0c23      	lsrs	r3, r4, #16
 800031e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000322:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000326:	fb01 f20c 	mul.w	r2, r1, ip
 800032a:	429a      	cmp	r2, r3
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0x62>
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	f101 30ff 	add.w	r0, r1, #4294967295
 8000334:	f080 80ea 	bcs.w	800050c <__udivmoddi4+0x22c>
 8000338:	429a      	cmp	r2, r3
 800033a:	f240 80e7 	bls.w	800050c <__udivmoddi4+0x22c>
 800033e:	3902      	subs	r1, #2
 8000340:	443b      	add	r3, r7
 8000342:	1a9a      	subs	r2, r3, r2
 8000344:	b2a3      	uxth	r3, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000352:	fb00 fc0c 	mul.w	ip, r0, ip
 8000356:	459c      	cmp	ip, r3
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x8e>
 800035a:	18fb      	adds	r3, r7, r3
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000360:	f080 80d6 	bcs.w	8000510 <__udivmoddi4+0x230>
 8000364:	459c      	cmp	ip, r3
 8000366:	f240 80d3 	bls.w	8000510 <__udivmoddi4+0x230>
 800036a:	443b      	add	r3, r7
 800036c:	3802      	subs	r0, #2
 800036e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000372:	eba3 030c 	sub.w	r3, r3, ip
 8000376:	2100      	movs	r1, #0
 8000378:	b11d      	cbz	r5, 8000382 <__udivmoddi4+0xa2>
 800037a:	40f3      	lsrs	r3, r6
 800037c:	2200      	movs	r2, #0
 800037e:	e9c5 3200 	strd	r3, r2, [r5]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d905      	bls.n	8000396 <__udivmoddi4+0xb6>
 800038a:	b10d      	cbz	r5, 8000390 <__udivmoddi4+0xb0>
 800038c:	e9c5 0100 	strd	r0, r1, [r5]
 8000390:	2100      	movs	r1, #0
 8000392:	4608      	mov	r0, r1
 8000394:	e7f5      	b.n	8000382 <__udivmoddi4+0xa2>
 8000396:	fab3 f183 	clz	r1, r3
 800039a:	2900      	cmp	r1, #0
 800039c:	d146      	bne.n	800042c <__udivmoddi4+0x14c>
 800039e:	4573      	cmp	r3, lr
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0xc8>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 8105 	bhi.w	80005b2 <__udivmoddi4+0x2d2>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	4690      	mov	r8, r2
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0e5      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003b6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ba:	e7e2      	b.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f000 8090 	beq.w	80004e2 <__udivmoddi4+0x202>
 80003c2:	fab2 f682 	clz	r6, r2
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	f040 80a4 	bne.w	8000514 <__udivmoddi4+0x234>
 80003cc:	1a8a      	subs	r2, r1, r2
 80003ce:	0c03      	lsrs	r3, r0, #16
 80003d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d4:	b280      	uxth	r0, r0
 80003d6:	b2bc      	uxth	r4, r7
 80003d8:	2101      	movs	r1, #1
 80003da:	fbb2 fcfe 	udiv	ip, r2, lr
 80003de:	fb0e 221c 	mls	r2, lr, ip, r2
 80003e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003e6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ea:	429a      	cmp	r2, r3
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x11e>
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x11c>
 80003f6:	429a      	cmp	r2, r3
 80003f8:	f200 80e0 	bhi.w	80005bc <__udivmoddi4+0x2dc>
 80003fc:	46c4      	mov	ip, r8
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	fbb3 f2fe 	udiv	r2, r3, lr
 8000404:	fb0e 3312 	mls	r3, lr, r2, r3
 8000408:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800040c:	fb02 f404 	mul.w	r4, r2, r4
 8000410:	429c      	cmp	r4, r3
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x144>
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	f102 30ff 	add.w	r0, r2, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x142>
 800041c:	429c      	cmp	r4, r3
 800041e:	f200 80ca 	bhi.w	80005b6 <__udivmoddi4+0x2d6>
 8000422:	4602      	mov	r2, r0
 8000424:	1b1b      	subs	r3, r3, r4
 8000426:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800042a:	e7a5      	b.n	8000378 <__udivmoddi4+0x98>
 800042c:	f1c1 0620 	rsb	r6, r1, #32
 8000430:	408b      	lsls	r3, r1
 8000432:	fa22 f706 	lsr.w	r7, r2, r6
 8000436:	431f      	orrs	r7, r3
 8000438:	fa0e f401 	lsl.w	r4, lr, r1
 800043c:	fa20 f306 	lsr.w	r3, r0, r6
 8000440:	fa2e fe06 	lsr.w	lr, lr, r6
 8000444:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000448:	4323      	orrs	r3, r4
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	fa1f fc87 	uxth.w	ip, r7
 8000452:	fbbe f0f9 	udiv	r0, lr, r9
 8000456:	0c1c      	lsrs	r4, r3, #16
 8000458:	fb09 ee10 	mls	lr, r9, r0, lr
 800045c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000460:	fb00 fe0c 	mul.w	lr, r0, ip
 8000464:	45a6      	cmp	lr, r4
 8000466:	fa02 f201 	lsl.w	r2, r2, r1
 800046a:	d909      	bls.n	8000480 <__udivmoddi4+0x1a0>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000472:	f080 809c 	bcs.w	80005ae <__udivmoddi4+0x2ce>
 8000476:	45a6      	cmp	lr, r4
 8000478:	f240 8099 	bls.w	80005ae <__udivmoddi4+0x2ce>
 800047c:	3802      	subs	r0, #2
 800047e:	443c      	add	r4, r7
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	fa1f fe83 	uxth.w	lr, r3
 8000488:	fbb4 f3f9 	udiv	r3, r4, r9
 800048c:	fb09 4413 	mls	r4, r9, r3, r4
 8000490:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000494:	fb03 fc0c 	mul.w	ip, r3, ip
 8000498:	45a4      	cmp	ip, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x1ce>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f103 3eff 	add.w	lr, r3, #4294967295
 80004a2:	f080 8082 	bcs.w	80005aa <__udivmoddi4+0x2ca>
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d97f      	bls.n	80005aa <__udivmoddi4+0x2ca>
 80004aa:	3b02      	subs	r3, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b2:	eba4 040c 	sub.w	r4, r4, ip
 80004b6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ba:	4564      	cmp	r4, ip
 80004bc:	4673      	mov	r3, lr
 80004be:	46e1      	mov	r9, ip
 80004c0:	d362      	bcc.n	8000588 <__udivmoddi4+0x2a8>
 80004c2:	d05f      	beq.n	8000584 <__udivmoddi4+0x2a4>
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x1fe>
 80004c6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ca:	eb64 0409 	sbc.w	r4, r4, r9
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	431e      	orrs	r6, r3
 80004d8:	40cc      	lsrs	r4, r1
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e74f      	b.n	8000382 <__udivmoddi4+0xa2>
 80004e2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004e6:	0c01      	lsrs	r1, r0, #16
 80004e8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ec:	b280      	uxth	r0, r0
 80004ee:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004f2:	463b      	mov	r3, r7
 80004f4:	4638      	mov	r0, r7
 80004f6:	463c      	mov	r4, r7
 80004f8:	46b8      	mov	r8, r7
 80004fa:	46be      	mov	lr, r7
 80004fc:	2620      	movs	r6, #32
 80004fe:	fbb1 f1f7 	udiv	r1, r1, r7
 8000502:	eba2 0208 	sub.w	r2, r2, r8
 8000506:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800050a:	e766      	b.n	80003da <__udivmoddi4+0xfa>
 800050c:	4601      	mov	r1, r0
 800050e:	e718      	b.n	8000342 <__udivmoddi4+0x62>
 8000510:	4610      	mov	r0, r2
 8000512:	e72c      	b.n	800036e <__udivmoddi4+0x8e>
 8000514:	f1c6 0220 	rsb	r2, r6, #32
 8000518:	fa2e f302 	lsr.w	r3, lr, r2
 800051c:	40b7      	lsls	r7, r6
 800051e:	40b1      	lsls	r1, r6
 8000520:	fa20 f202 	lsr.w	r2, r0, r2
 8000524:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000528:	430a      	orrs	r2, r1
 800052a:	fbb3 f8fe 	udiv	r8, r3, lr
 800052e:	b2bc      	uxth	r4, r7
 8000530:	fb0e 3318 	mls	r3, lr, r8, r3
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053a:	fb08 f904 	mul.w	r9, r8, r4
 800053e:	40b0      	lsls	r0, r6
 8000540:	4589      	cmp	r9, r1
 8000542:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000546:	b280      	uxth	r0, r0
 8000548:	d93e      	bls.n	80005c8 <__udivmoddi4+0x2e8>
 800054a:	1879      	adds	r1, r7, r1
 800054c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000550:	d201      	bcs.n	8000556 <__udivmoddi4+0x276>
 8000552:	4589      	cmp	r9, r1
 8000554:	d81f      	bhi.n	8000596 <__udivmoddi4+0x2b6>
 8000556:	eba1 0109 	sub.w	r1, r1, r9
 800055a:	fbb1 f9fe 	udiv	r9, r1, lr
 800055e:	fb09 f804 	mul.w	r8, r9, r4
 8000562:	fb0e 1119 	mls	r1, lr, r9, r1
 8000566:	b292      	uxth	r2, r2
 8000568:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056c:	4542      	cmp	r2, r8
 800056e:	d229      	bcs.n	80005c4 <__udivmoddi4+0x2e4>
 8000570:	18ba      	adds	r2, r7, r2
 8000572:	f109 31ff 	add.w	r1, r9, #4294967295
 8000576:	d2c4      	bcs.n	8000502 <__udivmoddi4+0x222>
 8000578:	4542      	cmp	r2, r8
 800057a:	d2c2      	bcs.n	8000502 <__udivmoddi4+0x222>
 800057c:	f1a9 0102 	sub.w	r1, r9, #2
 8000580:	443a      	add	r2, r7
 8000582:	e7be      	b.n	8000502 <__udivmoddi4+0x222>
 8000584:	45f0      	cmp	r8, lr
 8000586:	d29d      	bcs.n	80004c4 <__udivmoddi4+0x1e4>
 8000588:	ebbe 0302 	subs.w	r3, lr, r2
 800058c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000590:	3801      	subs	r0, #1
 8000592:	46e1      	mov	r9, ip
 8000594:	e796      	b.n	80004c4 <__udivmoddi4+0x1e4>
 8000596:	eba7 0909 	sub.w	r9, r7, r9
 800059a:	4449      	add	r1, r9
 800059c:	f1a8 0c02 	sub.w	ip, r8, #2
 80005a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a4:	fb09 f804 	mul.w	r8, r9, r4
 80005a8:	e7db      	b.n	8000562 <__udivmoddi4+0x282>
 80005aa:	4673      	mov	r3, lr
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1ce>
 80005ae:	4650      	mov	r0, sl
 80005b0:	e766      	b.n	8000480 <__udivmoddi4+0x1a0>
 80005b2:	4608      	mov	r0, r1
 80005b4:	e6fd      	b.n	80003b2 <__udivmoddi4+0xd2>
 80005b6:	443b      	add	r3, r7
 80005b8:	3a02      	subs	r2, #2
 80005ba:	e733      	b.n	8000424 <__udivmoddi4+0x144>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	443b      	add	r3, r7
 80005c2:	e71c      	b.n	80003fe <__udivmoddi4+0x11e>
 80005c4:	4649      	mov	r1, r9
 80005c6:	e79c      	b.n	8000502 <__udivmoddi4+0x222>
 80005c8:	eba1 0109 	sub.w	r1, r1, r9
 80005cc:	46c4      	mov	ip, r8
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fb09 f804 	mul.w	r8, r9, r4
 80005d6:	e7c4      	b.n	8000562 <__udivmoddi4+0x282>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 80005dc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000614 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 80005e0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80005e2:	e003      	b.n	80005ec <LoopCopyDataInit>

080005e4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80005e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000618 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80005e6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80005e8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80005ea:	3104      	adds	r1, #4

080005ec <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80005ec:	480b      	ldr	r0, [pc, #44]	@ (800061c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80005ee:	4b0c      	ldr	r3, [pc, #48]	@ (8000620 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80005f0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80005f2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80005f4:	d3f6      	bcc.n	80005e4 <CopyDataInit>
  ldr  r2, =_sbss
 80005f6:	4a0b      	ldr	r2, [pc, #44]	@ (8000624 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80005f8:	e002      	b.n	8000600 <LoopFillZerobss>

080005fa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 80005fa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80005fc:	f842 3b04 	str.w	r3, [r2], #4

08000600 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000600:	4b09      	ldr	r3, [pc, #36]	@ (8000628 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000602:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000604:	d3f9      	bcc.n	80005fa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000606:	f001 f9e3 	bl	80019d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800060a:	f00b f84d 	bl	800b6a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800060e:	f000 fe8f 	bl	8001330 <main>
  bx  lr    
 8000612:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000614:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000618:	0800cd70 	.word	0x0800cd70
  ldr  r0, =_sdata
 800061c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000620:	20000078 	.word	0x20000078
  ldr  r2, =_sbss
 8000624:	20000078 	.word	0x20000078
  ldr  r3, = _ebss
 8000628:	200094b0 	.word	0x200094b0

0800062c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800062c:	e7fe      	b.n	800062c <ADC_IRQHandler>

0800062e <TouchGFX_Task>:
 * TouchGFX application thread
 */
void TouchGFX_Task(void* argument)
{
    // Calling forward to touchgfx_taskEntry in C++ domain
    touchgfx_taskEntry();
 800062e:	f000 bbc1 	b.w	8000db4 <touchgfx_taskEntry>

08000632 <_ZN8touchgfx18MCUInstrumentation13getCCConsumedEv>:
     *
     * @return clock cycles.
     */
    virtual uint32_t getCCConsumed()
    {
        return cc_consumed;
 8000632:	6840      	ldr	r0, [r0, #4]
    }
 8000634:	4770      	bx	lr

08000636 <_ZN8touchgfx18MCUInstrumentation13setCCConsumedEm>:
     *
     * @param  val number of clock cycles.
     */
    virtual void setCCConsumed(uint32_t val)
    {
        cc_consumed = val;
 8000636:	6041      	str	r1, [r0, #4]
    }
 8000638:	4770      	bx	lr

0800063a <_ZN8touchgfx25CortexMMCUInstrumentation4initEv>:
    //                                    Instrumentation Trace Macrocell (ITM)
    //                                    Embedded Trace Macrocell (ETM)
    //                                    Trace Port Interface Unit (TPIU).
    //                                    This enables control of power usage unless tracing is required. The application can enable this, for ITM use, or use by a debugger.

    *((volatile unsigned int*)0xE000EDFC) |= 0x01000000;
 800063a:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 800063e:	f8d2 3dfc 	ldr.w	r3, [r2, #3580]	@ 0xdfc
 8000642:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000646:	f8c2 3dfc 	str.w	r3, [r2, #3580]	@ 0xdfc
    *((volatile unsigned int*)0xE0001000) |= 1;
 800064a:	f5a2 4250 	sub.w	r2, r2, #53248	@ 0xd000
 800064e:	6813      	ldr	r3, [r2, #0]
 8000650:	f043 0301 	orr.w	r3, r3, #1
 8000654:	6013      	str	r3, [r2, #0]
}
 8000656:	4770      	bx	lr

08000658 <_ZN8touchgfx25CortexMMCUInstrumentation12getElapsedUSEjjj>:

//Board specific clockfrequency
unsigned int CortexMMCUInstrumentation::getElapsedUS(unsigned int start, unsigned int now, unsigned int clockfrequency)
{
    return ((now - start) + (clockfrequency / 2)) / clockfrequency;
 8000658:	1a52      	subs	r2, r2, r1
 800065a:	eb02 0253 	add.w	r2, r2, r3, lsr #1
}
 800065e:	fbb2 f0f3 	udiv	r0, r2, r3
 8000662:	4770      	bx	lr

08000664 <_ZN8touchgfx25CortexMMCUInstrumentation12getCPUCyclesEv>:

unsigned int CortexMMCUInstrumentation::getCPUCycles()
{
    return *((volatile unsigned int*)0xE0001004);
 8000664:	4b01      	ldr	r3, [pc, #4]	@ (800066c <_ZN8touchgfx25CortexMMCUInstrumentation12getCPUCyclesEv+0x8>)
 8000666:	6858      	ldr	r0, [r3, #4]
}
 8000668:	4770      	bx	lr
 800066a:	bf00      	nop
 800066c:	e0001000 	.word	0xe0001000

08000670 <_ZN8touchgfx25CortexMMCUInstrumentationD1Ev>:
 *        Interface for instrumenting Cortex-M processors to measure MCU load via measured CPU
 *        cycles.
 *
 * @sa MCUInstrumentation
 */
class CortexMMCUInstrumentation : public MCUInstrumentation
 8000670:	4770      	bx	lr

08000672 <_ZN8touchgfx25CortexMMCUInstrumentationD0Ev>:
 8000672:	b510      	push	{r4, lr}
 8000674:	210c      	movs	r1, #12
 8000676:	4604      	mov	r4, r0
 8000678:	f00a fd46 	bl	800b108 <_ZdlPvj>
 800067c:	4620      	mov	r0, r4
 800067e:	bd10      	pop	{r4, pc}

08000680 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb>:

void CortexMMCUInstrumentation::setMCUActive(bool active)
{
    if (active) //idle task sched out
    {
        uint32_t cc_temp = getCPUCycles() - cc_in;
 8000680:	6803      	ldr	r3, [r0, #0]
{
 8000682:	b510      	push	{r4, lr}
        uint32_t cc_temp = getCPUCycles() - cc_in;
 8000684:	691b      	ldr	r3, [r3, #16]
{
 8000686:	4604      	mov	r4, r0
    if (active) //idle task sched out
 8000688:	b131      	cbz	r1, 8000698 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x18>
        uint32_t cc_temp = getCPUCycles() - cc_in;
 800068a:	4798      	blx	r3
 800068c:	68a2      	ldr	r2, [r4, #8]
        cc_consumed += cc_temp;
 800068e:	6863      	ldr	r3, [r4, #4]
 8000690:	1a9b      	subs	r3, r3, r2
 8000692:	4403      	add	r3, r0
 8000694:	6063      	str	r3, [r4, #4]
    }
    else //idle task sched in
    {
        cc_in = getCPUCycles();
    }
}
 8000696:	bd10      	pop	{r4, pc}
        cc_in = getCPUCycles();
 8000698:	4798      	blx	r3
 800069a:	60a0      	str	r0, [r4, #8]
}
 800069c:	e7fb      	b.n	8000696 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x16>

0800069e <_ZN20STM32TouchController4initEv>:
bool touchReady = false;

void STM32TouchController::init()
{

}
 800069e:	4770      	bx	lr

080006a0 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 80006a0:	4770      	bx	lr

080006a2 <_ZN20STM32TouchControllerD0Ev>:
 80006a2:	b510      	push	{r4, lr}
 80006a4:	2104      	movs	r1, #4
 80006a6:	4604      	mov	r4, r0
 80006a8:	f00a fd2e 	bl	800b108 <_ZdlPvj>
 80006ac:	4620      	mov	r0, r4
 80006ae:	bd10      	pop	{r4, pc}

080006b0 <_ZN20STM32TouchController11sampleTouchERlS0_>:
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */

    if (touchReady)
 80006b0:	4b06      	ldr	r3, [pc, #24]	@ (80006cc <_ZN20STM32TouchController11sampleTouchERlS0_+0x1c>)
 80006b2:	7818      	ldrb	r0, [r3, #0]
{
 80006b4:	b510      	push	{r4, lr}
    if (touchReady)
 80006b6:	b138      	cbz	r0, 80006c8 <_ZN20STM32TouchController11sampleTouchERlS0_+0x18>
    {
        x = xVal;
 80006b8:	4c05      	ldr	r4, [pc, #20]	@ (80006d0 <_ZN20STM32TouchController11sampleTouchERlS0_+0x20>)
 80006ba:	6824      	ldr	r4, [r4, #0]
 80006bc:	600c      	str	r4, [r1, #0]
        y = yVal;
 80006be:	4905      	ldr	r1, [pc, #20]	@ (80006d4 <_ZN20STM32TouchController11sampleTouchERlS0_+0x24>)
 80006c0:	6809      	ldr	r1, [r1, #0]
 80006c2:	6011      	str	r1, [r2, #0]
        touchReady = false;
 80006c4:	2200      	movs	r2, #0
 80006c6:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        return false;
    }
}
 80006c8:	bd10      	pop	{r4, pc}
 80006ca:	bf00      	nop
 80006cc:	20000094 	.word	0x20000094
 80006d0:	2000009c 	.word	0x2000009c
 80006d4:	20000098 	.word	0x20000098

080006d8 <_Z14readTouchInputv>:

void readTouchInput()
{
 80006d8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    // Set receive register to P1XH
    uint8_t tReg = 0x03;
    HAL_I2C_Master_Transmit(&hi2c1, 0x70, &tReg, 1, HAL_MAX_DELAY);
 80006da:	4d16      	ldr	r5, [pc, #88]	@ (8000734 <_Z14readTouchInputv+0x5c>)
    //Receive P1XH, P1XL, P1YH and P1YL
    HAL_I2C_Master_Receive(&hi2c1, 0x70, buf, 4, HAL_MAX_DELAY);
 80006dc:	4c16      	ldr	r4, [pc, #88]	@ (8000738 <_Z14readTouchInputv+0x60>)
    HAL_I2C_Master_Transmit(&hi2c1, 0x70, &tReg, 1, HAL_MAX_DELAY);
 80006de:	f04f 36ff 	mov.w	r6, #4294967295
    uint8_t tReg = 0x03;
 80006e2:	2303      	movs	r3, #3
 80006e4:	f88d 300f 	strb.w	r3, [sp, #15]
    HAL_I2C_Master_Transmit(&hi2c1, 0x70, &tReg, 1, HAL_MAX_DELAY);
 80006e8:	f10d 020f 	add.w	r2, sp, #15
 80006ec:	9600      	str	r6, [sp, #0]
 80006ee:	2301      	movs	r3, #1
 80006f0:	2170      	movs	r1, #112	@ 0x70
 80006f2:	4628      	mov	r0, r5
 80006f4:	f001 fcf0 	bl	80020d8 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&hi2c1, 0x70, buf, 4, HAL_MAX_DELAY);
 80006f8:	4622      	mov	r2, r4
 80006fa:	9600      	str	r6, [sp, #0]
 80006fc:	2304      	movs	r3, #4
 80006fe:	2170      	movs	r1, #112	@ 0x70
 8000700:	4628      	mov	r0, r5
 8000702:	f001 fdc3 	bl	800228c <HAL_I2C_Master_Receive>
    yVal = 239;
    yVal -= (uint16_t)(buf[0] & 0xf) << 8;
 8000706:	7823      	ldrb	r3, [r4, #0]
    yVal -= buf [1];
 8000708:	7862      	ldrb	r2, [r4, #1]
    yVal -= (uint16_t)(buf[0] & 0xf) << 8;
 800070a:	021b      	lsls	r3, r3, #8
 800070c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8000710:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
    yVal -= buf [1];
 8000714:	1a9b      	subs	r3, r3, r2
 8000716:	4a09      	ldr	r2, [pc, #36]	@ (800073c <_Z14readTouchInputv+0x64>)
 8000718:	6013      	str	r3, [r2, #0]
    xVal = ((uint16_t)(buf[2]  & 0xf) << 8);
 800071a:	78a3      	ldrb	r3, [r4, #2]
    xVal += buf [3];
 800071c:	78e2      	ldrb	r2, [r4, #3]
    xVal = ((uint16_t)(buf[2]  & 0xf) << 8);
 800071e:	021b      	lsls	r3, r3, #8
 8000720:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
    xVal += buf [3];
 8000724:	4413      	add	r3, r2
 8000726:	4a06      	ldr	r2, [pc, #24]	@ (8000740 <_Z14readTouchInputv+0x68>)
 8000728:	6013      	str	r3, [r2, #0]
    touchReady = true;
 800072a:	4b06      	ldr	r3, [pc, #24]	@ (8000744 <_Z14readTouchInputv+0x6c>)
 800072c:	2201      	movs	r2, #1
 800072e:	701a      	strb	r2, [r3, #0]
}
 8000730:	b004      	add	sp, #16
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	2000028c 	.word	0x2000028c
 8000738:	200000a0 	.word	0x200000a0
 800073c:	20000098 	.word	0x20000098
 8000740:	2000009c 	.word	0x2000009c
 8000744:	20000094 	.word	0x20000094

08000748 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:
/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
    switch (id)
 8000748:	2803      	cmp	r0, #3
 800074a:	d821      	bhi.n	8000790 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x48>
 800074c:	e8df f000 	tbb	[pc, r0]
 8000750:	19120b02 	.word	0x19120b02
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_SET(id));
 8000754:	4b0f      	ldr	r3, [pc, #60]	@ (8000794 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x4c>)
 8000756:	681a      	ldr	r2, [r3, #0]
 8000758:	fab2 f282 	clz	r2, r2
 800075c:	0952      	lsrs	r2, r2, #5
 800075e:	2101      	movs	r1, #1
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 8000760:	480d      	ldr	r0, [pc, #52]	@ (8000798 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x50>)
 8000762:	f001 bad3 	b.w	8001d0c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_SET(id));
 8000766:	4b0b      	ldr	r3, [pc, #44]	@ (8000794 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x4c>)
 8000768:	685a      	ldr	r2, [r3, #4]
 800076a:	fab2 f282 	clz	r2, r2
 800076e:	0952      	lsrs	r2, r2, #5
 8000770:	2102      	movs	r1, #2
 8000772:	e7f5      	b.n	8000760 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
 8000774:	4b07      	ldr	r3, [pc, #28]	@ (8000794 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x4c>)
 8000776:	689a      	ldr	r2, [r3, #8]
 8000778:	fab2 f282 	clz	r2, r2
 800077c:	0952      	lsrs	r2, r2, #5
 800077e:	2108      	movs	r1, #8
 8000780:	e7ee      	b.n	8000760 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 8000782:	4b04      	ldr	r3, [pc, #16]	@ (8000794 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x4c>)
 8000784:	68da      	ldr	r2, [r3, #12]
 8000786:	fab2 f282 	clz	r2, r2
 800078a:	0952      	lsrs	r2, r2, #5
 800078c:	2110      	movs	r1, #16
 800078e:	e7e7      	b.n	8000760 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>
#endif
        break;
    }
}
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	200000a4 	.word	0x200000a4
 8000798:	40021000 	.word	0x40021000

0800079c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:
/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
    switch (id)
 800079c:	2803      	cmp	r0, #3
 800079e:	d821      	bhi.n	80007e4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x48>
 80007a0:	e8df f000 	tbb	[pc, r0]
 80007a4:	19120b02 	.word	0x19120b02
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_RESET(id));
 80007a8:	4b0f      	ldr	r3, [pc, #60]	@ (80007e8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x4c>)
 80007aa:	681a      	ldr	r2, [r3, #0]
 80007ac:	3a00      	subs	r2, #0
 80007ae:	bf18      	it	ne
 80007b0:	2201      	movne	r2, #1
 80007b2:	2101      	movs	r1, #1
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 80007b4:	480d      	ldr	r0, [pc, #52]	@ (80007ec <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x50>)
 80007b6:	f001 baa9 	b.w	8001d0c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_RESET(id));
 80007ba:	4b0b      	ldr	r3, [pc, #44]	@ (80007e8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x4c>)
 80007bc:	685a      	ldr	r2, [r3, #4]
 80007be:	3a00      	subs	r2, #0
 80007c0:	bf18      	it	ne
 80007c2:	2201      	movne	r2, #1
 80007c4:	2102      	movs	r1, #2
 80007c6:	e7f5      	b.n	80007b4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
 80007c8:	4b07      	ldr	r3, [pc, #28]	@ (80007e8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x4c>)
 80007ca:	689a      	ldr	r2, [r3, #8]
 80007cc:	3a00      	subs	r2, #0
 80007ce:	bf18      	it	ne
 80007d0:	2201      	movne	r2, #1
 80007d2:	2108      	movs	r1, #8
 80007d4:	e7ee      	b.n	80007b4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 80007d6:	4b04      	ldr	r3, [pc, #16]	@ (80007e8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x4c>)
 80007d8:	68da      	ldr	r2, [r3, #12]
 80007da:	3a00      	subs	r2, #0
 80007dc:	bf18      	it	ne
 80007de:	2201      	movne	r2, #1
 80007e0:	2110      	movs	r1, #16
 80007e2:	e7e7      	b.n	80007b4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>
#endif
        break;
    }
}
 80007e4:	4770      	bx	lr
 80007e6:	bf00      	nop
 80007e8:	200000a4 	.word	0x200000a4
 80007ec:	40021000 	.word	0x40021000

080007f0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:
/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
    switch (id)
 80007f0:	2803      	cmp	r0, #3
 80007f2:	d80d      	bhi.n	8000810 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x20>
 80007f4:	e8df f000 	tbb	[pc, r0]
 80007f8:	0a080602 	.word	0x0a080602
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 80007fc:	2101      	movs	r1, #1
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 80007fe:	4805      	ldr	r0, [pc, #20]	@ (8000814 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x24>)
 8000800:	f001 ba89 	b.w	8001d16 <HAL_GPIO_TogglePin>
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8000804:	2102      	movs	r1, #2
 8000806:	e7fa      	b.n	80007fe <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0xe>
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 8000808:	2108      	movs	r1, #8
 800080a:	e7f8      	b.n	80007fe <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0xe>
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 800080c:	2110      	movs	r1, #16
 800080e:	e7f6      	b.n	80007fe <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0xe>
#endif
        break;
    }
}
 8000810:	4770      	bx	lr
 8000812:	bf00      	nop
 8000814:	40021000 	.word	0x40021000

08000818 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>:

/*
 * Gets the state of a pin.
 */
bool GPIO::get(GPIO_ID id)
{
 8000818:	b508      	push	{r3, lr}
    GPIO_PinState bitstatus = GPIO_PIN_RESET;
    switch (id)
 800081a:	2803      	cmp	r0, #3
 800081c:	d811      	bhi.n	8000842 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x2a>
 800081e:	e8df f000 	tbb	[pc, r0]
 8000822:	0a02      	.short	0x0a02
 8000824:	0e0c      	.short	0x0e0c
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        bitstatus = HAL_GPIO_ReadPin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 8000826:	2101      	movs	r1, #1
        bitstatus = HAL_GPIO_ReadPin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8000828:	4807      	ldr	r0, [pc, #28]	@ (8000848 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x30>)
 800082a:	f001 fa69 	bl	8001d00 <HAL_GPIO_ReadPin>
#endif
        break;
    }
    return (bitstatus == GPIO_PIN_SET);
}
 800082e:	1e43      	subs	r3, r0, #1
 8000830:	4258      	negs	r0, r3
 8000832:	4158      	adcs	r0, r3
 8000834:	bd08      	pop	{r3, pc}
        bitstatus = HAL_GPIO_ReadPin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8000836:	2102      	movs	r1, #2
 8000838:	e7f6      	b.n	8000828 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x10>
        bitstatus = HAL_GPIO_ReadPin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 800083a:	2108      	movs	r1, #8
 800083c:	e7f4      	b.n	8000828 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x10>
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 800083e:	2110      	movs	r1, #16
 8000840:	e7f2      	b.n	8000828 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x10>
    switch (id)
 8000842:	2000      	movs	r0, #0
 8000844:	e7f3      	b.n	800082e <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x16>
 8000846:	bf00      	nop
 8000848:	40021000 	.word	0x40021000

0800084c <_ZN8touchgfx4GPIO4initEv>:
{
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	4d08      	ldr	r5, [pc, #32]	@ (8000870 <_ZN8touchgfx4GPIO4initEv+0x24>)
    for (int id = 0; id <= 4; id++)
 8000850:	2400      	movs	r4, #0
                GPIO_InvertedLevels[id] = 1;
 8000852:	2601      	movs	r6, #1
        if (GPIO::get(static_cast<GPIO_ID>(id)))
 8000854:	b2e0      	uxtb	r0, r4
 8000856:	f7ff ffdf 	bl	8000818 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>
 800085a:	b118      	cbz	r0, 8000864 <_ZN8touchgfx4GPIO4initEv+0x18>
            if (GPIO_InvertedLevels[id] != 1)
 800085c:	682b      	ldr	r3, [r5, #0]
 800085e:	2b01      	cmp	r3, #1
                GPIO_InvertedLevels[id] = 1;
 8000860:	bf18      	it	ne
 8000862:	602e      	strne	r6, [r5, #0]
    for (int id = 0; id <= 4; id++)
 8000864:	3401      	adds	r4, #1
 8000866:	2c05      	cmp	r4, #5
 8000868:	f105 0504 	add.w	r5, r5, #4
 800086c:	d1f2      	bne.n	8000854 <_ZN8touchgfx4GPIO4initEv+0x8>
}
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	200000a4 	.word	0x200000a4

08000874 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
    {
        requestedOrientation = orientation;
        displayOrientationChangeRequested = true;
 8000874:	2301      	movs	r3, #1
        requestedOrientation = orientation;
 8000876:	f880 1078 	strb.w	r1, [r0, #120]	@ 0x78
        displayOrientationChangeRequested = true;
 800087a:	f880 3079 	strb.w	r3, [r0, #121]	@ 0x79
    }
 800087e:	4770      	bx	lr

08000880 <_ZN8touchgfx3HAL11submitGPU2DEv>:
     *
     * Only implemented on systems with the GPU2D IP.
     */
    virtual void submitGPU2D()
    {
    }
 8000880:	4770      	bx	lr

08000882 <_ZN8touchgfx3HAL9sampleKeyERh>:
     */
    virtual bool sampleKey(uint8_t& key)
    {
        (void)key; // Unused variable
        return false;
    }
 8000882:	2000      	movs	r0, #0
 8000884:	4770      	bx	lr
	...

08000888 <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8000888:	4b03      	ldr	r3, [pc, #12]	@ (8000898 <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x10>)
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 800088a:	6441      	str	r1, [r0, #68]	@ 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 800088c:	3900      	subs	r1, #0
 800088e:	bf18      	it	ne
 8000890:	2101      	movne	r1, #1
 8000892:	7019      	strb	r1, [r3, #0]
    }
 8000894:	4770      	bx	lr
 8000896:	bf00      	nop
 8000898:	20009177 	.word	0x20009177

0800089c <_ZN8touchgfx3HAL16waitForLTDCLinesEt>:
     *
     * @param numberOfLines Number of lines to wait.
     */
    virtual void waitForLTDCLines(uint16_t numberOfLines)
    {
    }
 800089c:	4770      	bx	lr

0800089e <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
    {
        return 0;
    }
 800089e:	2000      	movs	r0, #0
 80008a0:	4770      	bx	lr

080008a2 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
    {
        if (taskDelayFunc)
 80008a2:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 80008a4:	b10b      	cbz	r3, 80008aa <_ZN8touchgfx3HAL9taskDelayEt+0x8>
        {
            taskDelayFunc(ms);
 80008a6:	4608      	mov	r0, r1
 80008a8:	4718      	bx	r3
        }
    }
 80008aa:	4770      	bx	lr

080008ac <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
    {
        return 0xFFFFu;
    }
 80008ac:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80008b0:	4770      	bx	lr

080008b2 <_ZN8touchgfx3HAL10getDMATypeEv>:
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
    {
        return dma.getDMAType();
 80008b2:	6840      	ldr	r0, [r0, #4]
 80008b4:	6803      	ldr	r3, [r0, #0]
 80008b6:	699b      	ldr	r3, [r3, #24]
 80008b8:	4718      	bx	r3

080008ba <_ZN8touchgfx3HAL25partialLTDCDeadlineMissedEv>:
     * This empty function can be overridden to e.g. output this error condition
     * on a pin.
     */
    virtual void partialLTDCDeadlineMissed()
    {
    }
 80008ba:	4770      	bx	lr

080008bc <_ZN8touchgfx3HAL15InvalidateCacheEv>:
     * Called by setRenderingMethod when changing rendering method
     * from Hardware to Software indicating the cache should be invalidated.
     */
    virtual void InvalidateCache()
    {
    }
 80008bc:	4770      	bx	lr

080008be <_ZN8touchgfx3HAL10FlushCacheEv>:
     * Called by setRenderingMethod when changing rendering method
     * from Software to Hardware indicating the cache should be invalidated.
     */
    virtual void FlushCache()
    {
    }
 80008be:	4770      	bx	lr

080008c0 <_ZN8touchgfx3HAL22InvalidateTextureCacheEv>:
     * Called on every tick before drawing into the framebuffer to enable
     * invalidation of any caches that may be incoherent with main memory.
     */
    virtual void InvalidateTextureCache()
    {
    }
 80008c0:	4770      	bx	lr
	...

080008c4 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
}

uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
    return currFbBase;
}
 80008c4:	4b01      	ldr	r3, [pc, #4]	@ (80008cc <_ZNK11TouchGFXHAL17getTFTFrameBufferEv+0x8>)
 80008c6:	6818      	ldr	r0, [r3, #0]
 80008c8:	4770      	bx	lr
 80008ca:	bf00      	nop
 80008cc:	200000c0 	.word	0x200000c0

080008d0 <_ZN11TouchGFXHAL16enableInterruptsEv>:
{
}

void TouchGFXHAL::disableInterrupts()
{
}
 80008d0:	4770      	bx	lr

080008d2 <_ZN11TouchGFXHALD1Ev>:
 *
 * @brief HAL implementation for TouchGFX.
 *
 * @sa HAL
 */
class TouchGFXHAL : public TouchGFXGeneratedHAL
 80008d2:	4770      	bx	lr

080008d4 <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
    currFbBase = adr;
 80008d4:	4b01      	ldr	r3, [pc, #4]	@ (80008dc <_ZN11TouchGFXHAL17setTFTFrameBufferEPt+0x8>)
 80008d6:	6019      	str	r1, [r3, #0]
    TouchGFXGeneratedHAL::setTFTFrameBuffer(adr);
 80008d8:	f000 bada 	b.w	8000e90 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
 80008dc:	200000c0 	.word	0x200000c0

080008e0 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
    {
        HAL::flushFrameBuffer();
 80008e0:	f005 ba91 	b.w	8005e06 <_ZN8touchgfx3HAL16flushFrameBufferEv>

080008e4 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
    TouchGFXGeneratedHAL::flushFrameBuffer();
}

void  TouchGFXHAL::flushFrameBuffer(const Rect& rect)
{
    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 80008e4:	f000 baf2 	b.w	8000ecc <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>

080008e8 <_ZN11TouchGFXHAL9blockCopyEPvPKvm>:

bool TouchGFXHAL::blockCopy(void* RESTRICT          dest,
                            const void* RESTRICT    src,
                            uint32_t            numBytes)
{
    return TouchGFXGeneratedHAL::blockCopy(dest, src, numBytes);
 80008e8:	f000 baf2 	b.w	8000ed0 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>

080008ec <_ZN11TouchGFXHAL10beginFrameEv>:
}

bool TouchGFXHAL::beginFrame()
{
    refreshRequested = false;
 80008ec:	4b02      	ldr	r3, [pc, #8]	@ (80008f8 <_ZN11TouchGFXHAL10beginFrameEv+0xc>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	701a      	strb	r2, [r3, #0]

    return TouchGFXGeneratedHAL::beginFrame();
 80008f2:	f000 bae7 	b.w	8000ec4 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>
 80008f6:	bf00      	nop
 80008f8:	200000c5 	.word	0x200000c5

080008fc <_ZN11TouchGFXHAL8endFrameEv>:
}

void TouchGFXHAL::endFrame()
{
 80008fc:	b510      	push	{r4, lr}
 80008fe:	4604      	mov	r4, r0
    TouchGFXGeneratedHAL::endFrame();
 8000900:	f000 fae2 	bl	8000ec8 <_ZN20TouchGFXGeneratedHAL8endFrameEv>

    if (frameBufferUpdatedThisFrame)
 8000904:	f894 304b 	ldrb.w	r3, [r4, #75]	@ 0x4b
 8000908:	b113      	cbz	r3, 8000910 <_ZN11TouchGFXHAL8endFrameEv+0x14>
    {
        refreshRequested = true;
 800090a:	4b02      	ldr	r3, [pc, #8]	@ (8000914 <_ZN11TouchGFXHAL8endFrameEv+0x18>)
 800090c:	2201      	movs	r2, #1
 800090e:	701a      	strb	r2, [r3, #0]
    }
}
 8000910:	bd10      	pop	{r4, pc}
 8000912:	bf00      	nop
 8000914:	200000c5 	.word	0x200000c5

08000918 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
 8000918:	b510      	push	{r4, lr}
 800091a:	4604      	mov	r4, r0
        swapFrameBuffers();
 800091c:	f006 f866 	bl	80069ec <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8000920:	6823      	ldr	r3, [r4, #0]
 8000922:	4620      	mov	r0, r4
 8000924:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
    }
 8000928:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        tick();
 800092c:	4718      	bx	r3

0800092e <_ZN11TouchGFXHALD0Ev>:
 800092e:	b510      	push	{r4, lr}
 8000930:	2184      	movs	r1, #132	@ 0x84
 8000932:	4604      	mov	r4, r0
 8000934:	f00a fbe8 	bl	800b108 <_ZdlPvj>
 8000938:	4620      	mov	r0, r4
 800093a:	bd10      	pop	{r4, pc}

0800093c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
    virtual void performDisplayOrientationChange()
 800093c:	b510      	push	{r4, lr}
        if (requestedOrientation != nativeDisplayOrientation)
 800093e:	f890 1034 	ldrb.w	r1, [r0, #52]	@ 0x34
 8000942:	f890 4078 	ldrb.w	r4, [r0, #120]	@ 0x78
            if (DISPLAY_ROTATION == rotate0)
 8000946:	4b0c      	ldr	r3, [pc, #48]	@ (8000978 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>)
        if (requestedOrientation != nativeDisplayOrientation)
 8000948:	428c      	cmp	r4, r1
            if (DISPLAY_ROTATION == rotate0)
 800094a:	781a      	ldrb	r2, [r3, #0]
        if (requestedOrientation != nativeDisplayOrientation)
 800094c:	d009      	beq.n	8000962 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x26>
            if (DISPLAY_ROTATION == rotate0)
 800094e:	b93a      	cbnz	r2, 8000960 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8000950:	4a0a      	ldr	r2, [pc, #40]	@ (800097c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
                const uint16_t tmp = DISPLAY_HEIGHT;
 8000952:	490b      	ldr	r1, [pc, #44]	@ (8000980 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8000954:	8814      	ldrh	r4, [r2, #0]
                const uint16_t tmp = DISPLAY_HEIGHT;
 8000956:	8808      	ldrh	r0, [r1, #0]
                DISPLAY_WIDTH = tmp;
 8000958:	8010      	strh	r0, [r2, #0]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 800095a:	800c      	strh	r4, [r1, #0]
                DISPLAY_ROTATION = rotate90;
 800095c:	2201      	movs	r2, #1
            DISPLAY_ROTATION = rotate0;
 800095e:	701a      	strb	r2, [r3, #0]
    }
 8000960:	bd10      	pop	{r4, pc}
        else if (DISPLAY_ROTATION != rotate0)
 8000962:	2a00      	cmp	r2, #0
 8000964:	d0fc      	beq.n	8000960 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8000966:	4a05      	ldr	r2, [pc, #20]	@ (800097c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
            const uint16_t tmp = DISPLAY_HEIGHT;
 8000968:	4905      	ldr	r1, [pc, #20]	@ (8000980 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 800096a:	8814      	ldrh	r4, [r2, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
 800096c:	8808      	ldrh	r0, [r1, #0]
            DISPLAY_WIDTH = tmp;
 800096e:	8010      	strh	r0, [r2, #0]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8000970:	800c      	strh	r4, [r1, #0]
            DISPLAY_ROTATION = rotate0;
 8000972:	2200      	movs	r2, #0
 8000974:	e7f3      	b.n	800095e <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x22>
 8000976:	bf00      	nop
 8000978:	20009170 	.word	0x20009170
 800097c:	2000916c 	.word	0x2000916c
 8000980:	2000916e 	.word	0x2000916e

08000984 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 8000984:	b570      	push	{r4, r5, r6, lr}
 8000986:	460d      	mov	r5, r1
 8000988:	4619      	mov	r1, r3
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 800098a:	b935      	cbnz	r5, 800099a <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x16>
 800098c:	4b09      	ldr	r3, [pc, #36]	@ (80009b4 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x30>)
 800098e:	4a0a      	ldr	r2, [pc, #40]	@ (80009b8 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x34>)
 8000990:	480a      	ldr	r0, [pc, #40]	@ (80009bc <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x38>)
 8000992:	f240 21ff 	movw	r1, #767	@ 0x2ff
 8000996:	f00a fbe5 	bl	800b164 <__assert_func>
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 800099a:	e9c0 520f 	strd	r5, r2, [r0, #60]	@ 0x3c
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 800099e:	4b08      	ldr	r3, [pc, #32]	@ (80009c0 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x3c>)
 80009a0:	3a00      	subs	r2, #0
 80009a2:	bf18      	it	ne
 80009a4:	2201      	movne	r2, #1
 80009a6:	701a      	strb	r2, [r3, #0]
        setAnimationStorage(animationStorage);
 80009a8:	6803      	ldr	r3, [r0, #0]
    }
 80009aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setAnimationStorage(animationStorage);
 80009ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80009b2:	4718      	bx	r3
 80009b4:	0800c214 	.word	0x0800c214
 80009b8:	0800c24c 	.word	0x0800c24c
 80009bc:	0800c29a 	.word	0x0800c29a
 80009c0:	20009176 	.word	0x20009176

080009c4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 80009c4:	b508      	push	{r3, lr}
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 80009c6:	4b09      	ldr	r3, [pc, #36]	@ (80009ec <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x28>)
 80009c8:	881b      	ldrh	r3, [r3, #0]
 80009ca:	428b      	cmp	r3, r1
 80009cc:	d803      	bhi.n	80009d6 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x12>
 80009ce:	4b08      	ldr	r3, [pc, #32]	@ (80009f0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x2c>)
 80009d0:	881b      	ldrh	r3, [r3, #0]
 80009d2:	4293      	cmp	r3, r2
 80009d4:	d905      	bls.n	80009e2 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x1e>
 80009d6:	4b07      	ldr	r3, [pc, #28]	@ (80009f4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>)
 80009d8:	4a07      	ldr	r2, [pc, #28]	@ (80009f8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x34>)
 80009da:	4808      	ldr	r0, [pc, #32]	@ (80009fc <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x38>)
 80009dc:	21a3      	movs	r1, #163	@ 0xa3
 80009de:	f00a fbc1 	bl	800b164 <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 80009e2:	4b07      	ldr	r3, [pc, #28]	@ (8000a00 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x3c>)
 80009e4:	8019      	strh	r1, [r3, #0]
        FRAME_BUFFER_HEIGHT = height;
 80009e6:	4b07      	ldr	r3, [pc, #28]	@ (8000a04 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x40>)
 80009e8:	801a      	strh	r2, [r3, #0]
    }
 80009ea:	bd08      	pop	{r3, pc}
 80009ec:	2000916c 	.word	0x2000916c
 80009f0:	2000916e 	.word	0x2000916e
 80009f4:	0800c2df 	.word	0x0800c2df
 80009f8:	0800c342 	.word	0x0800c342
 80009fc:	0800c29a 	.word	0x0800c29a
 8000a00:	20009172 	.word	0x20009172
 8000a04:	20009174 	.word	0x20009174

08000a08 <_ZN8touchgfx3HAL11getBlitCapsEv>:
    virtual BlitOperations getBlitCaps()
 8000a08:	4603      	mov	r3, r0
        if (useDMAAcceleration)
 8000a0a:	f890 007a 	ldrb.w	r0, [r0, #122]	@ 0x7a
 8000a0e:	b118      	cbz	r0, 8000a18 <_ZN8touchgfx3HAL11getBlitCapsEv+0x10>
 8000a10:	6858      	ldr	r0, [r3, #4]
            return dma.getBlitCaps();
 8000a12:	6803      	ldr	r3, [r0, #0]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	4718      	bx	r3
    }
 8000a18:	4770      	bx	lr
	...

08000a1c <_Z7initLCDv>:
        readTouchInput();
    }
}

void initLCD(void)
{
 8000a1c:	b5f0      	push	{r4, r5, r6, r7, lr}
    /* Reset ST7789H2 */
    HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_RESET);
 8000a1e:	2200      	movs	r2, #0
{
 8000a20:	b08f      	sub	sp, #60	@ 0x3c
    HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_RESET);
 8000a22:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000a26:	4835      	ldr	r0, [pc, #212]	@ (8000afc <_Z7initLCDv+0xe0>)
 8000a28:	f001 f970 	bl	8001d0c <HAL_GPIO_WritePin>
    HAL_Delay(1); /* wait at least 10us according ST7789H2 datasheet */
 8000a2c:	2001      	movs	r0, #1
 8000a2e:	f001 f809 	bl	8001a44 <HAL_Delay>
    HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_SET);
 8000a32:	2201      	movs	r2, #1
 8000a34:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000a38:	4830      	ldr	r0, [pc, #192]	@ (8000afc <_Z7initLCDv+0xe0>)
 8000a3a:	f001 f967 	bl	8001d0c <HAL_GPIO_WritePin>
    HAL_Delay(120); /* wait maximum 120ms according ST7789H2 datasheet */
 8000a3e:	2078      	movs	r0, #120	@ 0x78
 8000a40:	f001 f800 	bl	8001a44 <HAL_Delay>

    /* Init display */
    LCD_IO_WriteReg(ST7789H2_COLOR_MODE);
 8000a44:	203a      	movs	r0, #58	@ 0x3a
 8000a46:	f000 fa4b 	bl	8000ee0 <LCD_IO_WriteReg>
    LCD_IO_WriteData(ST7789H2_FORMAT_RBG565);
 8000a4a:	2005      	movs	r0, #5
 8000a4c:	f000 fa42 	bl	8000ed4 <LCD_IO_WriteData>
    LCD_IO_WriteReg(ST7789H2_DISPLAY_INVERSION_ON);
 8000a50:	2021      	movs	r0, #33	@ 0x21
 8000a52:	f000 fa45 	bl	8000ee0 <LCD_IO_WriteReg>

    /* Voltage Gamma Control */
    const uint8_t arrayLength = 14;
    const uint16_t PVparameters[arrayLength] = {0x00D0, 0x0008, 0x0011, 0x0008, 0x000C, 0x0015, 0x0039, 0x0033, 0x0050, 0x0036, 0x0013, 0x0014, 0x0029, 0x002D};
 8000a56:	4b2a      	ldr	r3, [pc, #168]	@ (8000b00 <_Z7initLCDv+0xe4>)
 8000a58:	466a      	mov	r2, sp
 8000a5a:	f103 0618 	add.w	r6, r3, #24
 8000a5e:	4615      	mov	r5, r2
 8000a60:	6818      	ldr	r0, [r3, #0]
 8000a62:	6859      	ldr	r1, [r3, #4]
 8000a64:	4614      	mov	r4, r2
 8000a66:	c403      	stmia	r4!, {r0, r1}
 8000a68:	3308      	adds	r3, #8
 8000a6a:	42b3      	cmp	r3, r6
 8000a6c:	4622      	mov	r2, r4
 8000a6e:	d1f7      	bne.n	8000a60 <_Z7initLCDv+0x44>
 8000a70:	6818      	ldr	r0, [r3, #0]
    const uint16_t NVparameters[arrayLength] = {0x00D0, 0x0008, 0x0010, 0x0008, 0x0006, 0x0006, 0x0039, 0x0044, 0x0051, 0x000B, 0x0016, 0x0014, 0x002F, 0x0031};
 8000a72:	4b24      	ldr	r3, [pc, #144]	@ (8000b04 <_Z7initLCDv+0xe8>)
    const uint16_t PVparameters[arrayLength] = {0x00D0, 0x0008, 0x0011, 0x0008, 0x000C, 0x0015, 0x0039, 0x0033, 0x0050, 0x0036, 0x0013, 0x0014, 0x0029, 0x002D};
 8000a74:	6020      	str	r0, [r4, #0]
    const uint16_t NVparameters[arrayLength] = {0x00D0, 0x0008, 0x0010, 0x0008, 0x0006, 0x0006, 0x0039, 0x0044, 0x0051, 0x000B, 0x0016, 0x0014, 0x002F, 0x0031};
 8000a76:	aa07      	add	r2, sp, #28
 8000a78:	f103 0718 	add.w	r7, r3, #24
 8000a7c:	4614      	mov	r4, r2
 8000a7e:	6818      	ldr	r0, [r3, #0]
 8000a80:	6859      	ldr	r1, [r3, #4]
 8000a82:	4616      	mov	r6, r2
 8000a84:	c603      	stmia	r6!, {r0, r1}
 8000a86:	3308      	adds	r3, #8
 8000a88:	42bb      	cmp	r3, r7
 8000a8a:	4632      	mov	r2, r6
 8000a8c:	d1f7      	bne.n	8000a7e <_Z7initLCDv+0x62>
 8000a8e:	6818      	ldr	r0, [r3, #0]
 8000a90:	6030      	str	r0, [r6, #0]
    LCD_IO_WriteReg(ST7789H2_PV_GAMMA_CTRL);
 8000a92:	20e0      	movs	r0, #224	@ 0xe0
 8000a94:	f000 fa24 	bl	8000ee0 <LCD_IO_WriteReg>
    for (uint32_t i = 0; i < arrayLength; i++)
 8000a98:	2600      	movs	r6, #0
    {
        LCD_IO_WriteData(PVparameters[i]);
 8000a9a:	f835 0b02 	ldrh.w	r0, [r5], #2
    for (uint32_t i = 0; i < arrayLength; i++)
 8000a9e:	3601      	adds	r6, #1
        LCD_IO_WriteData(PVparameters[i]);
 8000aa0:	f000 fa18 	bl	8000ed4 <LCD_IO_WriteData>
    for (uint32_t i = 0; i < arrayLength; i++)
 8000aa4:	2e0e      	cmp	r6, #14
 8000aa6:	d1f8      	bne.n	8000a9a <_Z7initLCDv+0x7e>
    }
    LCD_IO_WriteReg(ST7789H2_NV_GAMMA_CTRL);
 8000aa8:	20e1      	movs	r0, #225	@ 0xe1
 8000aaa:	f000 fa19 	bl	8000ee0 <LCD_IO_WriteReg>
    for (uint32_t i = 0; i < arrayLength; i++)
 8000aae:	2500      	movs	r5, #0
    {
        LCD_IO_WriteData(NVparameters[i]);
 8000ab0:	f834 0b02 	ldrh.w	r0, [r4], #2
    for (uint32_t i = 0; i < arrayLength; i++)
 8000ab4:	3501      	adds	r5, #1
        LCD_IO_WriteData(NVparameters[i]);
 8000ab6:	f000 fa0d 	bl	8000ed4 <LCD_IO_WriteData>
    for (uint32_t i = 0; i < arrayLength; i++)
 8000aba:	2d0e      	cmp	r5, #14
 8000abc:	d1f8      	bne.n	8000ab0 <_Z7initLCDv+0x94>
    }

    /* Fill with black pixels */
    LCD_IO_WriteReg(ST7789H2_WRITE_RAM);
 8000abe:	202c      	movs	r0, #44	@ 0x2c
 8000ac0:	f000 fa0e 	bl	8000ee0 <LCD_IO_WriteReg>
 8000ac4:	f44f 4461 	mov.w	r4, #57600	@ 0xe100
    for (uint32_t i = 0; i < 240 * 240; i++)
    {
        LCD_IO_WriteData(0x0000);
 8000ac8:	2000      	movs	r0, #0
 8000aca:	f000 fa03 	bl	8000ed4 <LCD_IO_WriteData>
    for (uint32_t i = 0; i < 240 * 240; i++)
 8000ace:	3c01      	subs	r4, #1
 8000ad0:	d1fa      	bne.n	8000ac8 <_Z7initLCDv+0xac>
    }

    /* Display on */
    LCD_IO_WriteReg(ST7789H2_DISPLAY_ON);
 8000ad2:	2029      	movs	r0, #41	@ 0x29
 8000ad4:	f000 fa04 	bl	8000ee0 <LCD_IO_WriteReg>
    LCD_IO_WriteReg(ST7789H2_SLEEP_OUT);
 8000ad8:	2011      	movs	r0, #17
 8000ada:	f000 fa01 	bl	8000ee0 <LCD_IO_WriteReg>

    /* Tearing effect line on */
    LCD_IO_WriteReg(ST7789H2_TE_LINE_ON);
 8000ade:	2035      	movs	r0, #53	@ 0x35
 8000ae0:	f000 f9fe 	bl	8000ee0 <LCD_IO_WriteReg>
    LCD_IO_WriteData(0x00); // TE Mode 1
 8000ae4:	4620      	mov	r0, r4
 8000ae6:	f000 f9f5 	bl	8000ed4 <LCD_IO_WriteData>

    /* Backlight control signal assertion */
    HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8000aea:	4807      	ldr	r0, [pc, #28]	@ (8000b08 <_Z7initLCDv+0xec>)
 8000aec:	2201      	movs	r2, #1
 8000aee:	2120      	movs	r1, #32
}
 8000af0:	b00f      	add	sp, #60	@ 0x3c
 8000af2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8000af6:	f001 b909 	b.w	8001d0c <HAL_GPIO_WritePin>
 8000afa:	bf00      	nop
 8000afc:	40020c00 	.word	0x40020c00
 8000b00:	0800c19c 	.word	0x0800c19c
 8000b04:	0800c1b8 	.word	0x0800c1b8
 8000b08:	40021400 	.word	0x40021400

08000b0c <_ZN11TouchGFXHAL10initializeEv>:
{
 8000b0c:	b538      	push	{r3, r4, r5, lr}
 8000b0e:	4604      	mov	r4, r0
    mcuInstr.init();
 8000b10:	4d08      	ldr	r5, [pc, #32]	@ (8000b34 <_ZN11TouchGFXHAL10initializeEv+0x28>)
    initLCD();
 8000b12:	f7ff ff83 	bl	8000a1c <_Z7initLCDv>
    TouchGFXGeneratedHAL::initialize();
 8000b16:	4620      	mov	r0, r4
 8000b18:	f000 f9bc 	bl	8000e94 <_ZN20TouchGFXGeneratedHAL10initializeEv>
        lockDMAToPorch = enableLock;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	f884 304a 	strb.w	r3, [r4, #74]	@ 0x4a
    mcuInstr.init();
 8000b22:	4628      	mov	r0, r5
 8000b24:	f7ff fd89 	bl	800063a <_ZN8touchgfx25CortexMMCUInstrumentation4initEv>
        updateMCULoad = enabled;
 8000b28:	2301      	movs	r3, #1
        mcuInstrumentation = mcuInstr;
 8000b2a:	6125      	str	r5, [r4, #16]
        updateMCULoad = enabled;
 8000b2c:	f884 3070 	strb.w	r3, [r4, #112]	@ 0x70
}
 8000b30:	bd38      	pop	{r3, r4, r5, pc}
 8000b32:	bf00      	nop
 8000b34:	200000b4 	.word	0x200000b4

08000b38 <_Z9setWindowtttt>:

void setWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Xwidth, uint16_t Height)
{
 8000b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b3a:	4607      	mov	r7, r0
    // Set pixel x pos:
    LCD_IO_WriteReg(ST7789H2_CASET);
 8000b3c:	202a      	movs	r0, #42	@ 0x2a
{
 8000b3e:	460e      	mov	r6, r1
 8000b40:	461c      	mov	r4, r3
 8000b42:	4615      	mov	r5, r2
    LCD_IO_WriteReg(ST7789H2_CASET);
 8000b44:	f000 f9cc 	bl	8000ee0 <LCD_IO_WriteReg>
    LCD_IO_WriteData(Xpos >> 8);                   /* XS[15:8] */
 8000b48:	0a38      	lsrs	r0, r7, #8
 8000b4a:	f000 f9c3 	bl	8000ed4 <LCD_IO_WriteData>
    LCD_IO_WriteData((uint8_t)Xpos);               /* XS[7:0] */
 8000b4e:	b2f8      	uxtb	r0, r7
 8000b50:	f000 f9c0 	bl	8000ed4 <LCD_IO_WriteData>
    LCD_IO_WriteData((Xpos + Xwidth - 1) >> 8);        /* XE[15:8] */
 8000b54:	1978      	adds	r0, r7, r5
 8000b56:	3801      	subs	r0, #1
 8000b58:	f3c0 200f 	ubfx	r0, r0, #8, #16
    LCD_IO_WriteData((uint8_t)(Xpos + Xwidth - 1));    /* XE[7:0] */
 8000b5c:	3d01      	subs	r5, #1
    LCD_IO_WriteData((Xpos + Xwidth - 1) >> 8);        /* XE[15:8] */
 8000b5e:	f000 f9b9 	bl	8000ed4 <LCD_IO_WriteData>
    LCD_IO_WriteData((uint8_t)(Xpos + Xwidth - 1));    /* XE[7:0] */
 8000b62:	19e8      	adds	r0, r5, r7
 8000b64:	b2c0      	uxtb	r0, r0
 8000b66:	f000 f9b5 	bl	8000ed4 <LCD_IO_WriteData>


    // Set pixel y pos:
    LCD_IO_WriteReg(ST7789H2_RASET);
 8000b6a:	202b      	movs	r0, #43	@ 0x2b
 8000b6c:	f000 f9b8 	bl	8000ee0 <LCD_IO_WriteReg>
    LCD_IO_WriteData(Ypos >> 8);                 /* YS[15:8] */
 8000b70:	0a30      	lsrs	r0, r6, #8
 8000b72:	f000 f9af 	bl	8000ed4 <LCD_IO_WriteData>
    LCD_IO_WriteData((uint8_t)Ypos);             /* YS[7:0] */
 8000b76:	b2f0      	uxtb	r0, r6
 8000b78:	f000 f9ac 	bl	8000ed4 <LCD_IO_WriteData>
    LCD_IO_WriteData((Ypos + Height - 1) >> 8);        /* YE[15:8] */
 8000b7c:	1930      	adds	r0, r6, r4
 8000b7e:	3801      	subs	r0, #1
 8000b80:	f3c0 200f 	ubfx	r0, r0, #8, #16
 8000b84:	f000 f9a6 	bl	8000ed4 <LCD_IO_WriteData>
    LCD_IO_WriteData((uint8_t)(Ypos + Height - 1));    /* YE[7:0] */
 8000b88:	1e60      	subs	r0, r4, #1
 8000b8a:	4430      	add	r0, r6
 8000b8c:	b2c0      	uxtb	r0, r0
}
 8000b8e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    LCD_IO_WriteData((uint8_t)(Ypos + Height - 1));    /* YE[7:0] */
 8000b92:	f000 b99f 	b.w	8000ed4 <LCD_IO_WriteData>
	...

08000b98 <_Z28LCD_SignalTearingEffectEventv>:
{
 8000b98:	b570      	push	{r4, r5, r6, lr}
        return instance;
 8000b9a:	4e17      	ldr	r6, [pc, #92]	@ (8000bf8 <_Z28LCD_SignalTearingEffectEventv+0x60>)
 8000b9c:	6833      	ldr	r3, [r6, #0]
        vSyncCnt++;
 8000b9e:	f893 206a 	ldrb.w	r2, [r3, #106]	@ 0x6a
 8000ba2:	3201      	adds	r2, #1
 8000ba4:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a
        isFrontPorchEntered = false;
 8000ba8:	2200      	movs	r2, #0
 8000baa:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
    OSWrappers::signalVSync();
 8000bae:	f000 f8a1 	bl	8000cf4 <_ZN8touchgfx10OSWrappers11signalVSyncEv>
    if (refreshRequested && !displayRefreshing)
 8000bb2:	4b12      	ldr	r3, [pc, #72]	@ (8000bfc <_Z28LCD_SignalTearingEffectEventv+0x64>)
 8000bb4:	781b      	ldrb	r3, [r3, #0]
 8000bb6:	b1eb      	cbz	r3, 8000bf4 <_Z28LCD_SignalTearingEffectEventv+0x5c>
 8000bb8:	4d11      	ldr	r5, [pc, #68]	@ (8000c00 <_Z28LCD_SignalTearingEffectEventv+0x68>)
 8000bba:	782b      	ldrb	r3, [r5, #0]
 8000bbc:	f003 04ff 	and.w	r4, r3, #255	@ 0xff
 8000bc0:	b9c3      	cbnz	r3, 8000bf4 <_Z28LCD_SignalTearingEffectEventv+0x5c>
        touchgfx::HAL::getInstance()->swapFrameBuffers();
 8000bc2:	6830      	ldr	r0, [r6, #0]
            LCD_IO_WriteData(currFbBase[i]);
 8000bc4:	4e0f      	ldr	r6, [pc, #60]	@ (8000c04 <_Z28LCD_SignalTearingEffectEventv+0x6c>)
        touchgfx::HAL::getInstance()->swapFrameBuffers();
 8000bc6:	f005 ff11 	bl	80069ec <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        displayRefreshing = true;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	702b      	strb	r3, [r5, #0]
        setWindow(0, 0, 240, 240);
 8000bce:	23f0      	movs	r3, #240	@ 0xf0
 8000bd0:	461a      	mov	r2, r3
 8000bd2:	4621      	mov	r1, r4
 8000bd4:	4620      	mov	r0, r4
 8000bd6:	f7ff ffaf 	bl	8000b38 <_Z9setWindowtttt>
        LCD_IO_WriteReg(ST7789H2_WRITE_RAM);
 8000bda:	202c      	movs	r0, #44	@ 0x2c
 8000bdc:	f000 f980 	bl	8000ee0 <LCD_IO_WriteReg>
            LCD_IO_WriteData(currFbBase[i]);
 8000be0:	6833      	ldr	r3, [r6, #0]
 8000be2:	5b18      	ldrh	r0, [r3, r4]
        for (int i = 0; i < 240 * 240; i++)
 8000be4:	3402      	adds	r4, #2
            LCD_IO_WriteData(currFbBase[i]);
 8000be6:	f000 f975 	bl	8000ed4 <LCD_IO_WriteData>
        for (int i = 0; i < 240 * 240; i++)
 8000bea:	f5b4 3fe1 	cmp.w	r4, #115200	@ 0x1c200
 8000bee:	d1f7      	bne.n	8000be0 <_Z28LCD_SignalTearingEffectEventv+0x48>
        displayRefreshing = false;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	702b      	strb	r3, [r5, #0]
}
 8000bf4:	bd70      	pop	{r4, r5, r6, pc}
 8000bf6:	bf00      	nop
 8000bf8:	20009178 	.word	0x20009178
 8000bfc:	200000c5 	.word	0x200000c5
 8000c00:	200000c4 	.word	0x200000c4
 8000c04:	200000c0 	.word	0x200000c0

08000c08 <HAL_GPIO_EXTI_Callback>:
    if (GPIO_Pin == LCD_TE_Pin)
 8000c08:	2810      	cmp	r0, #16
{
 8000c0a:	b508      	push	{r3, lr}
 8000c0c:	4601      	mov	r1, r0
    if (GPIO_Pin == LCD_TE_Pin)
 8000c0e:	d110      	bne.n	8000c32 <HAL_GPIO_EXTI_Callback+0x2a>
        uint8_t PinStatus = (HAL_GPIO_ReadPin(LCD_TE_GPIO_Port, LCD_TE_Pin) == GPIO_PIN_SET ? 1 : 0);
 8000c10:	480b      	ldr	r0, [pc, #44]	@ (8000c40 <HAL_GPIO_EXTI_Callback+0x38>)
 8000c12:	f001 f875 	bl	8001d00 <HAL_GPIO_ReadPin>
 8000c16:	2801      	cmp	r0, #1
            GPIO::set(GPIO::VSYNC_FREQ);
 8000c18:	f04f 0000 	mov.w	r0, #0
        uint8_t PinStatus = (HAL_GPIO_ReadPin(LCD_TE_GPIO_Port, LCD_TE_Pin) == GPIO_PIN_SET ? 1 : 0);
 8000c1c:	d105      	bne.n	8000c2a <HAL_GPIO_EXTI_Callback+0x22>
            GPIO::set(GPIO::VSYNC_FREQ);
 8000c1e:	f7ff fd93 	bl	8000748 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
}
 8000c22:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            LCD_SignalTearingEffectEvent();
 8000c26:	f7ff bfb7 	b.w	8000b98 <_Z28LCD_SignalTearingEffectEventv>
}
 8000c2a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            GPIO::clear(GPIO::VSYNC_FREQ);
 8000c2e:	f7ff bdb5 	b.w	800079c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
    if (GPIO_Pin == TS_INT_Pin)
 8000c32:	2820      	cmp	r0, #32
 8000c34:	d103      	bne.n	8000c3e <HAL_GPIO_EXTI_Callback+0x36>
}
 8000c36:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        readTouchInput();
 8000c3a:	f7ff bd4d 	b.w	80006d8 <_Z14readTouchInputv>
}
 8000c3e:	bd08      	pop	{r3, pc}
 8000c40:	40021800 	.word	0x40021800

08000c44 <IdleTaskHook>:

extern "C" {

    portBASE_TYPE IdleTaskHook(void* p)
    {
 8000c44:	b508      	push	{r3, lr}
        return instance;
 8000c46:	4b04      	ldr	r3, [pc, #16]	@ (8000c58 <IdleTaskHook+0x14>)
 8000c48:	4601      	mov	r1, r0
 8000c4a:	6818      	ldr	r0, [r3, #0]
        if ((int)p) //idle task sched out
 8000c4c:	b101      	cbz	r1, 8000c50 <IdleTaskHook+0xc>
        {
            touchgfx::HAL::getInstance()->setMCUActive(true);
 8000c4e:	2101      	movs	r1, #1
        }
        else //idle task sched in
        {
            touchgfx::HAL::getInstance()->setMCUActive(false);
 8000c50:	f005 fee6 	bl	8006a20 <_ZN8touchgfx3HAL12setMCUActiveEb>
        }
        return pdTRUE;
    }
 8000c54:	2001      	movs	r0, #1
 8000c56:	bd08      	pop	{r3, pc}
 8000c58:	20009178 	.word	0x20009178

08000c5c <_GLOBAL__sub_I_firstFrameReadyToDisplay>:
        : cc_consumed(0),
 8000c5c:	4b03      	ldr	r3, [pc, #12]	@ (8000c6c <_GLOBAL__sub_I_firstFrameReadyToDisplay+0x10>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	605a      	str	r2, [r3, #4]
          cc_in(0)
 8000c62:	609a      	str	r2, [r3, #8]
 8000c64:	4a02      	ldr	r2, [pc, #8]	@ (8000c70 <_GLOBAL__sub_I_firstFrameReadyToDisplay+0x14>)
 8000c66:	601a      	str	r2, [r3, #0]
}
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	200000b4 	.word	0x200000b4
 8000c70:	0800c1dc 	.word	0x0800c1dc

08000c74 <_ZN8touchgfx10OSWrappers10initializeEv>:
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8000c74:	2101      	movs	r1, #1
{
 8000c76:	b508      	push	{r3, lr}
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8000c78:	2200      	movs	r2, #0
 8000c7a:	4608      	mov	r0, r1
 8000c7c:	f002 fff6 	bl	8003c6c <osSemaphoreNew>
 8000c80:	4b0a      	ldr	r3, [pc, #40]	@ (8000cac <_ZN8touchgfx10OSWrappers10initializeEv+0x38>)
 8000c82:	6018      	str	r0, [r3, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 8000c84:	b928      	cbnz	r0, 8000c92 <_ZN8touchgfx10OSWrappers10initializeEv+0x1e>
 8000c86:	4b0a      	ldr	r3, [pc, #40]	@ (8000cb0 <_ZN8touchgfx10OSWrappers10initializeEv+0x3c>)
 8000c88:	4a0a      	ldr	r2, [pc, #40]	@ (8000cb4 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 8000c8a:	2128      	movs	r1, #40	@ 0x28

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8000c8c:	480a      	ldr	r0, [pc, #40]	@ (8000cb8 <_ZN8touchgfx10OSWrappers10initializeEv+0x44>)
 8000c8e:	f00a fa69 	bl	800b164 <__assert_func>
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 8000c92:	2200      	movs	r2, #0
 8000c94:	2104      	movs	r1, #4
 8000c96:	2001      	movs	r0, #1
 8000c98:	f003 f887 	bl	8003daa <osMessageQueueNew>
 8000c9c:	4b07      	ldr	r3, [pc, #28]	@ (8000cbc <_ZN8touchgfx10OSWrappers10initializeEv+0x48>)
 8000c9e:	6018      	str	r0, [r3, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8000ca0:	b918      	cbnz	r0, 8000caa <_ZN8touchgfx10OSWrappers10initializeEv+0x36>
 8000ca2:	4b07      	ldr	r3, [pc, #28]	@ (8000cc0 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>)
 8000ca4:	4a03      	ldr	r2, [pc, #12]	@ (8000cb4 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 8000ca6:	212c      	movs	r1, #44	@ 0x2c
 8000ca8:	e7f0      	b.n	8000c8c <_ZN8touchgfx10OSWrappers10initializeEv+0x18>
}
 8000caa:	bd08      	pop	{r3, pc}
 8000cac:	200000cc 	.word	0x200000cc
 8000cb0:	0800c385 	.word	0x0800c385
 8000cb4:	0800c3ce 	.word	0x0800c3ce
 8000cb8:	0800c3fd 	.word	0x0800c3fd
 8000cbc:	200000c8 	.word	0x200000c8
 8000cc0:	0800c47f 	.word	0x0800c47f

08000cc4 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:
/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 8000cc4:	4b02      	ldr	r3, [pc, #8]	@ (8000cd0 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0xc>)
 8000cc6:	f04f 31ff 	mov.w	r1, #4294967295
 8000cca:	6818      	ldr	r0, [r3, #0]
 8000ccc:	f003 b818 	b.w	8003d00 <osSemaphoreAcquire>
 8000cd0:	200000cc 	.word	0x200000cc

08000cd4 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:
/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
    osSemaphoreRelease(frame_buffer_sem);
 8000cd4:	4b01      	ldr	r3, [pc, #4]	@ (8000cdc <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x8>)
 8000cd6:	6818      	ldr	r0, [r3, #0]
 8000cd8:	f003 b83e 	b.w	8003d58 <osSemaphoreRelease>
 8000cdc:	200000cc 	.word	0x200000cc

08000ce0 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, 0);
 8000ce0:	4b02      	ldr	r3, [pc, #8]	@ (8000cec <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0xc>)
 8000ce2:	2100      	movs	r1, #0
 8000ce4:	6818      	ldr	r0, [r3, #0]
 8000ce6:	f003 b80b 	b.w	8003d00 <osSemaphoreAcquire>
 8000cea:	bf00      	nop
 8000cec:	200000cc 	.word	0x200000cc

08000cf0 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 * from ISR.
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
 8000cf0:	f7ff bff0 	b.w	8000cd4 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08000cf4 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 8000cf4:	4803      	ldr	r0, [pc, #12]	@ (8000d04 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x10>)
 8000cf6:	4904      	ldr	r1, [pc, #16]	@ (8000d08 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x14>)
 8000cf8:	6800      	ldr	r0, [r0, #0]
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	461a      	mov	r2, r3
 8000cfe:	f003 b88f 	b.w	8003e20 <osMessageQueuePut>
 8000d02:	bf00      	nop
 8000d04:	200000c8 	.word	0x200000c8
 8000d08:	20000000 	.word	0x20000000

08000d0c <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8000d0c:	b513      	push	{r0, r1, r4, lr}
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 8000d0e:	4c08      	ldr	r4, [pc, #32]	@ (8000d30 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x24>)
 8000d10:	2300      	movs	r3, #0
 8000d12:	461a      	mov	r2, r3
 8000d14:	a901      	add	r1, sp, #4
 8000d16:	6820      	ldr	r0, [r4, #0]
 8000d18:	f003 f8b3 	bl	8003e82 <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 8000d1c:	6820      	ldr	r0, [r4, #0]
 8000d1e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d22:	2200      	movs	r2, #0
 8000d24:	a901      	add	r1, sp, #4
 8000d26:	f003 f8ac 	bl	8003e82 <osMessageQueueGet>
}
 8000d2a:	b002      	add	sp, #8
 8000d2c:	bd10      	pop	{r4, pc}
 8000d2e:	bf00      	nop
 8000d30:	200000c8 	.word	0x200000c8

08000d34 <_ZN8touchgfx13DMA_Interface10initializeEv>:
    }

    /** Perform initialization. Does nothing in this base class. */
    virtual void initialize()
    {
    }
 8000d34:	4770      	bx	lr

08000d36 <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual DMAType getDMAType()
    {
        return DMA_TYPE_GENERIC;
    }
 8000d36:	2000      	movs	r0, #0
 8000d38:	4770      	bx	lr

08000d3a <_ZN8STM32DMA18signalDMAInterruptEv>:
     *
     * @brief Does nothing.
     */
    virtual void signalDMAInterrupt()
    {
    }
 8000d3a:	4770      	bx	lr

08000d3c <_ZN8STM32DMA5flushEv>:
     * @brief Block until all DMA transfers are complete. Since this particular DMA does not do
     * anything, return immediately.
     */
    virtual void flush()
    {
    }
 8000d3c:	4770      	bx	lr

08000d3e <_ZN8STM32DMA11getBlitCapsEv>:
}

touchgfx::BlitOperations STM32DMA::getBlitCaps()
{
    return static_cast<touchgfx::BlitOperations>(0);
}
 8000d3e:	2000      	movs	r0, #0
 8000d40:	4770      	bx	lr

08000d42 <_ZN8STM32DMAD1Ev>:
class STM32DMA : public touchgfx::DMA_Interface
 8000d42:	4770      	bx	lr

08000d44 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:

void STM32DMA::setupDataCopy(const touchgfx::BlitOp& blitOp)
{
 8000d44:	b508      	push	{r3, lr}
    assert(0 && "DMA operation not supported");
 8000d46:	4a03      	ldr	r2, [pc, #12]	@ (8000d54 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x10>)
 8000d48:	4b03      	ldr	r3, [pc, #12]	@ (8000d58 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x14>)
 8000d4a:	4804      	ldr	r0, [pc, #16]	@ (8000d5c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x18>)
 8000d4c:	2122      	movs	r1, #34	@ 0x22
 8000d4e:	f00a fa09 	bl	800b164 <__assert_func>
 8000d52:	bf00      	nop
 8000d54:	0800c4e4 	.word	0x0800c4e4
 8000d58:	0800c4c1 	.word	0x0800c4c1
 8000d5c:	0800c522 	.word	0x0800c522

08000d60 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
}

void STM32DMA::setupDataFill(const touchgfx::BlitOp& blitOp)
{
 8000d60:	b508      	push	{r3, lr}
    assert(0 && "DMA operation not supported");
 8000d62:	4a03      	ldr	r2, [pc, #12]	@ (8000d70 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x10>)
 8000d64:	4b03      	ldr	r3, [pc, #12]	@ (8000d74 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x14>)
 8000d66:	4804      	ldr	r0, [pc, #16]	@ (8000d78 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x18>)
 8000d68:	2127      	movs	r1, #39	@ 0x27
 8000d6a:	f00a f9fb 	bl	800b164 <__assert_func>
 8000d6e:	bf00      	nop
 8000d70:	0800c5a2 	.word	0x0800c5a2
 8000d74:	0800c4c1 	.word	0x0800c4c1
 8000d78:	0800c522 	.word	0x0800c522

08000d7c <_ZN8STM32DMAD0Ev>:
 8000d7c:	b510      	push	{r4, lr}
 8000d7e:	2144      	movs	r1, #68	@ 0x44
 8000d80:	4604      	mov	r4, r0
 8000d82:	f00a f9c1 	bl	800b108 <_ZdlPvj>
 8000d86:	4620      	mov	r0, r4
 8000d88:	bd10      	pop	{r4, pc}
	...

08000d8c <_ZN8STM32DMAC1Ev>:
STM32DMA::STM32DMA()
 8000d8c:	b538      	push	{r3, r4, r5, lr}
 8000d8e:	4604      	mov	r4, r0
    : DMA_Interface(q), q(&b, 1)
 8000d90:	4621      	mov	r1, r4
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8000d92:	2500      	movs	r5, #0
 8000d94:	4b06      	ldr	r3, [pc, #24]	@ (8000db0 <_ZN8STM32DMAC1Ev+0x24>)
 8000d96:	7225      	strb	r5, [r4, #8]
 8000d98:	300c      	adds	r0, #12
 8000d9a:	6060      	str	r0, [r4, #4]
 8000d9c:	7265      	strb	r5, [r4, #9]
 8000d9e:	2201      	movs	r2, #1
 8000da0:	f841 3b20 	str.w	r3, [r1], #32
 8000da4:	f005 ff76 	bl	8006c94 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 */
struct colortype
{
    /** Default constructor. Creates a black (0) color. */
    colortype()
        : color(0)
 8000da8:	62e5      	str	r5, [r4, #44]	@ 0x2c
}
 8000daa:	4620      	mov	r0, r4
 8000dac:	bd38      	pop	{r3, r4, r5, pc}
 8000dae:	bf00      	nop
 8000db0:	0800c94c 	.word	0x0800c94c

08000db4 <touchgfx_taskEntry>:
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 8000db4:	4801      	ldr	r0, [pc, #4]	@ (8000dbc <touchgfx_taskEntry+0x8>)
 8000db6:	f005 b890 	b.w	8005eda <_ZN8touchgfx3HAL9taskEntryEv>
 8000dba:	bf00      	nop
 8000dbc:	200000d0 	.word	0x200000d0

08000dc0 <_GLOBAL__sub_I_touchgfx_init>:
}
 8000dc0:	b570      	push	{r4, r5, r6, lr}
static STM32DMA dma;
 8000dc2:	4e24      	ldr	r6, [pc, #144]	@ (8000e54 <_GLOBAL__sub_I_touchgfx_init+0x94>)
{
public:

    STM32TouchController() {}
 8000dc4:	4c24      	ldr	r4, [pc, #144]	@ (8000e58 <_GLOBAL__sub_I_touchgfx_init+0x98>)
static LCD16bpp display;
 8000dc6:	4d25      	ldr	r5, [pc, #148]	@ (8000e5c <_GLOBAL__sub_I_touchgfx_init+0x9c>)
 8000dc8:	4b25      	ldr	r3, [pc, #148]	@ (8000e60 <_GLOBAL__sub_I_touchgfx_init+0xa0>)
 8000dca:	6023      	str	r3, [r4, #0]
static STM32DMA dma;
 8000dcc:	4630      	mov	r0, r6
 8000dce:	f7ff ffdd 	bl	8000d8c <_ZN8STM32DMAC1Ev>
static LCD16bpp display;
 8000dd2:	4628      	mov	r0, r5
 8000dd4:	f008 fdaa 	bl	800992c <_ZN8touchgfx8LCD16bppC1Ev>
        : dma(dmaInterface),
 8000dd8:	4b22      	ldr	r3, [pc, #136]	@ (8000e64 <_GLOBAL__sub_I_touchgfx_init+0xa4>)
          isFrontPorchEntered(false),
 8000dda:	4823      	ldr	r0, [pc, #140]	@ (8000e68 <_GLOBAL__sub_I_touchgfx_init+0xa8>)
          touchController(touchCtrl),
 8000ddc:	60dc      	str	r4, [r3, #12]
          mcuInstrumentation(0),
 8000dde:	2200      	movs	r2, #0
          refreshStrategy(REFRESH_STRATEGY_DEFAULT),
 8000de0:	f44f 7180 	mov.w	r1, #256	@ 0x100
          auxiliaryLCD(0),
 8000de4:	e9c3 1212 	strd	r1, r2, [r3, #72]	@ 0x48
          touchSampleRate(1),
 8000de8:	4920      	ldr	r1, [pc, #128]	@ (8000e6c <_GLOBAL__sub_I_touchgfx_init+0xac>)
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
        : drag(), listener(0), dragThresholdValue(0)
 8000dea:	861a      	strh	r2, [r3, #48]	@ 0x30
          vSyncCompensationEnabled(false),
 8000dec:	e9c3 121a 	strd	r1, r2, [r3, #104]	@ 0x68
          isFrontPorchEntered(false),
 8000df0:	491f      	ldr	r1, [pc, #124]	@ (8000e70 <_GLOBAL__sub_I_touchgfx_init+0xb0>)
          useAuxiliaryLCD(false),
 8000df2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
          isFrontPorchEntered(false),
 8000df6:	e9c3 011e 	strd	r0, r1, [r3, #120]	@ 0x78
          minDrawingHeight(maxDrawingHeight / 3),    // Best guess based on testing (but not ideal in all cases)
 8000dfa:	f04f 1114 	mov.w	r1, #1310740	@ 0x140014
 8000dfe:	f8c3 1080 	str.w	r1, [r3, #128]	@ 0x80
        instance = this;
 8000e02:	491c      	ldr	r1, [pc, #112]	@ (8000e74 <_GLOBAL__sub_I_touchgfx_init+0xb4>)
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8000e04:	481c      	ldr	r0, [pc, #112]	@ (8000e78 <_GLOBAL__sub_I_touchgfx_init+0xb8>)
        instance = this;
 8000e06:	600b      	str	r3, [r1, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8000e08:	21f0      	movs	r1, #240	@ 0xf0
          buttonController(0),
 8000e0a:	e9c3 2204 	strd	r2, r2, [r3, #16]
 8000e0e:	e9c3 2206 	strd	r2, r2, [r3, #24]
 8000e12:	e9c3 2208 	strd	r2, r2, [r3, #32]
 8000e16:	e9c3 220a 	strd	r2, r2, [r3, #40]	@ 0x28
          frameBuffer0(0),
 8000e1a:	e9c3 220e 	strd	r2, r2, [r3, #56]	@ 0x38
          frameBuffer2(0),
 8000e1e:	e9c3 2210 	strd	r2, r2, [r3, #64]	@ 0x40
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
        : x(0), y(0), width(0), height(0)
 8000e22:	e9c3 2214 	strd	r2, r2, [r3, #80]	@ 0x50
          lastX(0),
 8000e26:	e9c3 2217 	strd	r2, r2, [r3, #92]	@ 0x5c
          lastY(0),
 8000e2a:	665a      	str	r2, [r3, #100]	@ 0x64
          updateMCULoad(0),
 8000e2c:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
          cc_begin(0),
 8000e30:	675a      	str	r2, [r3, #116]	@ 0x74
          lcdRef(display),
 8000e32:	e9c3 6501 	strd	r6, r5, [r3, #4]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8000e36:	8001      	strh	r1, [r0, #0]
 8000e38:	4810      	ldr	r0, [pc, #64]	@ (8000e7c <_GLOBAL__sub_I_touchgfx_init+0xbc>)
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8000e3a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8000e3e:	8001      	strh	r1, [r0, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8000e40:	480f      	ldr	r0, [pc, #60]	@ (8000e80 <_GLOBAL__sub_I_touchgfx_init+0xc0>)
 8000e42:	8001      	strh	r1, [r0, #0]
 8000e44:	480f      	ldr	r0, [pc, #60]	@ (8000e84 <_GLOBAL__sub_I_touchgfx_init+0xc4>)
 8000e46:	8001      	strh	r1, [r0, #0]
        DISPLAY_ROTATION = rotate0;
 8000e48:	490f      	ldr	r1, [pc, #60]	@ (8000e88 <_GLOBAL__sub_I_touchgfx_init+0xc8>)
 8000e4a:	700a      	strb	r2, [r1, #0]
     * @param [in,out] display Reference to LCD interface.
     * @param [in,out] tc      Reference to Touch Controller driver.
     * @param width            Width of the display.
     * @param height           Height of the display.
     */
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 8000e4c:	4a0f      	ldr	r2, [pc, #60]	@ (8000e8c <_GLOBAL__sub_I_touchgfx_init+0xcc>)
 8000e4e:	601a      	str	r2, [r3, #0]
}
 8000e50:	bd70      	pop	{r4, r5, r6, pc}
 8000e52:	bf00      	nop
 8000e54:	200001e0 	.word	0x200001e0
 8000e58:	20000224 	.word	0x20000224
 8000e5c:	20000154 	.word	0x20000154
 8000e60:	0800c204 	.word	0x0800c204
 8000e64:	200000d0 	.word	0x200000d0
 8000e68:	01010000 	.word	0x01010000
 8000e6c:	01000001 	.word	0x01000001
 8000e70:	003c0400 	.word	0x003c0400
 8000e74:	20009178 	.word	0x20009178
 8000e78:	2000916c 	.word	0x2000916c
 8000e7c:	20009172 	.word	0x20009172
 8000e80:	2000916e 	.word	0x2000916e
 8000e84:	20009174 	.word	0x20009174
 8000e88:	20009170 	.word	0x20009170
 8000e8c:	0800c860 	.word	0x0800c860

08000e90 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:
}

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
    //setTFTFrameBuffer() not used for selected display interface
}
 8000e90:	4770      	bx	lr
	...

08000e94 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
{
 8000e94:	b570      	push	{r4, r5, r6, lr}
 8000e96:	4604      	mov	r4, r0
    HAL::initialize();
 8000e98:	f005 f80b 	bl	8005eb2 <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 8000e9c:	6823      	ldr	r3, [r4, #0]
 8000e9e:	6e9d      	ldr	r5, [r3, #104]	@ 0x68
 8000ea0:	f006 fdd0 	bl	8007a44 <_ZN8touchgfx11Application11getInstanceEv>
 8000ea4:	4601      	mov	r1, r0
 8000ea6:	4620      	mov	r0, r4
 8000ea8:	47a8      	blx	r5
    setFrameBufferStartAddresses((void*)frameBuf, (void*)0, (void*)0);
 8000eaa:	6823      	ldr	r3, [r4, #0]
 8000eac:	4904      	ldr	r1, [pc, #16]	@ (8000ec0 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x2c>)
 8000eae:	f8d3 508c 	ldr.w	r5, [r3, #140]	@ 0x8c
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	4620      	mov	r0, r4
 8000eb6:	46ac      	mov	ip, r5
 8000eb8:	461a      	mov	r2, r3
}
 8000eba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    setFrameBufferStartAddresses((void*)frameBuf, (void*)0, (void*)0);
 8000ebe:	4760      	bx	ip
 8000ec0:	20020000 	.word	0x20020000

08000ec4 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:
    return HAL::beginFrame();
 8000ec4:	f004 bfdc 	b.w	8005e80 <_ZN8touchgfx3HAL10beginFrameEv>

08000ec8 <_ZN20TouchGFXGeneratedHAL8endFrameEv>:
    HAL::endFrame();
 8000ec8:	f004 bfe6 	b.w	8005e98 <_ZN8touchgfx3HAL8endFrameEv>

08000ecc <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
    HAL::flushFrameBuffer(rect);
 8000ecc:	f004 bfa1 	b.w	8005e12 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>

08000ed0 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:
}

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
    return HAL::blockCopy(dest, src, numBytes);
 8000ed0:	f005 b923 	b.w	800611a <_ZN8touchgfx3HAL9blockCopyEPvPKvm>

08000ed4 <LCD_IO_WriteData>:
     * @param  Data: Data to be written
     */
    __STATIC_INLINE void FMC_BANK1_WriteData(uint16_t Data)
    {
        /* Write 16-bits Reg */
        *FMC_BANK1_MEM = Data;
 8000ed4:	f04f 43c0 	mov.w	r3, #1610612736	@ 0x60000000
 8000ed8:	8058      	strh	r0, [r3, #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000eda:	f3bf 8f4f 	dsb	sy
     */
    __weak void LCD_IO_WriteData(uint16_t RegValue)
    {
        /* Write 16-bits Reg */
        FMC_BANK1_WriteData(RegValue);
    }
 8000ede:	4770      	bx	lr

08000ee0 <LCD_IO_WriteReg>:
        *FMC_BANK1_REG = Reg;
 8000ee0:	f04f 43c0 	mov.w	r3, #1610612736	@ 0x60000000
 8000ee4:	8018      	strh	r0, [r3, #0]
 8000ee6:	f3bf 8f4f 	dsb	sy
     */
    __weak void LCD_IO_WriteReg(uint8_t Reg)
    {
        /* Write 16-bits Index, then Write Reg */
        FMC_BANK1_WriteReg(Reg);
    }
 8000eea:	4770      	bx	lr

08000eec <MX_CRC_Init>:
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000eec:	4805      	ldr	r0, [pc, #20]	@ (8000f04 <MX_CRC_Init+0x18>)
{
 8000eee:	b508      	push	{r3, lr}
  hcrc.Instance = CRC;
 8000ef0:	4b05      	ldr	r3, [pc, #20]	@ (8000f08 <MX_CRC_Init+0x1c>)
 8000ef2:	6003      	str	r3, [r0, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000ef4:	f000 fe0c 	bl	8001b10 <HAL_CRC_Init>
 8000ef8:	b118      	cbz	r0, 8000f02 <MX_CRC_Init+0x16>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000efa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8000efe:	f000 ba37 	b.w	8001370 <Error_Handler>
}
 8000f02:	bd08      	pop	{r3, pc}
 8000f04:	20000228 	.word	0x20000228
 8000f08:	40023000 	.word	0x40023000

08000f0c <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{

  if(crcHandle->Instance==CRC)
 8000f0c:	6802      	ldr	r2, [r0, #0]
 8000f0e:	4b09      	ldr	r3, [pc, #36]	@ (8000f34 <HAL_CRC_MspInit+0x28>)
 8000f10:	429a      	cmp	r2, r3
{
 8000f12:	b082      	sub	sp, #8
  if(crcHandle->Instance==CRC)
 8000f14:	d10b      	bne.n	8000f2e <HAL_CRC_MspInit+0x22>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000f16:	2300      	movs	r3, #0
 8000f18:	9301      	str	r3, [sp, #4]
 8000f1a:	4b07      	ldr	r3, [pc, #28]	@ (8000f38 <HAL_CRC_MspInit+0x2c>)
 8000f1c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000f1e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8000f22:	631a      	str	r2, [r3, #48]	@ 0x30
 8000f24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f26:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000f2a:	9301      	str	r3, [sp, #4]
 8000f2c:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000f2e:	b002      	add	sp, #8
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	40023000 	.word	0x40023000
 8000f38:	40023800 	.word	0x40023800

08000f3c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000f3c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000f3e:	2001      	movs	r0, #1
 8000f40:	f002 fe88 	bl	8003c54 <osDelay>
  for(;;)
 8000f44:	e7fb      	b.n	8000f3e <StartDefaultTask+0x2>
	...

08000f48 <vApplicationIdleHook>:
  vTaskSetApplicationTaskTag(NULL, IdleTaskHook);
 8000f48:	4901      	ldr	r1, [pc, #4]	@ (8000f50 <vApplicationIdleHook+0x8>)
 8000f4a:	2000      	movs	r0, #0
 8000f4c:	f004 baba 	b.w	80054c4 <vTaskSetApplicationTaskTag>
 8000f50:	08000c45 	.word	0x08000c45

08000f54 <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 8000f54:	b508      	push	{r3, lr}
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000f56:	4a07      	ldr	r2, [pc, #28]	@ (8000f74 <MX_FREERTOS_Init+0x20>)
 8000f58:	4807      	ldr	r0, [pc, #28]	@ (8000f78 <MX_FREERTOS_Init+0x24>)
 8000f5a:	2100      	movs	r1, #0
 8000f5c:	f002 fe36 	bl	8003bcc <osThreadNew>
 8000f60:	4b06      	ldr	r3, [pc, #24]	@ (8000f7c <MX_FREERTOS_Init+0x28>)
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 8000f62:	4a07      	ldr	r2, [pc, #28]	@ (8000f80 <MX_FREERTOS_Init+0x2c>)
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000f64:	6018      	str	r0, [r3, #0]
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 8000f66:	2100      	movs	r1, #0
 8000f68:	4806      	ldr	r0, [pc, #24]	@ (8000f84 <MX_FREERTOS_Init+0x30>)
 8000f6a:	f002 fe2f 	bl	8003bcc <osThreadNew>
 8000f6e:	4b06      	ldr	r3, [pc, #24]	@ (8000f88 <MX_FREERTOS_Init+0x34>)
 8000f70:	6018      	str	r0, [r3, #0]
}
 8000f72:	bd08      	pop	{r3, pc}
 8000f74:	0800c9b8 	.word	0x0800c9b8
 8000f78:	08000f3d 	.word	0x08000f3d
 8000f7c:	20000234 	.word	0x20000234
 8000f80:	0800c994 	.word	0x0800c994
 8000f84:	0800062f 	.word	0x0800062f
 8000f88:	20000230 	.word	0x20000230

08000f8c <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8000f8c:	b530      	push	{r4, r5, lr}
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8000f8e:	2400      	movs	r4, #0
{
 8000f90:	b08f      	sub	sp, #60	@ 0x3c
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 8000f92:	2510      	movs	r5, #16
 8000f94:	462a      	mov	r2, r5
 8000f96:	4621      	mov	r1, r4
 8000f98:	a80a      	add	r0, sp, #40	@ 0x28
  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8000f9a:	9406      	str	r4, [sp, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 8000f9c:	f00a fadb 	bl	800b556 <memset>

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8000fa0:	481a      	ldr	r0, [pc, #104]	@ (800100c <MX_FSMC_Init+0x80>)
  /* Timing */
  Timing.AddressSetupTime = 9;
  Timing.AddressHoldTime = 15;
  Timing.DataSetupTime = 36;
  Timing.BusTurnAroundDuration = 1;
  Timing.CLKDivision = 16;
 8000fa2:	9504      	str	r5, [sp, #16]
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8000fa4:	f04f 4320 	mov.w	r3, #2684354560	@ 0xa0000000
 8000fa8:	6003      	str	r3, [r0, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000faa:	f503 7382 	add.w	r3, r3, #260	@ 0x104
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8000fae:	e9c0 3401 	strd	r3, r4, [r0, #4]
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8000fb2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8000fb6:	e9c0 340a 	strd	r3, r4, [r0, #40]	@ 0x28
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 8000fba:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000fbe:	e9c0 340c 	strd	r3, r4, [r0, #48]	@ 0x30
  hsram1.Init.WriteFifo = FSMC_WRITE_FIFO_DISABLE;
 8000fc2:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
  Timing.AddressHoldTime = 15;
 8000fc6:	220f      	movs	r2, #15
  Timing.BusTurnAroundDuration = 1;
 8000fc8:	2101      	movs	r1, #1
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8000fca:	e9c0 3410 	strd	r3, r4, [r0, #64]	@ 0x40
  Timing.AddressHoldTime = 15;
 8000fce:	2309      	movs	r3, #9
 8000fd0:	e9cd 3200 	strd	r3, r2, [sp]
  Timing.DataLatency = 17;
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 1;
  ExtTiming.AddressHoldTime = 15;
 8000fd4:	e9cd 1207 	strd	r1, r2, [sp, #28]
  Timing.BusTurnAroundDuration = 1;
 8000fd8:	2324      	movs	r3, #36	@ 0x24
  ExtTiming.DataSetupTime = 7;
 8000fda:	2207      	movs	r2, #7
  Timing.BusTurnAroundDuration = 1;
 8000fdc:	e9cd 3102 	strd	r3, r1, [sp, #8]
  ExtTiming.DataSetupTime = 7;
 8000fe0:	9209      	str	r2, [sp, #36]	@ 0x24
  Timing.DataLatency = 17;
 8000fe2:	2311      	movs	r3, #17
  ExtTiming.BusTurnAroundDuration = 0;
  ExtTiming.CLKDivision = 16;
  ExtTiming.DataLatency = 17;
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 8000fe4:	aa07      	add	r2, sp, #28
 8000fe6:	4669      	mov	r1, sp
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8000fe8:	e9c0 4403 	strd	r4, r4, [r0, #12]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8000fec:	e9c0 5405 	strd	r5, r4, [r0, #20]
  hsram1.Init.ContinuousClock = FSMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8000ff0:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
  ExtTiming.DataLatency = 17;
 8000ff4:	e9cd 530b 	strd	r5, r3, [sp, #44]	@ 0x2c
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8000ff8:	61c4      	str	r4, [r0, #28]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000ffa:	6244      	str	r4, [r0, #36]	@ 0x24
  Timing.DataLatency = 17;
 8000ffc:	9305      	str	r3, [sp, #20]
  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 8000ffe:	f002 fba1 	bl	8003744 <HAL_SRAM_Init>
 8001002:	b108      	cbz	r0, 8001008 <MX_FSMC_Init+0x7c>
  {
    Error_Handler( );
 8001004:	f000 f9b4 	bl	8001370 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8001008:	b00f      	add	sp, #60	@ 0x3c
 800100a:	bd30      	pop	{r4, r5, pc}
 800100c:	2000023c 	.word	0x2000023c

08001010 <HAL_SRAM_MspInit>:
  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8001010:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (FSMC_Initialized) {
 8001012:	4a19      	ldr	r2, [pc, #100]	@ (8001078 <HAL_SRAM_MspInit+0x68>)
 8001014:	6813      	ldr	r3, [r2, #0]
void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8001016:	b087      	sub	sp, #28
  if (FSMC_Initialized) {
 8001018:	bb63      	cbnz	r3, 8001074 <HAL_SRAM_MspInit+0x64>
  FSMC_Initialized = 1;
 800101a:	2401      	movs	r4, #1
  __HAL_RCC_FSMC_CLK_ENABLE();
 800101c:	9300      	str	r3, [sp, #0]
 800101e:	4b17      	ldr	r3, [pc, #92]	@ (800107c <HAL_SRAM_MspInit+0x6c>)
  FSMC_Initialized = 1;
 8001020:	6014      	str	r4, [r2, #0]
  __HAL_RCC_FSMC_CLK_ENABLE();
 8001022:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001024:	4816      	ldr	r0, [pc, #88]	@ (8001080 <HAL_SRAM_MspInit+0x70>)
  __HAL_RCC_FSMC_CLK_ENABLE();
 8001026:	4322      	orrs	r2, r4
 8001028:	639a      	str	r2, [r3, #56]	@ 0x38
 800102a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800102c:	9401      	str	r4, [sp, #4]
  __HAL_RCC_FSMC_CLK_ENABLE();
 800102e:	4023      	ands	r3, r4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001030:	2702      	movs	r7, #2
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001032:	2603      	movs	r6, #3
 8001034:	250c      	movs	r5, #12
  __HAL_RCC_FSMC_CLK_ENABLE();
 8001036:	9300      	str	r3, [sp, #0]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001038:	a901      	add	r1, sp, #4
  __HAL_RCC_FSMC_CLK_ENABLE();
 800103a:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800103c:	e9cd 7402 	strd	r7, r4, [sp, #8]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001040:	e9cd 6504 	strd	r6, r5, [sp, #16]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001044:	f000 fd8a 	bl	8001b5c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001048:	f64f 7380 	movw	r3, #65408	@ 0xff80
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800104c:	480d      	ldr	r0, [pc, #52]	@ (8001084 <HAL_SRAM_MspInit+0x74>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 800104e:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001050:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001052:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001056:	e9cd 4603 	strd	r4, r6, [sp, #12]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800105a:	f000 fd7f 	bl	8001b5c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 800105e:	f24c 73b3 	movw	r3, #51123	@ 0xc7b3
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001062:	4809      	ldr	r0, [pc, #36]	@ (8001088 <HAL_SRAM_MspInit+0x78>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001064:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001066:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001068:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800106c:	e9cd 4603 	strd	r4, r6, [sp, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001070:	f000 fd74 	bl	8001b5c <HAL_GPIO_Init>
  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001074:	b007      	add	sp, #28
 8001076:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001078:	20000238 	.word	0x20000238
 800107c:	40023800 	.word	0x40023800
 8001080:	40021400 	.word	0x40021400
 8001084:	40021000 	.word	0x40021000
 8001088:	40020c00 	.word	0x40020c00

0800108c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800108c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001090:	b08c      	sub	sp, #48	@ 0x30

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001092:	2214      	movs	r2, #20
 8001094:	2100      	movs	r1, #0
 8001096:	a807      	add	r0, sp, #28
 8001098:	f00a fa5d 	bl	800b556 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800109c:	2400      	movs	r4, #0
 800109e:	4b4b      	ldr	r3, [pc, #300]	@ (80011cc <MX_GPIO_Init+0x140>)
 80010a0:	9401      	str	r4, [sp, #4]
 80010a2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOG_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, FRAME_RATE_Pin|MCU_ACTIVE_Pin|VSYNC_FREQ_Pin|RENDER_TIME_Pin, GPIO_PIN_RESET);
 80010a4:	4e4a      	ldr	r6, [pc, #296]	@ (80011d0 <MX_GPIO_Init+0x144>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 80010a6:	f8df 8134 	ldr.w	r8, [pc, #308]	@ 80011dc <MX_GPIO_Init+0x150>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_RESET);
 80010aa:	4f4a      	ldr	r7, [pc, #296]	@ (80011d4 <MX_GPIO_Init+0x148>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80010ac:	f042 0210 	orr.w	r2, r2, #16
 80010b0:	631a      	str	r2, [r3, #48]	@ 0x30
 80010b2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80010b4:	f002 0210 	and.w	r2, r2, #16
 80010b8:	9201      	str	r2, [sp, #4]
 80010ba:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80010bc:	9402      	str	r4, [sp, #8]
 80010be:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80010c0:	f042 0220 	orr.w	r2, r2, #32
 80010c4:	631a      	str	r2, [r3, #48]	@ 0x30
 80010c6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80010c8:	f002 0220 	and.w	r2, r2, #32
 80010cc:	9202      	str	r2, [sp, #8]
 80010ce:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010d0:	9403      	str	r4, [sp, #12]
 80010d2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80010d4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80010d8:	631a      	str	r2, [r3, #48]	@ 0x30
 80010da:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80010dc:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 80010e0:	9203      	str	r2, [sp, #12]
 80010e2:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010e4:	9404      	str	r4, [sp, #16]
 80010e6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80010e8:	f042 0202 	orr.w	r2, r2, #2
 80010ec:	631a      	str	r2, [r3, #48]	@ 0x30
 80010ee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80010f0:	f002 0202 	and.w	r2, r2, #2
 80010f4:	9204      	str	r2, [sp, #16]
 80010f6:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010f8:	9405      	str	r4, [sp, #20]
 80010fa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80010fc:	f042 0208 	orr.w	r2, r2, #8
 8001100:	631a      	str	r2, [r3, #48]	@ 0x30
 8001102:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001104:	f002 0208 	and.w	r2, r2, #8
 8001108:	9205      	str	r2, [sp, #20]
 800110a:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800110c:	9406      	str	r4, [sp, #24]
 800110e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001110:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001114:	631a      	str	r2, [r3, #48]	@ 0x30
 8001116:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001118:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800111c:	9306      	str	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOE, FRAME_RATE_Pin|MCU_ACTIVE_Pin|VSYNC_FREQ_Pin|RENDER_TIME_Pin, GPIO_PIN_RESET);
 800111e:	4622      	mov	r2, r4
 8001120:	4630      	mov	r0, r6
 8001122:	211b      	movs	r1, #27
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001124:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOE, FRAME_RATE_Pin|MCU_ACTIVE_Pin|VSYNC_FREQ_Pin|RENDER_TIME_Pin, GPIO_PIN_RESET);
 8001126:	f000 fdf1 	bl	8001d0c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 800112a:	4622      	mov	r2, r4
 800112c:	4640      	mov	r0, r8
 800112e:	2120      	movs	r1, #32
 8001130:	f000 fdec 	bl	8001d0c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_RESET);
 8001134:	4622      	mov	r2, r4
 8001136:	4638      	mov	r0, r7
 8001138:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800113c:	f000 fde6 	bl	8001d0c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : FRAME_RATE_Pin MCU_ACTIVE_Pin VSYNC_FREQ_Pin RENDER_TIME_Pin */
  GPIO_InitStruct.Pin = FRAME_RATE_Pin|MCU_ACTIVE_Pin|VSYNC_FREQ_Pin|RENDER_TIME_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001140:	2501      	movs	r5, #1
 8001142:	231b      	movs	r3, #27
 8001144:	e9cd 3507 	strd	r3, r5, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001148:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800114a:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800114c:	4630      	mov	r0, r6
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800114e:	930a      	str	r3, [sp, #40]	@ 0x28

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8001150:	2620      	movs	r6, #32
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001152:	9409      	str	r4, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001154:	f000 fd02 	bl	8001b5c <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001158:	a907      	add	r1, sp, #28
 800115a:	4640      	mov	r0, r8
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800115c:	e9cd 6507 	strd	r6, r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001160:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001164:	f000 fcfa 	bl	8001b5c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_RESET_Pin */
  GPIO_InitStruct.Pin = LCD_RESET_Pin;
 8001168:	f44f 6300 	mov.w	r3, #2048	@ 0x800
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800116c:	e9cd 3507 	strd	r3, r5, [sp, #28]

  /*Configure GPIO pin : LCD_TE_Pin */
  GPIO_InitStruct.Pin = LCD_TE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(LCD_TE_GPIO_Port, &GPIO_InitStruct);
 8001170:	4d19      	ldr	r5, [pc, #100]	@ (80011d8 <MX_GPIO_Init+0x14c>)
  HAL_GPIO_Init(LCD_RESET_GPIO_Port, &GPIO_InitStruct);
 8001172:	a907      	add	r1, sp, #28
 8001174:	4638      	mov	r0, r7
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001176:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
  HAL_GPIO_Init(LCD_RESET_GPIO_Port, &GPIO_InitStruct);
 800117a:	f000 fcef 	bl	8001b5c <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800117e:	2210      	movs	r2, #16
 8001180:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
  HAL_GPIO_Init(LCD_TE_GPIO_Port, &GPIO_InitStruct);
 8001184:	a907      	add	r1, sp, #28
 8001186:	4628      	mov	r0, r5
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001188:	e9cd 2307 	strd	r2, r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118c:	9409      	str	r4, [sp, #36]	@ 0x24
  HAL_GPIO_Init(LCD_TE_GPIO_Port, &GPIO_InitStruct);
 800118e:	f000 fce5 	bl	8001b5c <HAL_GPIO_Init>

  /*Configure GPIO pin : TS_INT_Pin */
  GPIO_InitStruct.Pin = TS_INT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001192:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(TS_INT_GPIO_Port, &GPIO_InitStruct);
 8001196:	a907      	add	r1, sp, #28
 8001198:	4628      	mov	r0, r5
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119a:	e9cd 3408 	strd	r3, r4, [sp, #32]
  GPIO_InitStruct.Pin = TS_INT_Pin;
 800119e:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(TS_INT_GPIO_Port, &GPIO_InitStruct);
 80011a0:	f000 fcdc 	bl	8001b5c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 80011a4:	4622      	mov	r2, r4
 80011a6:	2105      	movs	r1, #5
 80011a8:	200a      	movs	r0, #10
 80011aa:	f000 fc71 	bl	8001a90 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80011ae:	200a      	movs	r0, #10
 80011b0:	f000 fca0 	bl	8001af4 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 80011b4:	4622      	mov	r2, r4
 80011b6:	2105      	movs	r1, #5
 80011b8:	2017      	movs	r0, #23
 80011ba:	f000 fc69 	bl	8001a90 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80011be:	2017      	movs	r0, #23
 80011c0:	f000 fc98 	bl	8001af4 <HAL_NVIC_EnableIRQ>

}
 80011c4:	b00c      	add	sp, #48	@ 0x30
 80011c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80011ca:	bf00      	nop
 80011cc:	40023800 	.word	0x40023800
 80011d0:	40021000 	.word	0x40021000
 80011d4:	40020c00 	.word	0x40020c00
 80011d8:	40021800 	.word	0x40021800
 80011dc:	40021400 	.word	0x40021400

080011e0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80011e0:	b508      	push	{r3, lr}
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011e2:	480b      	ldr	r0, [pc, #44]	@ (8001210 <MX_I2C1_Init+0x30>)
  hi2c1.Init.ClockSpeed = 100000;
 80011e4:	4a0b      	ldr	r2, [pc, #44]	@ (8001214 <MX_I2C1_Init+0x34>)
 80011e6:	4b0c      	ldr	r3, [pc, #48]	@ (8001218 <MX_I2C1_Init+0x38>)
 80011e8:	e9c0 2300 	strd	r2, r3, [r0]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011ec:	2300      	movs	r3, #0
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011ee:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
  hi2c1.Init.OwnAddress1 = 0;
 80011f2:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011f6:	e9c0 2304 	strd	r2, r3, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011fa:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011fe:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001200:	f000 fec2 	bl	8001f88 <HAL_I2C_Init>
 8001204:	b118      	cbz	r0, 800120e <MX_I2C1_Init+0x2e>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001206:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800120a:	f000 b8b1 	b.w	8001370 <Error_Handler>
}
 800120e:	bd08      	pop	{r3, pc}
 8001210:	2000028c 	.word	0x2000028c
 8001214:	40005400 	.word	0x40005400
 8001218:	000186a0 	.word	0x000186a0

0800121c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800121c:	b570      	push	{r4, r5, r6, lr}
 800121e:	4604      	mov	r4, r0
 8001220:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001222:	2214      	movs	r2, #20
 8001224:	2100      	movs	r1, #0
 8001226:	a803      	add	r0, sp, #12
 8001228:	f00a f995 	bl	800b556 <memset>
  if(i2cHandle->Instance==I2C1)
 800122c:	6822      	ldr	r2, [r4, #0]
 800122e:	4b18      	ldr	r3, [pc, #96]	@ (8001290 <HAL_I2C_MspInit+0x74>)
 8001230:	429a      	cmp	r2, r3
 8001232:	d12b      	bne.n	800128c <HAL_I2C_MspInit+0x70>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001234:	4c17      	ldr	r4, [pc, #92]	@ (8001294 <HAL_I2C_MspInit+0x78>)
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001236:	4818      	ldr	r0, [pc, #96]	@ (8001298 <HAL_I2C_MspInit+0x7c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001238:	2500      	movs	r5, #0
 800123a:	9501      	str	r5, [sp, #4]
 800123c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800123e:	f043 0302 	orr.w	r3, r3, #2
 8001242:	6323      	str	r3, [r4, #48]	@ 0x30
 8001244:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8001246:	f003 0302 	and.w	r3, r3, #2
 800124a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800124c:	22c0      	movs	r2, #192	@ 0xc0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800124e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001250:	2312      	movs	r3, #18
 8001252:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001256:	2601      	movs	r6, #1
 8001258:	2303      	movs	r3, #3
 800125a:	e9cd 6305 	strd	r6, r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800125e:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001260:	2304      	movs	r3, #4
 8001262:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001264:	f000 fc7a 	bl	8001b5c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001268:	9502      	str	r5, [sp, #8]
 800126a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800126c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001270:	6423      	str	r3, [r4, #64]	@ 0x40
 8001272:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001274:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001278:	9302      	str	r3, [sp, #8]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 1, 0);
 800127a:	201f      	movs	r0, #31
 800127c:	462a      	mov	r2, r5
 800127e:	4631      	mov	r1, r6
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001280:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 1, 0);
 8001282:	f000 fc05 	bl	8001a90 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001286:	201f      	movs	r0, #31
 8001288:	f000 fc34 	bl	8001af4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800128c:	b008      	add	sp, #32
 800128e:	bd70      	pop	{r4, r5, r6, pc}
 8001290:	40005400 	.word	0x40005400
 8001294:	40023800 	.word	0x40023800
 8001298:	40020400 	.word	0x40020400

0800129c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800129c:	b530      	push	{r4, r5, lr}
 800129e:	b095      	sub	sp, #84	@ 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012a0:	2210      	movs	r2, #16
 80012a2:	2100      	movs	r1, #0
 80012a4:	a809      	add	r0, sp, #36	@ 0x24
 80012a6:	f00a f956 	bl	800b556 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012aa:	2214      	movs	r2, #20
 80012ac:	2100      	movs	r1, #0
 80012ae:	a802      	add	r0, sp, #8
 80012b0:	f00a f951 	bl	800b556 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012b4:	2500      	movs	r5, #0
 80012b6:	4b1c      	ldr	r3, [pc, #112]	@ (8001328 <SystemClock_Config+0x8c>)
 80012b8:	9500      	str	r5, [sp, #0]
 80012ba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80012bc:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80012c0:	641a      	str	r2, [r3, #64]	@ 0x40
 80012c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012c8:	9300      	str	r3, [sp, #0]
 80012ca:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012cc:	4b17      	ldr	r3, [pc, #92]	@ (800132c <SystemClock_Config+0x90>)
 80012ce:	9501      	str	r5, [sp, #4]
 80012d0:	681a      	ldr	r2, [r3, #0]
 80012d2:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 80012d6:	601a      	str	r2, [r3, #0]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80012de:	9301      	str	r3, [sp, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012e0:	2201      	movs	r2, #1
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012e2:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012e4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012e8:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012ea:	e9cd 2307 	strd	r2, r3, [sp, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012ee:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80012f2:	e9cd 430d 	strd	r4, r3, [sp, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 200;
 80012f6:	2108      	movs	r1, #8
 80012f8:	23c8      	movs	r3, #200	@ 0xc8
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012fa:	a807      	add	r0, sp, #28
  RCC_OscInitStruct.PLL.PLLN = 200;
 80012fc:	e9cd 130f 	strd	r1, r3, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001300:	e9cd 4411 	strd	r4, r4, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001304:	9413      	str	r4, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001306:	f002 f865 	bl	80033d4 <HAL_RCC_OscConfig>
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800130a:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800130c:	e9cd 3402 	strd	r3, r4, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001310:	2103      	movs	r1, #3
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001312:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001316:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001318:	e9cd 3505 	strd	r3, r5, [sp, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800131c:	9504      	str	r5, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800131e:	f001 ff91 	bl	8003244 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8001322:	b015      	add	sp, #84	@ 0x54
 8001324:	bd30      	pop	{r4, r5, pc}
 8001326:	bf00      	nop
 8001328:	40023800 	.word	0x40023800
 800132c:	40007000 	.word	0x40007000

08001330 <main>:
{
 8001330:	b508      	push	{r3, lr}
  HAL_Init();
 8001332:	f000 fb5b 	bl	80019ec <HAL_Init>
  SystemClock_Config();
 8001336:	f7ff ffb1 	bl	800129c <SystemClock_Config>
  MX_GPIO_Init();
 800133a:	f7ff fea7 	bl	800108c <MX_GPIO_Init>
  MX_CRC_Init();
 800133e:	f7ff fdd5 	bl	8000eec <MX_CRC_Init>
  MX_FSMC_Init();
 8001342:	f7ff fe23 	bl	8000f8c <MX_FSMC_Init>
  MX_I2C1_Init();
 8001346:	f7ff ff4b 	bl	80011e0 <MX_I2C1_Init>
  MX_QUADSPI_Init();
 800134a:	f000 f813 	bl	8001374 <MX_QUADSPI_Init>
  osKernelInitialize();
 800134e:	f002 fc11 	bl	8003b74 <osKernelInitialize>
  MX_FREERTOS_Init();
 8001352:	f7ff fdff 	bl	8000f54 <MX_FREERTOS_Init>
  osKernelStart();
 8001356:	f002 fc1f 	bl	8003b98 <osKernelStart>
  while (1)
 800135a:	e7fe      	b.n	800135a <main+0x2a>

0800135c <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 800135c:	6802      	ldr	r2, [r0, #0]
 800135e:	4b03      	ldr	r3, [pc, #12]	@ (800136c <HAL_TIM_PeriodElapsedCallback+0x10>)
 8001360:	429a      	cmp	r2, r3
 8001362:	d101      	bne.n	8001368 <HAL_TIM_PeriodElapsedCallback+0xc>
  {
    HAL_IncTick();
 8001364:	f000 bb5c 	b.w	8001a20 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	40001000 	.word	0x40001000

08001370 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001370:	4770      	bx	lr
	...

08001374 <MX_QUADSPI_Init>:
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
 8001374:	480d      	ldr	r0, [pc, #52]	@ (80013ac <MX_QUADSPI_Init+0x38>)
  hqspi.Init.ClockPrescaler = 0;
 8001376:	4a0e      	ldr	r2, [pc, #56]	@ (80013b0 <MX_QUADSPI_Init+0x3c>)
{
 8001378:	b508      	push	{r3, lr}
  hqspi.Init.ClockPrescaler = 0;
 800137a:	2300      	movs	r3, #0
 800137c:	e9c0 2300 	strd	r2, r3, [r0]
  hqspi.Init.FifoThreshold = 4;
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8001380:	2104      	movs	r1, #4
 8001382:	2210      	movs	r2, #16
 8001384:	e9c0 1202 	strd	r1, r2, [r0, #8]
  hqspi.Init.FlashSize = 23;
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_5_CYCLE;
 8001388:	f04f 0c17 	mov.w	ip, #23
 800138c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001390:	e9c0 c204 	strd	ip, r2, [r0, #16]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8001394:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8001398:	6203      	str	r3, [r0, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800139a:	f001 fed3 	bl	8003144 <HAL_QSPI_Init>
 800139e:	b118      	cbz	r0, 80013a8 <MX_QUADSPI_Init+0x34>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80013a0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80013a4:	f7ff bfe4 	b.w	8001370 <Error_Handler>
}
 80013a8:	bd08      	pop	{r3, pc}
 80013aa:	bf00      	nop
 80013ac:	200002e0 	.word	0x200002e0
 80013b0:	a0001000 	.word	0xa0001000

080013b4 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 80013b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b8:	2214      	movs	r2, #20
{
 80013ba:	b08a      	sub	sp, #40	@ 0x28
 80013bc:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013be:	2100      	movs	r1, #0
 80013c0:	eb0d 0002 	add.w	r0, sp, r2
 80013c4:	f00a f8c7 	bl	800b556 <memset>
  if(qspiHandle->Instance==QUADSPI)
 80013c8:	6822      	ldr	r2, [r4, #0]
 80013ca:	4b2f      	ldr	r3, [pc, #188]	@ (8001488 <HAL_QSPI_MspInit+0xd4>)
 80013cc:	429a      	cmp	r2, r3
 80013ce:	d157      	bne.n	8001480 <HAL_QSPI_MspInit+0xcc>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80013d0:	4b2e      	ldr	r3, [pc, #184]	@ (800148c <HAL_QSPI_MspInit+0xd8>)
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80013d2:	482f      	ldr	r0, [pc, #188]	@ (8001490 <HAL_QSPI_MspInit+0xdc>)
    __HAL_RCC_QSPI_CLK_ENABLE();
 80013d4:	2400      	movs	r4, #0
 80013d6:	9401      	str	r4, [sp, #4]
 80013d8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80013da:	f042 0202 	orr.w	r2, r2, #2
 80013de:	639a      	str	r2, [r3, #56]	@ 0x38
 80013e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80013e2:	f002 0202 	and.w	r2, r2, #2
 80013e6:	9201      	str	r2, [sp, #4]
 80013e8:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80013ea:	9402      	str	r4, [sp, #8]
 80013ec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80013ee:	f042 0220 	orr.w	r2, r2, #32
 80013f2:	631a      	str	r2, [r3, #48]	@ 0x30
 80013f4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80013f6:	f002 0220 	and.w	r2, r2, #32
 80013fa:	9202      	str	r2, [sp, #8]
 80013fc:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013fe:	9403      	str	r4, [sp, #12]
 8001400:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001402:	f042 0202 	orr.w	r2, r2, #2
 8001406:	631a      	str	r2, [r3, #48]	@ 0x30
 8001408:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800140a:	f002 0202 	and.w	r2, r2, #2
 800140e:	9203      	str	r2, [sp, #12]
 8001410:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001412:	9404      	str	r4, [sp, #16]
 8001414:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001416:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800141a:	631a      	str	r2, [r3, #48]	@ 0x30
 800141c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800141e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001422:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001424:	2602      	movs	r6, #2
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8001426:	2503      	movs	r5, #3
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001428:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 800142a:	f04f 0809 	mov.w	r8, #9
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800142e:	23c0      	movs	r3, #192	@ 0xc0
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001430:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001432:	e9cd 3605 	strd	r3, r6, [sp, #20]

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001436:	270a      	movs	r7, #10
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8001438:	e9cd 5808 	strd	r5, r8, [sp, #32]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800143c:	f000 fb8e 	bl	8001b5c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001440:	f44f 7340 	mov.w	r3, #768	@ 0x300
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001444:	4812      	ldr	r0, [pc, #72]	@ (8001490 <HAL_QSPI_MspInit+0xdc>)
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001446:	9709      	str	r7, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001448:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800144a:	e9cd 3605 	strd	r3, r6, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800144e:	e9cd 4507 	strd	r4, r5, [sp, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001452:	f000 fb83 	bl	8001b5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001456:	2304      	movs	r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001458:	480e      	ldr	r0, [pc, #56]	@ (8001494 <HAL_QSPI_MspInit+0xe0>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 800145a:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800145e:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001460:	e9cd 3605 	strd	r3, r6, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001464:	e9cd 4507 	strd	r4, r5, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001468:	f000 fb78 	bl	8001b5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800146c:	2340      	movs	r3, #64	@ 0x40
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800146e:	480a      	ldr	r0, [pc, #40]	@ (8001498 <HAL_QSPI_MspInit+0xe4>)
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001470:	9709      	str	r7, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001472:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001474:	e9cd 3605 	strd	r3, r6, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001478:	e9cd 4507 	strd	r4, r5, [sp, #28]
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800147c:	f000 fb6e 	bl	8001b5c <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 8001480:	b00a      	add	sp, #40	@ 0x28
 8001482:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001486:	bf00      	nop
 8001488:	a0001000 	.word	0xa0001000
 800148c:	40023800 	.word	0x40023800
 8001490:	40021400 	.word	0x40021400
 8001494:	40020400 	.word	0x40020400
 8001498:	40021800 	.word	0x40021800

0800149c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800149c:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800149e:	4b0e      	ldr	r3, [pc, #56]	@ (80014d8 <HAL_MspInit+0x3c>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	9200      	str	r2, [sp, #0]
 80014a4:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80014a6:	f441 4180 	orr.w	r1, r1, #16384	@ 0x4000
 80014aa:	6459      	str	r1, [r3, #68]	@ 0x44
 80014ac:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80014ae:	f401 4180 	and.w	r1, r1, #16384	@ 0x4000
 80014b2:	9100      	str	r1, [sp, #0]
 80014b4:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014b6:	9201      	str	r2, [sp, #4]
 80014b8:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80014ba:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 80014be:	6419      	str	r1, [r3, #64]	@ 0x40
 80014c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014c6:	9301      	str	r3, [sp, #4]
 80014c8:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80014ca:	210f      	movs	r1, #15
 80014cc:	f06f 0001 	mvn.w	r0, #1

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014d0:	b002      	add	sp, #8
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80014d2:	f000 badd 	b.w	8001a90 <HAL_NVIC_SetPriority>
 80014d6:	bf00      	nop
 80014d8:	40023800 	.word	0x40023800

080014dc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014dc:	b570      	push	{r4, r5, r6, lr}
 80014de:	b088      	sub	sp, #32
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80014e0:	2300      	movs	r3, #0
 80014e2:	9302      	str	r3, [sp, #8]
 80014e4:	4b20      	ldr	r3, [pc, #128]	@ (8001568 <HAL_InitTick+0x8c>)
 80014e6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80014e8:	f042 0210 	orr.w	r2, r2, #16
 80014ec:	641a      	str	r2, [r3, #64]	@ 0x40
 80014ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014f0:	f003 0310 	and.w	r3, r3, #16
 80014f4:	9302      	str	r3, [sp, #8]
{
 80014f6:	4605      	mov	r5, r0

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80014f8:	a901      	add	r1, sp, #4
 80014fa:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM6_CLK_ENABLE();
 80014fc:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80014fe:	f001 ff4b 	bl	8003398 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001502:	9b06      	ldr	r3, [sp, #24]
 8001504:	bb4b      	cbnz	r3, 800155a <HAL_InitTick+0x7e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001506:	f001 ff37 	bl	8003378 <HAL_RCC_GetPCLK1Freq>

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800150a:	4e18      	ldr	r6, [pc, #96]	@ (800156c <HAL_InitTick+0x90>)
 800150c:	4b18      	ldr	r3, [pc, #96]	@ (8001570 <HAL_InitTick+0x94>)
 800150e:	6033      	str	r3, [r6, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001510:	f240 33e7 	movw	r3, #999	@ 0x3e7
 8001514:	60f3      	str	r3, [r6, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001516:	4b17      	ldr	r3, [pc, #92]	@ (8001574 <HAL_InitTick+0x98>)
 8001518:	fbb0 f3f3 	udiv	r3, r0, r3
 800151c:	3b01      	subs	r3, #1
  htim6.Init.Prescaler = uwPrescalerValue;
 800151e:	6073      	str	r3, [r6, #4]
  htim6.Init.ClockDivision = 0;
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;

  status = HAL_TIM_Base_Init(&htim6);
 8001520:	4630      	mov	r0, r6
  htim6.Init.ClockDivision = 0;
 8001522:	2300      	movs	r3, #0
 8001524:	6133      	str	r3, [r6, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001526:	60b3      	str	r3, [r6, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001528:	61b3      	str	r3, [r6, #24]
  status = HAL_TIM_Base_Init(&htim6);
 800152a:	f002 fa5f 	bl	80039ec <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 800152e:	4604      	mov	r4, r0
 8001530:	b980      	cbnz	r0, 8001554 <HAL_InitTick+0x78>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001532:	4630      	mov	r0, r6
 8001534:	f002 f934 	bl	80037a0 <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 8001538:	4604      	mov	r4, r0
 800153a:	b958      	cbnz	r0, 8001554 <HAL_InitTick+0x78>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_IRQn);
 800153c:	2036      	movs	r0, #54	@ 0x36
 800153e:	f000 fad9 	bl	8001af4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001542:	2d0f      	cmp	r5, #15
 8001544:	d80d      	bhi.n	8001562 <HAL_InitTick+0x86>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority, 0U);
 8001546:	4622      	mov	r2, r4
 8001548:	4629      	mov	r1, r5
 800154a:	2036      	movs	r0, #54	@ 0x36
 800154c:	f000 faa0 	bl	8001a90 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001550:	4b09      	ldr	r3, [pc, #36]	@ (8001578 <HAL_InitTick+0x9c>)
 8001552:	601d      	str	r5, [r3, #0]
    }
  }

 /* Return function status */
  return status;
}
 8001554:	4620      	mov	r0, r4
 8001556:	b008      	add	sp, #32
 8001558:	bd70      	pop	{r4, r5, r6, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800155a:	f001 ff0d 	bl	8003378 <HAL_RCC_GetPCLK1Freq>
 800155e:	0040      	lsls	r0, r0, #1
 8001560:	e7d3      	b.n	800150a <HAL_InitTick+0x2e>
        status = HAL_ERROR;
 8001562:	2401      	movs	r4, #1
 8001564:	e7f6      	b.n	8001554 <HAL_InitTick+0x78>
 8001566:	bf00      	nop
 8001568:	40023800 	.word	0x40023800
 800156c:	2000032c 	.word	0x2000032c
 8001570:	40001000 	.word	0x40001000
 8001574:	000f4240 	.word	0x000f4240
 8001578:	2000000c 	.word	0x2000000c

0800157c <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800157c:	4770      	bx	lr

0800157e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800157e:	e7fe      	b.n	800157e <HardFault_Handler>

08001580 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001580:	e7fe      	b.n	8001580 <MemManage_Handler>

08001582 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001582:	e7fe      	b.n	8001582 <BusFault_Handler>

08001584 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001584:	e7fe      	b.n	8001584 <UsageFault_Handler>

08001586 <DebugMon_Handler>:
}

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 8001586:	4770      	bx	lr

08001588 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LCD_TE_Pin);
 8001588:	2010      	movs	r0, #16
 800158a:	f000 bbcd 	b.w	8001d28 <HAL_GPIO_EXTI_IRQHandler>

0800158e <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TS_INT_Pin);
 800158e:	2020      	movs	r0, #32
 8001590:	f000 bbca 	b.w	8001d28 <HAL_GPIO_EXTI_IRQHandler>

08001594 <I2C1_EV_IRQHandler>:
void I2C1_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001594:	4801      	ldr	r0, [pc, #4]	@ (800159c <I2C1_EV_IRQHandler+0x8>)
 8001596:	f001 b95d 	b.w	8002854 <HAL_I2C_EV_IRQHandler>
 800159a:	bf00      	nop
 800159c:	2000028c 	.word	0x2000028c

080015a0 <TIM6_IRQHandler>:
void TIM6_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80015a0:	4801      	ldr	r0, [pc, #4]	@ (80015a8 <TIM6_IRQHandler+0x8>)
 80015a2:	f002 b93b 	b.w	800381c <HAL_TIM_IRQHandler>
 80015a6:	bf00      	nop
 80015a8:	2000032c 	.word	0x2000032c

080015ac <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 80015ac:	2001      	movs	r0, #1
 80015ae:	4770      	bx	lr

080015b0 <_kill>:

int _kill(int pid, int sig)
{
 80015b0:	b508      	push	{r3, lr}
	errno = EINVAL;
 80015b2:	f00a f873 	bl	800b69c <__errno>
 80015b6:	2316      	movs	r3, #22
 80015b8:	6003      	str	r3, [r0, #0]
	return -1;
}
 80015ba:	f04f 30ff 	mov.w	r0, #4294967295
 80015be:	bd08      	pop	{r3, pc}

080015c0 <_exit>:

void _exit (int status)
{
 80015c0:	b508      	push	{r3, lr}
	errno = EINVAL;
 80015c2:	f00a f86b 	bl	800b69c <__errno>
 80015c6:	2316      	movs	r3, #22
 80015c8:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 80015ca:	e7fe      	b.n	80015ca <_exit+0xa>

080015cc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015cc:	b570      	push	{r4, r5, r6, lr}
 80015ce:	460d      	mov	r5, r1
 80015d0:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015d2:	460e      	mov	r6, r1
 80015d4:	1b73      	subs	r3, r6, r5
 80015d6:	429c      	cmp	r4, r3
 80015d8:	dc01      	bgt.n	80015de <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 80015da:	4620      	mov	r0, r4
 80015dc:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 80015de:	f3af 8000 	nop.w
 80015e2:	f806 0b01 	strb.w	r0, [r6], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015e6:	e7f5      	b.n	80015d4 <_read+0x8>

080015e8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80015e8:	b570      	push	{r4, r5, r6, lr}
 80015ea:	460d      	mov	r5, r1
 80015ec:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015ee:	460e      	mov	r6, r1
 80015f0:	1b73      	subs	r3, r6, r5
 80015f2:	429c      	cmp	r4, r3
 80015f4:	dc01      	bgt.n	80015fa <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 80015f6:	4620      	mov	r0, r4
 80015f8:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 80015fa:	f816 0b01 	ldrb.w	r0, [r6], #1
 80015fe:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001602:	e7f5      	b.n	80015f0 <_write+0x8>

08001604 <_close>:

int _close(int file)
{
	return -1;
}
 8001604:	f04f 30ff 	mov.w	r0, #4294967295
 8001608:	4770      	bx	lr

0800160a <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 800160a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800160e:	604b      	str	r3, [r1, #4]
	return 0;
}
 8001610:	2000      	movs	r0, #0
 8001612:	4770      	bx	lr

08001614 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8001614:	2001      	movs	r0, #1
 8001616:	4770      	bx	lr

08001618 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8001618:	2000      	movs	r0, #0
 800161a:	4770      	bx	lr

0800161c <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800161c:	4a0a      	ldr	r2, [pc, #40]	@ (8001648 <_sbrk+0x2c>)
 800161e:	6811      	ldr	r1, [r2, #0]
{
 8001620:	b508      	push	{r3, lr}
 8001622:	4603      	mov	r3, r0
	if (heap_end == 0)
 8001624:	b909      	cbnz	r1, 800162a <_sbrk+0xe>
		heap_end = &end;
 8001626:	4909      	ldr	r1, [pc, #36]	@ (800164c <_sbrk+0x30>)
 8001628:	6011      	str	r1, [r2, #0]

	prev_heap_end = heap_end;
 800162a:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 800162c:	4669      	mov	r1, sp
 800162e:	4403      	add	r3, r0
 8001630:	428b      	cmp	r3, r1
 8001632:	d906      	bls.n	8001642 <_sbrk+0x26>
	{
		errno = ENOMEM;
 8001634:	f00a f832 	bl	800b69c <__errno>
 8001638:	230c      	movs	r3, #12
 800163a:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 800163c:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 8001640:	bd08      	pop	{r3, pc}
	heap_end += incr;
 8001642:	6013      	str	r3, [r2, #0]
	return (caddr_t) prev_heap_end;
 8001644:	e7fc      	b.n	8001640 <_sbrk+0x24>
 8001646:	bf00      	nop
 8001648:	20000374 	.word	0x20000374
 800164c:	200094b0 	.word	0x200094b0

08001650 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 8001650:	b513      	push	{r0, r1, r4, lr}
 8001652:	2400      	movs	r4, #0
    {
        if (unicode == 0)
 8001654:	b151      	cbz	r1, 800166c <_ZNK8touchgfx4Font8getGlyphEt+0x1c>
        {
            return 0;
        }
        const uint8_t* dummyPixelDataPointer = 0;
        uint8_t bitsPerPixelDummy = 0;
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8001656:	6803      	ldr	r3, [r0, #0]
        const uint8_t* dummyPixelDataPointer = 0;
 8001658:	9401      	str	r4, [sp, #4]
        uint8_t bitsPerPixelDummy = 0;
 800165a:	f88d 4003 	strb.w	r4, [sp, #3]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 800165e:	aa01      	add	r2, sp, #4
 8001660:	689c      	ldr	r4, [r3, #8]
 8001662:	f10d 0303 	add.w	r3, sp, #3
 8001666:	47a0      	blx	r4
        return glyph;
    }
 8001668:	b002      	add	sp, #8
 800166a:	bd10      	pop	{r4, pc}
            return 0;
 800166c:	4608      	mov	r0, r1
 800166e:	e7fb      	b.n	8001668 <_ZNK8touchgfx4Font8getGlyphEt+0x18>

08001670 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
    {
        return fallbackCharacter;
    }
 8001670:	89c0      	ldrh	r0, [r0, #14]
 8001672:	4770      	bx	lr

08001674 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
    {
        return ellipsisCharacter;
    }
 8001674:	8a00      	ldrh	r0, [r0, #16]
 8001676:	4770      	bx	lr

08001678 <_ZNK8touchgfx4Font11getBaselineEv>:
     *       getHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getBaseline() const
    {
        return baselineHeight;
    }
 8001678:	88c0      	ldrh	r0, [r0, #6]
 800167a:	4770      	bx	lr

0800167c <_ZNK8touchgfx4Font9getHeightEv>:
     * @return The font height.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getHeight() const
    {
        return fontHeight;
    }
 800167c:	8880      	ldrh	r0, [r0, #4]
 800167e:	4770      	bx	lr

08001680 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
    {
        return bPerPixel;
 8001680:	7a80      	ldrb	r0, [r0, #10]
    }
 8001682:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 8001686:	4770      	bx	lr

08001688 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
    {
        return bAlignRow;
 8001688:	7a80      	ldrb	r0, [r0, #10]
    }
 800168a:	09c0      	lsrs	r0, r0, #7
 800168c:	4770      	bx	lr

0800168e <_ZNK8touchgfx4Font17isVectorBasedFontEv>:
     * @return True if this Font is vector based.
     */
    virtual bool isVectorBasedFont() const
    {
        return false;
    }
 800168e:	2000      	movs	r0, #0
 8001690:	4770      	bx	lr
	...

08001694 <_ZNK8touchgfx4Font14getScaleFactorEv>:
     * @return The scale factor
     */
    virtual float getScaleFactor() const
    {
        return 0;
    }
 8001694:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800169c <_ZNK8touchgfx4Font14getScaleFactorEv+0x8>
 8001698:	4770      	bx	lr
 800169a:	bf00      	nop
 800169c:	00000000 	.word	0x00000000

080016a0 <_ZN8touchgfx3HAL3lcdEv>:
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 80016a0:	4b04      	ldr	r3, [pc, #16]	@ (80016b4 <_ZN8touchgfx3HAL3lcdEv+0x14>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 80016a8:	b10a      	cbz	r2, 80016ae <_ZN8touchgfx3HAL3lcdEv+0xe>
 80016aa:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80016ac:	b900      	cbnz	r0, 80016b0 <_ZN8touchgfx3HAL3lcdEv+0x10>
        return instance->lcdRef;
 80016ae:	6898      	ldr	r0, [r3, #8]
    }
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop
 80016b4:	20009178 	.word	0x20009178

080016b8 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
    {
        return gsubTable;
    }
 80016b8:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 80016ba:	4770      	bx	lr

080016bc <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return arabicTable;
    }
 80016bc:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 80016be:	4770      	bx	lr

080016c0 <_ZN8touchgfx13GeneratedFontD1Ev>:
class GeneratedFont : public ConstFont
 80016c0:	4770      	bx	lr

080016c2 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:
    volatile const uint16_t* dataOffset = (const uint16_t*)((const uint8_t*)glyph + offsetof(GlyphNode, dataOffset));
    uint32_t offset = dataOffset[0];
    offset |= dataOffset[1] << 16;

    const uint8_t* const* table = (const uint8_t* const*)glyphData;
    const uint8_t* pixels = table[glyph->unicode / 2048];
 80016c2:	888a      	ldrh	r2, [r1, #4]
    uint32_t offset = dataOffset[0];
 80016c4:	880b      	ldrh	r3, [r1, #0]
{
 80016c6:	b510      	push	{r4, lr}
    const uint8_t* pixels = table[glyph->unicode / 2048];
 80016c8:	0ad2      	lsrs	r2, r2, #11
    offset |= dataOffset[1] << 16;
 80016ca:	884c      	ldrh	r4, [r1, #2]
    const uint8_t* pixels = table[glyph->unicode / 2048];
 80016cc:	69c1      	ldr	r1, [r0, #28]
    uint32_t offset = dataOffset[0];
 80016ce:	b29b      	uxth	r3, r3
    return pixels + offset;
 80016d0:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
    offset |= dataOffset[1] << 16;
 80016d4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
}
 80016d8:	4418      	add	r0, r3
 80016da:	bd10      	pop	{r4, pc}

080016dc <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 80016dc:	b510      	push	{r4, lr}
 80016de:	4604      	mov	r4, r0
    if (!glyph || glyph->kerningTableSize == 0)
 80016e0:	b1ba      	cbz	r2, 8001712 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
 80016e2:	7b10      	ldrb	r0, [r2, #12]
 80016e4:	b168      	cbz	r0, 8001702 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 80016e6:	7b53      	ldrb	r3, [r2, #13]
 80016e8:	7ad2      	ldrb	r2, [r2, #11]
 80016ea:	021b      	lsls	r3, r3, #8
 80016ec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
    {
        return 0;
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 80016f0:	431a      	orrs	r2, r3
 80016f2:	6a23      	ldr	r3, [r4, #32]
 80016f4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
    {
        if (prevChar == kerndata->unicodePrevChar)
 80016f8:	881a      	ldrh	r2, [r3, #0]
 80016fa:	428a      	cmp	r2, r1
 80016fc:	d102      	bne.n	8001704 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x28>
        {
            return kerndata->distance;
 80016fe:	f993 0002 	ldrsb.w	r0, [r3, #2]
        {
            break;
        }
    }
    return 0;
}
 8001702:	bd10      	pop	{r4, pc}
        if (prevChar < kerndata->unicodePrevChar)
 8001704:	d805      	bhi.n	8001712 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8001706:	3801      	subs	r0, #1
 8001708:	b280      	uxth	r0, r0
 800170a:	3304      	adds	r3, #4
 800170c:	2800      	cmp	r0, #0
 800170e:	d1f3      	bne.n	80016f8 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 8001710:	e7f7      	b.n	8001702 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>
        return 0;
 8001712:	2000      	movs	r0, #0
 8001714:	e7f5      	b.n	8001702 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>

08001716 <_ZN8touchgfx13GeneratedFontD0Ev>:
 8001716:	b510      	push	{r4, lr}
 8001718:	212c      	movs	r1, #44	@ 0x2c
 800171a:	4604      	mov	r4, r0
 800171c:	f009 fcf4 	bl	800b108 <_ZdlPvj>
 8001720:	4620      	mov	r0, r4
 8001722:	bd10      	pop	{r4, pc}

08001724 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 8001724:	b530      	push	{r4, r5, lr}
 8001726:	b08b      	sub	sp, #44	@ 0x2c
 8001728:	4604      	mov	r4, r0
      arabicTable(formsTable)
 800172a:	f8bd 5060 	ldrh.w	r5, [sp, #96]	@ 0x60
 800172e:	9508      	str	r5, [sp, #32]
 8001730:	f8bd 505c 	ldrh.w	r5, [sp, #92]	@ 0x5c
 8001734:	9507      	str	r5, [sp, #28]
 8001736:	f89d 5050 	ldrb.w	r5, [sp, #80]	@ 0x50
 800173a:	9506      	str	r5, [sp, #24]
 800173c:	f89d 504c 	ldrb.w	r5, [sp, #76]	@ 0x4c
 8001740:	9505      	str	r5, [sp, #20]
 8001742:	f89d 5048 	ldrb.w	r5, [sp, #72]	@ 0x48
 8001746:	9504      	str	r5, [sp, #16]
 8001748:	f89d 5044 	ldrb.w	r5, [sp, #68]	@ 0x44
 800174c:	9503      	str	r5, [sp, #12]
 800174e:	f89d 5040 	ldrb.w	r5, [sp, #64]	@ 0x40
 8001752:	9502      	str	r5, [sp, #8]
 8001754:	f89d 503c 	ldrb.w	r5, [sp, #60]	@ 0x3c
 8001758:	9501      	str	r5, [sp, #4]
 800175a:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 800175e:	9500      	str	r5, [sp, #0]
 8001760:	f006 faaa 	bl	8007cb8 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>
 8001764:	4b06      	ldr	r3, [pc, #24]	@ (8001780 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x5c>)
 8001766:	6023      	str	r3, [r4, #0]
      glyphData(glyphDataInternalFlash),
 8001768:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800176a:	61e3      	str	r3, [r4, #28]
      kerningData(kerningList),
 800176c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800176e:	6223      	str	r3, [r4, #32]
      gsubTable(gsubData),
 8001770:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8001772:	6263      	str	r3, [r4, #36]	@ 0x24
      arabicTable(formsTable)
 8001774:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8001776:	62a3      	str	r3, [r4, #40]	@ 0x28
}
 8001778:	4620      	mov	r0, r4
 800177a:	b00b      	add	sp, #44	@ 0x2c
 800177c:	bd30      	pop	{r4, r5, pc}
 800177e:	bf00      	nop
 8001780:	0800c9e4 	.word	0x0800c9e4

08001784 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8001784:	4770      	bx	lr
	...

08001788 <_Z23getFont_verdana_10_4bppv>:
{
 8001788:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 800178a:	4d16      	ldr	r5, [pc, #88]	@ (80017e4 <_Z23getFont_verdana_10_4bppv+0x5c>)
 800178c:	682c      	ldr	r4, [r5, #0]
 800178e:	f014 0401 	ands.w	r4, r4, #1
{
 8001792:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8001794:	f3bf 8f5b 	dmb	ish
 8001798:	d120      	bne.n	80017dc <_Z23getFont_verdana_10_4bppv+0x54>
 800179a:	4628      	mov	r0, r5
 800179c:	f009 fcb6 	bl	800b10c <__cxa_guard_acquire>
 80017a0:	b1e0      	cbz	r0, 80017dc <_Z23getFont_verdana_10_4bppv+0x54>
 80017a2:	233f      	movs	r3, #63	@ 0x3f
 80017a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80017a6:	4b10      	ldr	r3, [pc, #64]	@ (80017e8 <_Z23getFont_verdana_10_4bppv+0x60>)
 80017a8:	9308      	str	r3, [sp, #32]
 80017aa:	4b10      	ldr	r3, [pc, #64]	@ (80017ec <_Z23getFont_verdana_10_4bppv+0x64>)
 80017ac:	4910      	ldr	r1, [pc, #64]	@ (80017f0 <_Z23getFont_verdana_10_4bppv+0x68>)
 80017ae:	4811      	ldr	r0, [pc, #68]	@ (80017f4 <_Z23getFont_verdana_10_4bppv+0x6c>)
 80017b0:	940a      	str	r4, [sp, #40]	@ 0x28
 80017b2:	2201      	movs	r2, #1
 80017b4:	e9cd 4306 	strd	r4, r3, [sp, #24]
 80017b8:	2304      	movs	r3, #4
 80017ba:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80017be:	230a      	movs	r3, #10
 80017c0:	9300      	str	r3, [sp, #0]
 80017c2:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 80017c6:	e9cd 4401 	strd	r4, r4, [sp, #4]
 80017ca:	9405      	str	r4, [sp, #20]
 80017cc:	f7ff ffaa 	bl	8001724 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80017d0:	4809      	ldr	r0, [pc, #36]	@ (80017f8 <_Z23getFont_verdana_10_4bppv+0x70>)
 80017d2:	f009 fce5 	bl	800b1a0 <atexit>
 80017d6:	4628      	mov	r0, r5
 80017d8:	f009 fca4 	bl	800b124 <__cxa_guard_release>
    return verdana_10_4bpp;
}
 80017dc:	4805      	ldr	r0, [pc, #20]	@ (80017f4 <_Z23getFont_verdana_10_4bppv+0x6c>)
 80017de:	b00f      	add	sp, #60	@ 0x3c
 80017e0:	bd30      	pop	{r4, r5, pc}
 80017e2:	bf00      	nop
 80017e4:	20000378 	.word	0x20000378
 80017e8:	0800cd34 	.word	0x0800cd34
 80017ec:	0800cd40 	.word	0x0800cd40
 80017f0:	0800cd04 	.word	0x0800cd04
 80017f4:	2000037c 	.word	0x2000037c
 80017f8:	08001785 	.word	0x08001785

080017fc <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 80017fc:	4770      	bx	lr
	...

08001800 <_Z23getFont_verdana_20_4bppv>:
{
 8001800:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8001802:	4d16      	ldr	r5, [pc, #88]	@ (800185c <_Z23getFont_verdana_20_4bppv+0x5c>)
 8001804:	682c      	ldr	r4, [r5, #0]
 8001806:	f014 0401 	ands.w	r4, r4, #1
{
 800180a:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 800180c:	f3bf 8f5b 	dmb	ish
 8001810:	d120      	bne.n	8001854 <_Z23getFont_verdana_20_4bppv+0x54>
 8001812:	4628      	mov	r0, r5
 8001814:	f009 fc7a 	bl	800b10c <__cxa_guard_acquire>
 8001818:	b1e0      	cbz	r0, 8001854 <_Z23getFont_verdana_20_4bppv+0x54>
 800181a:	233f      	movs	r3, #63	@ 0x3f
 800181c:	9309      	str	r3, [sp, #36]	@ 0x24
 800181e:	4b10      	ldr	r3, [pc, #64]	@ (8001860 <_Z23getFont_verdana_20_4bppv+0x60>)
 8001820:	9308      	str	r3, [sp, #32]
 8001822:	4b10      	ldr	r3, [pc, #64]	@ (8001864 <_Z23getFont_verdana_20_4bppv+0x64>)
 8001824:	4910      	ldr	r1, [pc, #64]	@ (8001868 <_Z23getFont_verdana_20_4bppv+0x68>)
 8001826:	4811      	ldr	r0, [pc, #68]	@ (800186c <_Z23getFont_verdana_20_4bppv+0x6c>)
 8001828:	940a      	str	r4, [sp, #40]	@ 0x28
 800182a:	2201      	movs	r2, #1
 800182c:	e9cd 4306 	strd	r4, r3, [sp, #24]
 8001830:	2304      	movs	r3, #4
 8001832:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8001836:	2314      	movs	r3, #20
 8001838:	9300      	str	r3, [sp, #0]
 800183a:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 800183e:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8001842:	9405      	str	r4, [sp, #20]
 8001844:	f7ff ff6e 	bl	8001724 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8001848:	4809      	ldr	r0, [pc, #36]	@ (8001870 <_Z23getFont_verdana_20_4bppv+0x70>)
 800184a:	f009 fca9 	bl	800b1a0 <atexit>
 800184e:	4628      	mov	r0, r5
 8001850:	f009 fc68 	bl	800b124 <__cxa_guard_release>
    return verdana_20_4bpp;
}
 8001854:	4805      	ldr	r0, [pc, #20]	@ (800186c <_Z23getFont_verdana_20_4bppv+0x6c>)
 8001856:	b00f      	add	sp, #60	@ 0x3c
 8001858:	bd30      	pop	{r4, r5, pc}
 800185a:	bf00      	nop
 800185c:	200003a8 	.word	0x200003a8
 8001860:	0800cd38 	.word	0x0800cd38
 8001864:	0800cd44 	.word	0x0800cd44
 8001868:	0800cd14 	.word	0x0800cd14
 800186c:	200003ac 	.word	0x200003ac
 8001870:	080017fd 	.word	0x080017fd

08001874 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8001874:	4770      	bx	lr
	...

08001878 <_Z23getFont_verdana_40_4bppv>:
{
 8001878:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 800187a:	4d16      	ldr	r5, [pc, #88]	@ (80018d4 <_Z23getFont_verdana_40_4bppv+0x5c>)
 800187c:	682c      	ldr	r4, [r5, #0]
 800187e:	f014 0401 	ands.w	r4, r4, #1
{
 8001882:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8001884:	f3bf 8f5b 	dmb	ish
 8001888:	d120      	bne.n	80018cc <_Z23getFont_verdana_40_4bppv+0x54>
 800188a:	4628      	mov	r0, r5
 800188c:	f009 fc3e 	bl	800b10c <__cxa_guard_acquire>
 8001890:	b1e0      	cbz	r0, 80018cc <_Z23getFont_verdana_40_4bppv+0x54>
 8001892:	233f      	movs	r3, #63	@ 0x3f
 8001894:	9309      	str	r3, [sp, #36]	@ 0x24
 8001896:	4b10      	ldr	r3, [pc, #64]	@ (80018d8 <_Z23getFont_verdana_40_4bppv+0x60>)
 8001898:	9308      	str	r3, [sp, #32]
 800189a:	4b10      	ldr	r3, [pc, #64]	@ (80018dc <_Z23getFont_verdana_40_4bppv+0x64>)
 800189c:	4910      	ldr	r1, [pc, #64]	@ (80018e0 <_Z23getFont_verdana_40_4bppv+0x68>)
 800189e:	4811      	ldr	r0, [pc, #68]	@ (80018e4 <_Z23getFont_verdana_40_4bppv+0x6c>)
 80018a0:	940a      	str	r4, [sp, #40]	@ 0x28
 80018a2:	2201      	movs	r2, #1
 80018a4:	e9cd 4306 	strd	r4, r3, [sp, #24]
 80018a8:	2304      	movs	r3, #4
 80018aa:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80018ae:	2328      	movs	r3, #40	@ 0x28
 80018b0:	9300      	str	r3, [sp, #0]
 80018b2:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 80018b6:	e9cd 4401 	strd	r4, r4, [sp, #4]
 80018ba:	9405      	str	r4, [sp, #20]
 80018bc:	f7ff ff32 	bl	8001724 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80018c0:	4809      	ldr	r0, [pc, #36]	@ (80018e8 <_Z23getFont_verdana_40_4bppv+0x70>)
 80018c2:	f009 fc6d 	bl	800b1a0 <atexit>
 80018c6:	4628      	mov	r0, r5
 80018c8:	f009 fc2c 	bl	800b124 <__cxa_guard_release>
    return verdana_40_4bpp;
}
 80018cc:	4805      	ldr	r0, [pc, #20]	@ (80018e4 <_Z23getFont_verdana_40_4bppv+0x6c>)
 80018ce:	b00f      	add	sp, #60	@ 0x3c
 80018d0:	bd30      	pop	{r4, r5, pc}
 80018d2:	bf00      	nop
 80018d4:	200003d8 	.word	0x200003d8
 80018d8:	0800cd3c 	.word	0x0800cd3c
 80018dc:	0800cd48 	.word	0x0800cd48
 80018e0:	0800cd24 	.word	0x0800cd24
 80018e4:	200003dc 	.word	0x200003dc
 80018e8:	08001875 	.word	0x08001875

080018ec <_ZNK8touchgfx4Font12getGSUBTableEv>:
    }
 80018ec:	2000      	movs	r0, #0
 80018ee:	4770      	bx	lr

080018f0 <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
    }
 80018f0:	2000      	movs	r0, #0
 80018f2:	4770      	bx	lr

080018f4 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 80018f4:	b40e      	push	{r1, r2, r3}
 80018f6:	b503      	push	{r0, r1, lr}
 80018f8:	ab03      	add	r3, sp, #12
    va_list pArg;
    va_start(pArg, text);
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 80018fa:	2100      	movs	r1, #0
{
 80018fc:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(pArg, text);
 8001900:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8001902:	f006 f8af 	bl	8007a64 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 8001906:	b002      	add	sp, #8
 8001908:	f85d eb04 	ldr.w	lr, [sp], #4
 800190c:	b003      	add	sp, #12
 800190e:	4770      	bx	lr

08001910 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8001910:	b40c      	push	{r2, r3}
 8001912:	b507      	push	{r0, r1, r2, lr}
 8001914:	ab04      	add	r3, sp, #16
 8001916:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list pArg;
    va_start(pArg, text);
 800191a:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 800191c:	f006 f8a2 	bl	8007a64 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 8001920:	b003      	add	sp, #12
 8001922:	f85d eb04 	ldr.w	lr, [sp], #4
 8001926:	b002      	add	sp, #8
 8001928:	4770      	bx	lr
	...

0800192c <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
    if (fontGsubTable && nextCharacters.peekChar())
 800192c:	6c43      	ldr	r3, [r0, #68]	@ 0x44
{
 800192e:	b510      	push	{r4, lr}
 8001930:	4604      	mov	r4, r0
    if (fontGsubTable && nextCharacters.peekChar())
 8001932:	b373      	cbz	r3, 8001992 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
            return used == size;
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 8001934:	8f03      	ldrh	r3, [r0, #56]	@ 0x38
 8001936:	b92b      	cbnz	r3, 8001944 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x18>
 8001938:	4b18      	ldr	r3, [pc, #96]	@ (800199c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x70>)
 800193a:	4a19      	ldr	r2, [pc, #100]	@ (80019a0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x74>)
 800193c:	21c5      	movs	r1, #197	@ 0xc5
            return buffer[pos];
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 800193e:	4819      	ldr	r0, [pc, #100]	@ (80019a4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x78>)
 8001940:	f009 fc10 	bl	800b164 <__assert_func>
            return buffer[pos];
 8001944:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 8001946:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800194a:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 800194c:	b30b      	cbz	r3, 8001992 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
    {
        substituteGlyphs();
 800194e:	f006 ff50 	bl	80087f2 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
            assert(offset < used);
 8001952:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 8001954:	2b01      	cmp	r3, #1
 8001956:	d803      	bhi.n	8001960 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x34>
 8001958:	4b13      	ldr	r3, [pc, #76]	@ (80019a8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x7c>)
 800195a:	4a14      	ldr	r2, [pc, #80]	@ (80019ac <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x80>)
 800195c:	21cb      	movs	r1, #203	@ 0xcb
 800195e:	e7ee      	b.n	800193e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x12>
            const uint16_t index = pos + offset;
 8001960:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 8001962:	1c53      	adds	r3, r2, #1
 8001964:	b29b      	uxth	r3, r3
            return buffer[index < size ? index : index - size];
 8001966:	2b09      	cmp	r3, #9
 8001968:	4619      	mov	r1, r3
 800196a:	bf88      	it	hi
 800196c:	f1a3 010a 	subhi.w	r1, r3, #10
 8001970:	eb04 0141 	add.w	r1, r4, r1, lsl #1
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 8001974:	f640 103f 	movw	r0, #2367	@ 0x93f
 8001978:	8c49      	ldrh	r1, [r1, #34]	@ 0x22
 800197a:	4281      	cmp	r1, r0
 800197c:	d109      	bne.n	8001992 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>

        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
            const uint16_t index = pos + 1;
            buffer[index < size ? index : 0] = newChar;
 800197e:	2b0a      	cmp	r3, #10
 8001980:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 8001984:	bf28      	it	cs
 8001986:	2300      	movcs	r3, #0
 8001988:	eb04 0343 	add.w	r3, r4, r3, lsl #1
            return buffer[pos];
 800198c:	8c50      	ldrh	r0, [r2, #34]	@ 0x22
            buffer[index < size ? index : 0] = newChar;
 800198e:	8458      	strh	r0, [r3, #34]	@ 0x22
            buffer[pos] = newChar;
 8001990:	8451      	strh	r1, [r2, #34]	@ 0x22
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
            nextCharacters.replaceAt0(0x093F);
        }
    }
    return getNextChar();
 8001992:	4620      	mov	r0, r4
}
 8001994:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return getNextChar();
 8001998:	f006 be2e 	b.w	80085f8 <_ZN8touchgfx12TextProvider11getNextCharEv>
 800199c:	0800c5f9 	.word	0x0800c5f9
 80019a0:	0800c602 	.word	0x0800c602
 80019a4:	0800c6ad 	.word	0x0800c6ad
 80019a8:	0800c6f7 	.word	0x0800c6f7
 80019ac:	0800c705 	.word	0x0800c705

080019b0 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
    fillInputBuffer();
 80019b0:	f006 bde9 	b.w	8008586 <_ZN8touchgfx12TextProvider15fillInputBufferEv>

080019b4 <_GLOBAL__sub_I_touchgfx_fonts>:
    case 2:
        touchgfx_fonts[2] = &(getFont_verdana_10_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 80019b4:	b510      	push	{r4, lr}
    &(getFont_verdana_20_4bpp()),
 80019b6:	f7ff ff23 	bl	8001800 <_Z23getFont_verdana_20_4bppv>
};
 80019ba:	4c04      	ldr	r4, [pc, #16]	@ (80019cc <_GLOBAL__sub_I_touchgfx_fonts+0x18>)
 80019bc:	6020      	str	r0, [r4, #0]
    &(getFont_verdana_40_4bpp()),
 80019be:	f7ff ff5b 	bl	8001878 <_Z23getFont_verdana_40_4bppv>
};
 80019c2:	6060      	str	r0, [r4, #4]
    &(getFont_verdana_10_4bpp())
 80019c4:	f7ff fee0 	bl	8001788 <_Z23getFont_verdana_10_4bppv>
};
 80019c8:	60a0      	str	r0, [r4, #8]
} // namespace TypedTextDatabase
 80019ca:	bd10      	pop	{r4, pc}
 80019cc:	20000408 	.word	0x20000408

080019d0 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019d0:	4b05      	ldr	r3, [pc, #20]	@ (80019e8 <SystemInit+0x18>)
 80019d2:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80019d6:	f442 0270 	orr.w	r2, r2, #15728640	@ 0xf00000
 80019da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80019de:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80019e2:	609a      	str	r2, [r3, #8]
#endif
}
 80019e4:	4770      	bx	lr
 80019e6:	bf00      	nop
 80019e8:	e000ed00 	.word	0xe000ed00

080019ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019ec:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80019ee:	4b0b      	ldr	r3, [pc, #44]	@ (8001a1c <HAL_Init+0x30>)
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80019f6:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80019fe:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001a06:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a08:	2003      	movs	r0, #3
 8001a0a:	f000 f82f 	bl	8001a6c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a0e:	2000      	movs	r0, #0
 8001a10:	f7ff fd64 	bl	80014dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a14:	f7ff fd42 	bl	800149c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8001a18:	2000      	movs	r0, #0
 8001a1a:	bd08      	pop	{r3, pc}
 8001a1c:	40023c00 	.word	0x40023c00

08001a20 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001a20:	4a03      	ldr	r2, [pc, #12]	@ (8001a30 <HAL_IncTick+0x10>)
 8001a22:	4b04      	ldr	r3, [pc, #16]	@ (8001a34 <HAL_IncTick+0x14>)
 8001a24:	6811      	ldr	r1, [r2, #0]
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	440b      	add	r3, r1
 8001a2a:	6013      	str	r3, [r2, #0]
}
 8001a2c:	4770      	bx	lr
 8001a2e:	bf00      	nop
 8001a30:	20000414 	.word	0x20000414
 8001a34:	20000008 	.word	0x20000008

08001a38 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001a38:	4b01      	ldr	r3, [pc, #4]	@ (8001a40 <HAL_GetTick+0x8>)
 8001a3a:	6818      	ldr	r0, [r3, #0]
}
 8001a3c:	4770      	bx	lr
 8001a3e:	bf00      	nop
 8001a40:	20000414 	.word	0x20000414

08001a44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a44:	b538      	push	{r3, r4, r5, lr}
 8001a46:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001a48:	f7ff fff6 	bl	8001a38 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a4c:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8001a4e:	bf1c      	itt	ne
 8001a50:	4b05      	ldrne	r3, [pc, #20]	@ (8001a68 <HAL_Delay+0x24>)
 8001a52:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8001a54:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8001a56:	bf18      	it	ne
 8001a58:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a5a:	f7ff ffed 	bl	8001a38 <HAL_GetTick>
 8001a5e:	1b43      	subs	r3, r0, r5
 8001a60:	42a3      	cmp	r3, r4
 8001a62:	d3fa      	bcc.n	8001a5a <HAL_Delay+0x16>
  {
  }
}
 8001a64:	bd38      	pop	{r3, r4, r5, pc}
 8001a66:	bf00      	nop
 8001a68:	20000008 	.word	0x20000008

08001a6c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a6c:	4907      	ldr	r1, [pc, #28]	@ (8001a8c <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001a6e:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a70:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a74:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a76:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a78:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a7c:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a80:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001a84:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8001a88:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001a8a:	4770      	bx	lr
 8001a8c:	e000ed00 	.word	0xe000ed00

08001a90 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a90:	4b16      	ldr	r3, [pc, #88]	@ (8001aec <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a92:	b530      	push	{r4, r5, lr}
 8001a94:	68dc      	ldr	r4, [r3, #12]
 8001a96:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a9a:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a9e:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001aa0:	2b04      	cmp	r3, #4
 8001aa2:	bf28      	it	cs
 8001aa4:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001aa6:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001aa8:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001aac:	bf8c      	ite	hi
 8001aae:	3c03      	subhi	r4, #3
 8001ab0:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ab2:	fa05 f303 	lsl.w	r3, r5, r3
 8001ab6:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001aba:	40a5      	lsls	r5, r4
 8001abc:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ac0:	40a3      	lsls	r3, r4
  if ((int32_t)(IRQn) >= 0)
 8001ac2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ac4:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ac8:	bfac      	ite	ge
 8001aca:	f100 4060 	addge.w	r0, r0, #3758096384	@ 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ace:	4a08      	ldrlt	r2, [pc, #32]	@ (8001af0 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ad0:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ad4:	bfb8      	it	lt
 8001ad6:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ada:	b2db      	uxtb	r3, r3
 8001adc:	bfaa      	itet	ge
 8001ade:	f500 4061 	addge.w	r0, r0, #57600	@ 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ae2:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ae4:	f880 3300 	strbge.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001ae8:	bd30      	pop	{r4, r5, pc}
 8001aea:	bf00      	nop
 8001aec:	e000ed00 	.word	0xe000ed00
 8001af0:	e000ed14 	.word	0xe000ed14

08001af4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001af4:	2800      	cmp	r0, #0
 8001af6:	db07      	blt.n	8001b08 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001af8:	4a04      	ldr	r2, [pc, #16]	@ (8001b0c <HAL_NVIC_EnableIRQ+0x18>)
 8001afa:	0941      	lsrs	r1, r0, #5
 8001afc:	2301      	movs	r3, #1
 8001afe:	f000 001f 	and.w	r0, r0, #31
 8001b02:	4083      	lsls	r3, r0
 8001b04:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001b08:	4770      	bx	lr
 8001b0a:	bf00      	nop
 8001b0c:	e000e100 	.word	0xe000e100

08001b10 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001b10:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001b12:	4604      	mov	r4, r0
 8001b14:	b150      	cbz	r0, 8001b2c <HAL_CRC_Init+0x1c>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001b16:	7943      	ldrb	r3, [r0, #5]
 8001b18:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8001b1c:	b913      	cbnz	r3, 8001b24 <HAL_CRC_Init+0x14>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001b1e:	7102      	strb	r2, [r0, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001b20:	f7ff f9f4 	bl	8000f0c <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001b24:	2301      	movs	r3, #1
 8001b26:	7163      	strb	r3, [r4, #5]

  /* Return function status */
  return HAL_OK;
 8001b28:	2000      	movs	r0, #0
}
 8001b2a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001b2c:	2001      	movs	r0, #1
 8001b2e:	e7fc      	b.n	8001b2a <HAL_CRC_Init+0x1a>

08001b30 <HAL_DMA_Abort_IT>:
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b30:	f890 3035 	ldrb.w	r3, [r0, #53]	@ 0x35
 8001b34:	2b02      	cmp	r3, #2
 8001b36:	d003      	beq.n	8001b40 <HAL_DMA_Abort_IT+0x10>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b38:	2380      	movs	r3, #128	@ 0x80
 8001b3a:	6543      	str	r3, [r0, #84]	@ 0x54
    return HAL_ERROR;
 8001b3c:	2001      	movs	r0, #1
 8001b3e:	4770      	bx	lr
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b40:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 8001b42:	2305      	movs	r3, #5
 8001b44:	f880 3035 	strb.w	r3, [r0, #53]	@ 0x35
    __HAL_DMA_DISABLE(hdma);
 8001b48:	6813      	ldr	r3, [r2, #0]
 8001b4a:	f023 0301 	bic.w	r3, r3, #1
 8001b4e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8001b50:	2000      	movs	r0, #0
}
 8001b52:	4770      	bx	lr

08001b54 <HAL_DMA_GetState>:
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
  return hdma->State;
 8001b54:	f890 0035 	ldrb.w	r0, [r0, #53]	@ 0x35
}
 8001b58:	4770      	bx	lr
	...

08001b5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b5c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b60:	f8df 9198 	ldr.w	r9, [pc, #408]	@ 8001cfc <HAL_GPIO_Init+0x1a0>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b64:	4a63      	ldr	r2, [pc, #396]	@ (8001cf4 <HAL_GPIO_Init+0x198>)
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b66:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b68:	680d      	ldr	r5, [r1, #0]
    ioposition = 0x01U << position;
 8001b6a:	2401      	movs	r4, #1
 8001b6c:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b6e:	ea04 0605 	and.w	r6, r4, r5
    if(iocurrent == ioposition)
 8001b72:	43ac      	bics	r4, r5
 8001b74:	f040 80ab 	bne.w	8001cce <HAL_GPIO_Init+0x172>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b78:	684d      	ldr	r5, [r1, #4]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b7a:	2703      	movs	r7, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b7c:	f005 0403 	and.w	r4, r5, #3
 8001b80:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b84:	fa07 fc08 	lsl.w	ip, r7, r8
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b88:	1e67      	subs	r7, r4, #1
 8001b8a:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b8c:	ea6f 0c0c 	mvn.w	ip, ip
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b90:	d834      	bhi.n	8001bfc <HAL_GPIO_Init+0xa0>
        temp = GPIOx->OSPEEDR; 
 8001b92:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b94:	ea07 0e0c 	and.w	lr, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b98:	68cf      	ldr	r7, [r1, #12]
 8001b9a:	fa07 f708 	lsl.w	r7, r7, r8
 8001b9e:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 8001ba2:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001ba4:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ba6:	ea27 0e06 	bic.w	lr, r7, r6
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001baa:	f3c5 1700 	ubfx	r7, r5, #4, #1
 8001bae:	409f      	lsls	r7, r3
 8001bb0:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8001bb4:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8001bb6:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001bb8:	ea07 0e0c 	and.w	lr, r7, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bbc:	688f      	ldr	r7, [r1, #8]
 8001bbe:	fa07 f708 	lsl.w	r7, r7, r8
 8001bc2:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bc6:	2c02      	cmp	r4, #2
        GPIOx->PUPDR = temp;
 8001bc8:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bca:	d119      	bne.n	8001c00 <HAL_GPIO_Init+0xa4>
        temp = GPIOx->AFR[position >> 3U];
 8001bcc:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8001bd0:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001bd4:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8001bd8:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001bdc:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8001be0:	f04f 0e0f 	mov.w	lr, #15
 8001be4:	fa0e fe0b 	lsl.w	lr, lr, fp
 8001be8:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001bec:	690f      	ldr	r7, [r1, #16]
 8001bee:	fa07 f70b 	lsl.w	r7, r7, fp
 8001bf2:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 8001bf6:	f8ca 7020 	str.w	r7, [sl, #32]
 8001bfa:	e001      	b.n	8001c00 <HAL_GPIO_Init+0xa4>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bfc:	2c03      	cmp	r4, #3
 8001bfe:	d1da      	bne.n	8001bb6 <HAL_GPIO_Init+0x5a>
      temp = GPIOx->MODER;
 8001c00:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c02:	fa04 f408 	lsl.w	r4, r4, r8
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c06:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c0a:	433c      	orrs	r4, r7
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c0c:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      GPIOx->MODER = temp;
 8001c10:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c12:	d05c      	beq.n	8001cce <HAL_GPIO_Init+0x172>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c14:	2400      	movs	r4, #0
 8001c16:	9401      	str	r4, [sp, #4]
 8001c18:	f8d9 4044 	ldr.w	r4, [r9, #68]	@ 0x44
 8001c1c:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 8001c20:	f8c9 4044 	str.w	r4, [r9, #68]	@ 0x44
 8001c24:	f8d9 4044 	ldr.w	r4, [r9, #68]	@ 0x44
 8001c28:	f023 0703 	bic.w	r7, r3, #3
 8001c2c:	f107 4780 	add.w	r7, r7, #1073741824	@ 0x40000000
 8001c30:	f404 4480 	and.w	r4, r4, #16384	@ 0x4000
 8001c34:	f507 379c 	add.w	r7, r7, #79872	@ 0x13800
 8001c38:	9401      	str	r4, [sp, #4]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c3a:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c3e:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8001c40:	f8d7 e008 	ldr.w	lr, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c44:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8001c48:	240f      	movs	r4, #15
 8001c4a:	fa04 f40c 	lsl.w	r4, r4, ip
 8001c4e:	ea2e 0e04 	bic.w	lr, lr, r4
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c52:	4c29      	ldr	r4, [pc, #164]	@ (8001cf8 <HAL_GPIO_Init+0x19c>)
 8001c54:	42a0      	cmp	r0, r4
 8001c56:	d041      	beq.n	8001cdc <HAL_GPIO_Init+0x180>
 8001c58:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8001c5c:	42a0      	cmp	r0, r4
 8001c5e:	d03f      	beq.n	8001ce0 <HAL_GPIO_Init+0x184>
 8001c60:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8001c64:	42a0      	cmp	r0, r4
 8001c66:	d03d      	beq.n	8001ce4 <HAL_GPIO_Init+0x188>
 8001c68:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8001c6c:	42a0      	cmp	r0, r4
 8001c6e:	d03b      	beq.n	8001ce8 <HAL_GPIO_Init+0x18c>
 8001c70:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8001c74:	42a0      	cmp	r0, r4
 8001c76:	d039      	beq.n	8001cec <HAL_GPIO_Init+0x190>
 8001c78:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8001c7c:	42a0      	cmp	r0, r4
 8001c7e:	d037      	beq.n	8001cf0 <HAL_GPIO_Init+0x194>
 8001c80:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8001c84:	42a0      	cmp	r0, r4
 8001c86:	bf14      	ite	ne
 8001c88:	2407      	movne	r4, #7
 8001c8a:	2406      	moveq	r4, #6
 8001c8c:	fa04 f40c 	lsl.w	r4, r4, ip
 8001c90:	ea44 040e 	orr.w	r4, r4, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c94:	60bc      	str	r4, [r7, #8]
        temp = EXTI->RTSR;
 8001c96:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8001c98:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c9a:	f415 1f80 	tst.w	r5, #1048576	@ 0x100000
        temp &= ~((uint32_t)iocurrent);
 8001c9e:	bf0c      	ite	eq
 8001ca0:	403c      	andeq	r4, r7
        {
          temp |= iocurrent;
 8001ca2:	4334      	orrne	r4, r6
        }
        EXTI->RTSR = temp;
 8001ca4:	6094      	str	r4, [r2, #8]

        temp = EXTI->FTSR;
 8001ca6:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ca8:	f415 1f00 	tst.w	r5, #2097152	@ 0x200000
        temp &= ~((uint32_t)iocurrent);
 8001cac:	bf0c      	ite	eq
 8001cae:	403c      	andeq	r4, r7
        {
          temp |= iocurrent;
 8001cb0:	4334      	orrne	r4, r6
        }
        EXTI->FTSR = temp;
 8001cb2:	60d4      	str	r4, [r2, #12]

        temp = EXTI->EMR;
 8001cb4:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001cb6:	f415 3f00 	tst.w	r5, #131072	@ 0x20000
        temp &= ~((uint32_t)iocurrent);
 8001cba:	bf0c      	ite	eq
 8001cbc:	403c      	andeq	r4, r7
        {
          temp |= iocurrent;
 8001cbe:	4334      	orrne	r4, r6
        }
        EXTI->EMR = temp;
 8001cc0:	6054      	str	r4, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001cc2:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001cc4:	03ed      	lsls	r5, r5, #15
        temp &= ~((uint32_t)iocurrent);
 8001cc6:	bf54      	ite	pl
 8001cc8:	403c      	andpl	r4, r7
        {
          temp |= iocurrent;
 8001cca:	4334      	orrmi	r4, r6
        }
        EXTI->IMR = temp;
 8001ccc:	6014      	str	r4, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cce:	3301      	adds	r3, #1
 8001cd0:	2b10      	cmp	r3, #16
 8001cd2:	f47f af49 	bne.w	8001b68 <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 8001cd6:	b003      	add	sp, #12
 8001cd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001cdc:	2400      	movs	r4, #0
 8001cde:	e7d5      	b.n	8001c8c <HAL_GPIO_Init+0x130>
 8001ce0:	2401      	movs	r4, #1
 8001ce2:	e7d3      	b.n	8001c8c <HAL_GPIO_Init+0x130>
 8001ce4:	2402      	movs	r4, #2
 8001ce6:	e7d1      	b.n	8001c8c <HAL_GPIO_Init+0x130>
 8001ce8:	2403      	movs	r4, #3
 8001cea:	e7cf      	b.n	8001c8c <HAL_GPIO_Init+0x130>
 8001cec:	2404      	movs	r4, #4
 8001cee:	e7cd      	b.n	8001c8c <HAL_GPIO_Init+0x130>
 8001cf0:	2405      	movs	r4, #5
 8001cf2:	e7cb      	b.n	8001c8c <HAL_GPIO_Init+0x130>
 8001cf4:	40013c00 	.word	0x40013c00
 8001cf8:	40020000 	.word	0x40020000
 8001cfc:	40023800 	.word	0x40023800

08001d00 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d00:	6903      	ldr	r3, [r0, #16]
 8001d02:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8001d04:	bf14      	ite	ne
 8001d06:	2001      	movne	r0, #1
 8001d08:	2000      	moveq	r0, #0
 8001d0a:	4770      	bx	lr

08001d0c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d0c:	b10a      	cbz	r2, 8001d12 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d0e:	6181      	str	r1, [r0, #24]
  }
}
 8001d10:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d12:	0409      	lsls	r1, r1, #16
 8001d14:	e7fb      	b.n	8001d0e <HAL_GPIO_WritePin+0x2>

08001d16 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001d16:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001d18:	ea01 0203 	and.w	r2, r1, r3
 8001d1c:	ea21 0103 	bic.w	r1, r1, r3
 8001d20:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8001d24:	6181      	str	r1, [r0, #24]
}
 8001d26:	4770      	bx	lr

08001d28 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001d28:	4a04      	ldr	r2, [pc, #16]	@ (8001d3c <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8001d2a:	6951      	ldr	r1, [r2, #20]
 8001d2c:	4201      	tst	r1, r0
{
 8001d2e:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001d30:	d002      	beq.n	8001d38 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001d32:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001d34:	f7fe ff68 	bl	8000c08 <HAL_GPIO_EXTI_Callback>
  }
}
 8001d38:	bd08      	pop	{r3, pc}
 8001d3a:	bf00      	nop
 8001d3c:	40013c00 	.word	0x40013c00

08001d40 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001d40:	6801      	ldr	r1, [r0, #0]
 8001d42:	694b      	ldr	r3, [r1, #20]
 8001d44:	f413 6380 	ands.w	r3, r3, #1024	@ 0x400
 8001d48:	f04f 0200 	mov.w	r2, #0
 8001d4c:	d010      	beq.n	8001d70 <I2C_IsAcknowledgeFailed+0x30>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d4e:	f46f 6380 	mvn.w	r3, #1024	@ 0x400
 8001d52:	614b      	str	r3, [r1, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 8001d54:	2320      	movs	r3, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 8001d56:	6302      	str	r2, [r0, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001d58:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d5c:	f880 203e 	strb.w	r2, [r0, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001d60:	6c03      	ldr	r3, [r0, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d62:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001d66:	f043 0304 	orr.w	r3, r3, #4
 8001d6a:	6403      	str	r3, [r0, #64]	@ 0x40

    return HAL_ERROR;
 8001d6c:	2001      	movs	r0, #1
 8001d6e:	4770      	bx	lr
  }
  return HAL_OK;
 8001d70:	4618      	mov	r0, r3
}
 8001d72:	4770      	bx	lr

08001d74 <I2C_WaitOnFlagUntilTimeout>:
{
 8001d74:	e92d 46f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r9, sl, lr}
 8001d78:	4606      	mov	r6, r0
 8001d7a:	460f      	mov	r7, r1
 8001d7c:	4691      	mov	r9, r2
 8001d7e:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001d80:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8001d84:	6833      	ldr	r3, [r6, #0]
 8001d86:	f1ba 0f01 	cmp.w	sl, #1
 8001d8a:	bf0c      	ite	eq
 8001d8c:	695c      	ldreq	r4, [r3, #20]
 8001d8e:	699c      	ldrne	r4, [r3, #24]
 8001d90:	ea27 0404 	bic.w	r4, r7, r4
 8001d94:	b2a4      	uxth	r4, r4
 8001d96:	fab4 f484 	clz	r4, r4
 8001d9a:	0964      	lsrs	r4, r4, #5
 8001d9c:	45a1      	cmp	r9, r4
 8001d9e:	d001      	beq.n	8001da4 <I2C_WaitOnFlagUntilTimeout+0x30>
  return HAL_OK;
 8001da0:	2000      	movs	r0, #0
 8001da2:	e025      	b.n	8001df0 <I2C_WaitOnFlagUntilTimeout+0x7c>
    if (Timeout != HAL_MAX_DELAY)
 8001da4:	1c6a      	adds	r2, r5, #1
 8001da6:	d0ee      	beq.n	8001d86 <I2C_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001da8:	f7ff fe46 	bl	8001a38 <HAL_GetTick>
 8001dac:	9b08      	ldr	r3, [sp, #32]
 8001dae:	1ac0      	subs	r0, r0, r3
 8001db0:	42a8      	cmp	r0, r5
 8001db2:	d801      	bhi.n	8001db8 <I2C_WaitOnFlagUntilTimeout+0x44>
 8001db4:	2d00      	cmp	r5, #0
 8001db6:	d1e5      	bne.n	8001d84 <I2C_WaitOnFlagUntilTimeout+0x10>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001db8:	6833      	ldr	r3, [r6, #0]
 8001dba:	f1ba 0f01 	cmp.w	sl, #1
 8001dbe:	bf0c      	ite	eq
 8001dc0:	695b      	ldreq	r3, [r3, #20]
 8001dc2:	699b      	ldrne	r3, [r3, #24]
 8001dc4:	ea27 0303 	bic.w	r3, r7, r3
 8001dc8:	b29b      	uxth	r3, r3
 8001dca:	fab3 f383 	clz	r3, r3
 8001dce:	095b      	lsrs	r3, r3, #5
 8001dd0:	4599      	cmp	r9, r3
 8001dd2:	d1d7      	bne.n	8001d84 <I2C_WaitOnFlagUntilTimeout+0x10>
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001dd4:	2300      	movs	r3, #0
          hi2c->State             = HAL_I2C_STATE_READY;
 8001dd6:	2220      	movs	r2, #32
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001dd8:	6333      	str	r3, [r6, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001dda:	f886 203d 	strb.w	r2, [r6, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001dde:	f886 303e 	strb.w	r3, [r6, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001de2:	6c32      	ldr	r2, [r6, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8001de4:	f886 303c 	strb.w	r3, [r6, #60]	@ 0x3c
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001de8:	f042 0220 	orr.w	r2, r2, #32
 8001dec:	6432      	str	r2, [r6, #64]	@ 0x40
          return HAL_ERROR;
 8001dee:	2001      	movs	r0, #1
}
 8001df0:	e8bd 86f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r9, sl, pc}

08001df4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8001df4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001df8:	4604      	mov	r4, r0
 8001dfa:	460f      	mov	r7, r1
 8001dfc:	4616      	mov	r6, r2
 8001dfe:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001e00:	6825      	ldr	r5, [r4, #0]
 8001e02:	6968      	ldr	r0, [r5, #20]
 8001e04:	ea27 0000 	bic.w	r0, r7, r0
 8001e08:	b280      	uxth	r0, r0
 8001e0a:	b1c0      	cbz	r0, 8001e3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001e0c:	696b      	ldr	r3, [r5, #20]
 8001e0e:	055a      	lsls	r2, r3, #21
 8001e10:	d517      	bpl.n	8001e42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e12:	682b      	ldr	r3, [r5, #0]
 8001e14:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001e18:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e1a:	f46f 6380 	mvn.w	r3, #1024	@ 0x400
 8001e1e:	616b      	str	r3, [r5, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 8001e20:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001e22:	2300      	movs	r3, #0
 8001e24:	6323      	str	r3, [r4, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001e26:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e2a:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001e2e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001e30:	f043 0304 	orr.w	r3, r3, #4
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001e34:	6423      	str	r3, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8001e36:	2300      	movs	r3, #0
 8001e38:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
      return HAL_ERROR;
 8001e3c:	2001      	movs	r0, #1
}
 8001e3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8001e42:	1c73      	adds	r3, r6, #1
 8001e44:	d0dd      	beq.n	8001e02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e46:	f7ff fdf7 	bl	8001a38 <HAL_GetTick>
 8001e4a:	eba0 0008 	sub.w	r0, r0, r8
 8001e4e:	42b0      	cmp	r0, r6
 8001e50:	d801      	bhi.n	8001e56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x62>
 8001e52:	2e00      	cmp	r6, #0
 8001e54:	d1d4      	bne.n	8001e00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001e56:	6823      	ldr	r3, [r4, #0]
 8001e58:	695a      	ldr	r2, [r3, #20]
 8001e5a:	ea27 0202 	bic.w	r2, r7, r2
 8001e5e:	b292      	uxth	r2, r2
 8001e60:	2a00      	cmp	r2, #0
 8001e62:	d0cd      	beq.n	8001e00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001e64:	2300      	movs	r3, #0
          hi2c->State               = HAL_I2C_STATE_READY;
 8001e66:	2220      	movs	r2, #32
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001e68:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001e6a:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e6e:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001e72:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001e74:	4313      	orrs	r3, r2
 8001e76:	e7dd      	b.n	8001e34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x40>

08001e78 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8001e78:	b570      	push	{r4, r5, r6, lr}
 8001e7a:	4604      	mov	r4, r0
 8001e7c:	460d      	mov	r5, r1
 8001e7e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001e80:	6823      	ldr	r3, [r4, #0]
 8001e82:	695b      	ldr	r3, [r3, #20]
 8001e84:	061b      	lsls	r3, r3, #24
 8001e86:	d501      	bpl.n	8001e8c <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;
 8001e88:	2000      	movs	r0, #0
 8001e8a:	e01e      	b.n	8001eca <I2C_WaitOnTXEFlagUntilTimeout+0x52>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001e8c:	4620      	mov	r0, r4
 8001e8e:	f7ff ff57 	bl	8001d40 <I2C_IsAcknowledgeFailed>
 8001e92:	b9c8      	cbnz	r0, 8001ec8 <I2C_WaitOnTXEFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8001e94:	1c6a      	adds	r2, r5, #1
 8001e96:	d0f3      	beq.n	8001e80 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e98:	f7ff fdce 	bl	8001a38 <HAL_GetTick>
 8001e9c:	1b80      	subs	r0, r0, r6
 8001e9e:	42a8      	cmp	r0, r5
 8001ea0:	d801      	bhi.n	8001ea6 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8001ea2:	2d00      	cmp	r5, #0
 8001ea4:	d1ec      	bne.n	8001e80 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001ea6:	6823      	ldr	r3, [r4, #0]
 8001ea8:	695b      	ldr	r3, [r3, #20]
 8001eaa:	f013 0380 	ands.w	r3, r3, #128	@ 0x80
 8001eae:	d1e7      	bne.n	8001e80 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
          hi2c->State               = HAL_I2C_STATE_READY;
 8001eb0:	2220      	movs	r2, #32
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001eb2:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001eb4:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001eb8:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001ebc:	6c22      	ldr	r2, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8001ebe:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001ec2:	f042 0220 	orr.w	r2, r2, #32
 8001ec6:	6422      	str	r2, [r4, #64]	@ 0x40
      return HAL_ERROR;
 8001ec8:	2001      	movs	r0, #1
}
 8001eca:	bd70      	pop	{r4, r5, r6, pc}

08001ecc <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8001ecc:	b570      	push	{r4, r5, r6, lr}
 8001ece:	4604      	mov	r4, r0
 8001ed0:	460d      	mov	r5, r1
 8001ed2:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001ed4:	6823      	ldr	r3, [r4, #0]
 8001ed6:	695b      	ldr	r3, [r3, #20]
 8001ed8:	075b      	lsls	r3, r3, #29
 8001eda:	d501      	bpl.n	8001ee0 <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 8001edc:	2000      	movs	r0, #0
 8001ede:	e01e      	b.n	8001f1e <I2C_WaitOnBTFFlagUntilTimeout+0x52>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001ee0:	4620      	mov	r0, r4
 8001ee2:	f7ff ff2d 	bl	8001d40 <I2C_IsAcknowledgeFailed>
 8001ee6:	b9c8      	cbnz	r0, 8001f1c <I2C_WaitOnBTFFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8001ee8:	1c6a      	adds	r2, r5, #1
 8001eea:	d0f3      	beq.n	8001ed4 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001eec:	f7ff fda4 	bl	8001a38 <HAL_GetTick>
 8001ef0:	1b80      	subs	r0, r0, r6
 8001ef2:	42a8      	cmp	r0, r5
 8001ef4:	d801      	bhi.n	8001efa <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8001ef6:	2d00      	cmp	r5, #0
 8001ef8:	d1ec      	bne.n	8001ed4 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8001efa:	6823      	ldr	r3, [r4, #0]
 8001efc:	695b      	ldr	r3, [r3, #20]
 8001efe:	f013 0304 	ands.w	r3, r3, #4
 8001f02:	d1e7      	bne.n	8001ed4 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
          hi2c->State               = HAL_I2C_STATE_READY;
 8001f04:	2220      	movs	r2, #32
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001f06:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001f08:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f0c:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001f10:	6c22      	ldr	r2, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8001f12:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001f16:	f042 0220 	orr.w	r2, r2, #32
 8001f1a:	6422      	str	r2, [r4, #64]	@ 0x40
      return HAL_ERROR;
 8001f1c:	2001      	movs	r0, #1
}
 8001f1e:	bd70      	pop	{r4, r5, r6, pc}

08001f20 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8001f20:	b570      	push	{r4, r5, r6, lr}
 8001f22:	4604      	mov	r4, r0
 8001f24:	460d      	mov	r5, r1
 8001f26:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001f28:	6821      	ldr	r1, [r4, #0]
 8001f2a:	694b      	ldr	r3, [r1, #20]
 8001f2c:	f013 0340 	ands.w	r3, r3, #64	@ 0x40
 8001f30:	d001      	beq.n	8001f36 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 8001f32:	2000      	movs	r0, #0
 8001f34:	e011      	b.n	8001f5a <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001f36:	694a      	ldr	r2, [r1, #20]
 8001f38:	06d2      	lsls	r2, r2, #27
 8001f3a:	d50f      	bpl.n	8001f5c <I2C_WaitOnRXNEFlagUntilTimeout+0x3c>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f3c:	f06f 0210 	mvn.w	r2, #16
 8001f40:	614a      	str	r2, [r1, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 8001f42:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001f44:	6323      	str	r3, [r4, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001f46:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f4a:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8001f4e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001f50:	6423      	str	r3, [r4, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8001f52:	2300      	movs	r3, #0
 8001f54:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
      return HAL_ERROR;
 8001f58:	2001      	movs	r0, #1
}
 8001f5a:	bd70      	pop	{r4, r5, r6, pc}
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f5c:	f7ff fd6c 	bl	8001a38 <HAL_GetTick>
 8001f60:	1b80      	subs	r0, r0, r6
 8001f62:	42a8      	cmp	r0, r5
 8001f64:	d801      	bhi.n	8001f6a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8001f66:	2d00      	cmp	r5, #0
 8001f68:	d1de      	bne.n	8001f28 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8001f6a:	6823      	ldr	r3, [r4, #0]
 8001f6c:	695b      	ldr	r3, [r3, #20]
 8001f6e:	f013 0340 	ands.w	r3, r3, #64	@ 0x40
 8001f72:	d1d9      	bne.n	8001f28 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
        hi2c->State               = HAL_I2C_STATE_READY;
 8001f74:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001f76:	6323      	str	r3, [r4, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001f78:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f7c:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001f80:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001f82:	4313      	orrs	r3, r2
 8001f84:	e7e4      	b.n	8001f50 <I2C_WaitOnRXNEFlagUntilTimeout+0x30>
	...

08001f88 <HAL_I2C_Init>:
{
 8001f88:	b570      	push	{r4, r5, r6, lr}
  if (hi2c == NULL)
 8001f8a:	4604      	mov	r4, r0
 8001f8c:	b908      	cbnz	r0, 8001f92 <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 8001f8e:	2001      	movs	r0, #1
}
 8001f90:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f92:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8001f96:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8001f9a:	b91b      	cbnz	r3, 8001fa4 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 8001f9c:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_I2C_MspInit(hi2c);
 8001fa0:	f7ff f93c 	bl	800121c <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001fa4:	2324      	movs	r3, #36	@ 0x24
 8001fa6:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8001faa:	6823      	ldr	r3, [r4, #0]
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	f022 0201 	bic.w	r2, r2, #1
 8001fb2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001fba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001fbc:	681a      	ldr	r2, [r3, #0]
 8001fbe:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001fc2:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001fc4:	f001 f9d8 	bl	8003378 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001fc8:	4b3f      	ldr	r3, [pc, #252]	@ (80020c8 <HAL_I2C_Init+0x140>)
 8001fca:	6865      	ldr	r5, [r4, #4]
 8001fcc:	429d      	cmp	r5, r3
 8001fce:	bf94      	ite	ls
 8001fd0:	4b3e      	ldrls	r3, [pc, #248]	@ (80020cc <HAL_I2C_Init+0x144>)
 8001fd2:	4b3f      	ldrhi	r3, [pc, #252]	@ (80020d0 <HAL_I2C_Init+0x148>)
 8001fd4:	4298      	cmp	r0, r3
 8001fd6:	bf8c      	ite	hi
 8001fd8:	2300      	movhi	r3, #0
 8001fda:	2301      	movls	r3, #1
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d1d6      	bne.n	8001f8e <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001fe0:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001fe2:	4e39      	ldr	r6, [pc, #228]	@ (80020c8 <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001fe4:	6851      	ldr	r1, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8001fe6:	4b3b      	ldr	r3, [pc, #236]	@ (80020d4 <HAL_I2C_Init+0x14c>)
 8001fe8:	fbb0 f3f3 	udiv	r3, r0, r3
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001fec:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 8001ff0:	4319      	orrs	r1, r3
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001ff2:	42b5      	cmp	r5, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001ff4:	6051      	str	r1, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001ff6:	bf88      	it	hi
 8001ff8:	f44f 7696 	movhi.w	r6, #300	@ 0x12c
 8001ffc:	6a11      	ldr	r1, [r2, #32]
 8001ffe:	bf88      	it	hi
 8002000:	4373      	mulhi	r3, r6
 8002002:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 8002006:	bf84      	itt	hi
 8002008:	f44f 767a 	movhi.w	r6, #1000	@ 0x3e8
 800200c:	fbb3 f3f6 	udivhi	r3, r3, r6
 8002010:	3301      	adds	r3, #1
 8002012:	430b      	orrs	r3, r1
 8002014:	6213      	str	r3, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002016:	69d1      	ldr	r1, [r2, #28]
 8002018:	1e43      	subs	r3, r0, #1
 800201a:	482b      	ldr	r0, [pc, #172]	@ (80020c8 <HAL_I2C_Init+0x140>)
 800201c:	f421 414f 	bic.w	r1, r1, #52992	@ 0xcf00
 8002020:	4285      	cmp	r5, r0
 8002022:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 8002026:	d832      	bhi.n	800208e <HAL_I2C_Init+0x106>
 8002028:	006d      	lsls	r5, r5, #1
 800202a:	f640 70fc 	movw	r0, #4092	@ 0xffc
 800202e:	fbb3 f3f5 	udiv	r3, r3, r5
 8002032:	3301      	adds	r3, #1
 8002034:	4203      	tst	r3, r0
 8002036:	d042      	beq.n	80020be <HAL_I2C_Init+0x136>
 8002038:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800203c:	4319      	orrs	r1, r3
 800203e:	61d1      	str	r1, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002040:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 8002044:	6811      	ldr	r1, [r2, #0]
 8002046:	4303      	orrs	r3, r0
 8002048:	f021 01c0 	bic.w	r1, r1, #192	@ 0xc0
 800204c:	430b      	orrs	r3, r1
 800204e:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002050:	6891      	ldr	r1, [r2, #8]
 8002052:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 8002056:	f421 4103 	bic.w	r1, r1, #33536	@ 0x8300
 800205a:	4303      	orrs	r3, r0
 800205c:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 8002060:	430b      	orrs	r3, r1
 8002062:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002064:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 8002068:	68d1      	ldr	r1, [r2, #12]
 800206a:	4303      	orrs	r3, r0
 800206c:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 8002070:	430b      	orrs	r3, r1
 8002072:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 8002074:	6813      	ldr	r3, [r2, #0]
 8002076:	f043 0301 	orr.w	r3, r3, #1
 800207a:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800207c:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 800207e:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002080:	6420      	str	r0, [r4, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002082:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002086:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002088:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e
  return HAL_OK;
 800208c:	e780      	b.n	8001f90 <HAL_I2C_Init+0x8>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800208e:	68a0      	ldr	r0, [r4, #8]
 8002090:	b950      	cbnz	r0, 80020a8 <HAL_I2C_Init+0x120>
 8002092:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002096:	fbb3 f3f5 	udiv	r3, r3, r5
 800209a:	3301      	adds	r3, #1
 800209c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020a0:	b17b      	cbz	r3, 80020c2 <HAL_I2C_Init+0x13a>
 80020a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80020a6:	e7c9      	b.n	800203c <HAL_I2C_Init+0xb4>
 80020a8:	2019      	movs	r0, #25
 80020aa:	4368      	muls	r0, r5
 80020ac:	fbb3 f3f0 	udiv	r3, r3, r0
 80020b0:	3301      	adds	r3, #1
 80020b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020b6:	b123      	cbz	r3, 80020c2 <HAL_I2C_Init+0x13a>
 80020b8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80020bc:	e7be      	b.n	800203c <HAL_I2C_Init+0xb4>
 80020be:	2304      	movs	r3, #4
 80020c0:	e7bc      	b.n	800203c <HAL_I2C_Init+0xb4>
 80020c2:	2301      	movs	r3, #1
 80020c4:	e7ba      	b.n	800203c <HAL_I2C_Init+0xb4>
 80020c6:	bf00      	nop
 80020c8:	000186a0 	.word	0x000186a0
 80020cc:	001e847f 	.word	0x001e847f
 80020d0:	003d08ff 	.word	0x003d08ff
 80020d4:	000f4240 	.word	0x000f4240

080020d8 <HAL_I2C_Master_Transmit>:
{
 80020d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80020dc:	4604      	mov	r4, r0
 80020de:	b085      	sub	sp, #20
 80020e0:	4698      	mov	r8, r3
 80020e2:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 80020e4:	460d      	mov	r5, r1
 80020e6:	4691      	mov	r9, r2
  uint32_t tickstart = HAL_GetTick();
 80020e8:	f7ff fca6 	bl	8001a38 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80020ec:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
 80020f0:	2b20      	cmp	r3, #32
  uint32_t tickstart = HAL_GetTick();
 80020f2:	4606      	mov	r6, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80020f4:	d004      	beq.n	8002100 <HAL_I2C_Master_Transmit+0x28>
      return HAL_BUSY;
 80020f6:	2502      	movs	r5, #2
}
 80020f8:	4628      	mov	r0, r5
 80020fa:	b005      	add	sp, #20
 80020fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002100:	9000      	str	r0, [sp, #0]
 8002102:	495e      	ldr	r1, [pc, #376]	@ (800227c <HAL_I2C_Master_Transmit+0x1a4>)
 8002104:	2319      	movs	r3, #25
 8002106:	2201      	movs	r2, #1
 8002108:	4620      	mov	r0, r4
 800210a:	f7ff fe33 	bl	8001d74 <I2C_WaitOnFlagUntilTimeout>
 800210e:	2800      	cmp	r0, #0
 8002110:	d1f1      	bne.n	80020f6 <HAL_I2C_Master_Transmit+0x1e>
    __HAL_LOCK(hi2c);
 8002112:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 8002116:	2b01      	cmp	r3, #1
 8002118:	d0ed      	beq.n	80020f6 <HAL_I2C_Master_Transmit+0x1e>
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800211a:	6821      	ldr	r1, [r4, #0]
    __HAL_LOCK(hi2c);
 800211c:	2301      	movs	r3, #1
 800211e:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002122:	680b      	ldr	r3, [r1, #0]
 8002124:	07da      	lsls	r2, r3, #31
      __HAL_I2C_ENABLE(hi2c);
 8002126:	bf5e      	ittt	pl
 8002128:	680b      	ldrpl	r3, [r1, #0]
 800212a:	f043 0301 	orrpl.w	r3, r3, #1
 800212e:	600b      	strpl	r3, [r1, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002130:	680b      	ldr	r3, [r1, #0]
 8002132:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002136:	600b      	str	r3, [r1, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002138:	2321      	movs	r3, #33	@ 0x21
 800213a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800213e:	2310      	movs	r3, #16
 8002140:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002144:	2300      	movs	r3, #0
 8002146:	6423      	str	r3, [r4, #64]	@ 0x40
    hi2c->XferCount   = Size;
 8002148:	f8a4 802a 	strh.w	r8, [r4, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800214c:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800214e:	8523      	strh	r3, [r4, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002150:	4b4b      	ldr	r3, [pc, #300]	@ (8002280 <HAL_I2C_Master_Transmit+0x1a8>)
 8002152:	62e3      	str	r3, [r4, #44]	@ 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002154:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    hi2c->pBuffPtr    = pData;
 8002156:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800215a:	2b08      	cmp	r3, #8
 800215c:	d004      	beq.n	8002168 <HAL_I2C_Master_Transmit+0x90>
 800215e:	2b01      	cmp	r3, #1
 8002160:	d002      	beq.n	8002168 <HAL_I2C_Master_Transmit+0x90>
 8002162:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002166:	d104      	bne.n	8002172 <HAL_I2C_Master_Transmit+0x9a>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002168:	680b      	ldr	r3, [r1, #0]
 800216a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800216e:	600b      	str	r3, [r1, #0]
 8002170:	e002      	b.n	8002178 <HAL_I2C_Master_Transmit+0xa0>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002172:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8002174:	2b12      	cmp	r3, #18
 8002176:	d0f7      	beq.n	8002168 <HAL_I2C_Master_Transmit+0x90>
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002178:	2200      	movs	r2, #0
 800217a:	9600      	str	r6, [sp, #0]
 800217c:	463b      	mov	r3, r7
 800217e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002182:	4620      	mov	r0, r4
 8002184:	f7ff fdf6 	bl	8001d74 <I2C_WaitOnFlagUntilTimeout>
 8002188:	6822      	ldr	r2, [r4, #0]
 800218a:	b140      	cbz	r0, 800219e <HAL_I2C_Master_Transmit+0xc6>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800218c:	6813      	ldr	r3, [r2, #0]
 800218e:	05db      	lsls	r3, r3, #23
 8002190:	d401      	bmi.n	8002196 <HAL_I2C_Master_Transmit+0xbe>
      return HAL_ERROR;
 8002192:	2501      	movs	r5, #1
 8002194:	e7b0      	b.n	80020f8 <HAL_I2C_Master_Transmit+0x20>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002196:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800219a:	6423      	str	r3, [r4, #64]	@ 0x40
 800219c:	e7f9      	b.n	8002192 <HAL_I2C_Master_Transmit+0xba>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800219e:	6923      	ldr	r3, [r4, #16]
 80021a0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80021a4:	d121      	bne.n	80021ea <HAL_I2C_Master_Transmit+0x112>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80021a6:	f005 05fe 	and.w	r5, r5, #254	@ 0xfe
 80021aa:	6115      	str	r5, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80021ac:	4935      	ldr	r1, [pc, #212]	@ (8002284 <HAL_I2C_Master_Transmit+0x1ac>)
 80021ae:	4633      	mov	r3, r6
 80021b0:	463a      	mov	r2, r7
 80021b2:	4620      	mov	r0, r4
 80021b4:	f7ff fe1e 	bl	8001df4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80021b8:	4605      	mov	r5, r0
 80021ba:	2800      	cmp	r0, #0
 80021bc:	d1e9      	bne.n	8002192 <HAL_I2C_Master_Transmit+0xba>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021be:	6823      	ldr	r3, [r4, #0]
 80021c0:	9003      	str	r0, [sp, #12]
 80021c2:	695a      	ldr	r2, [r3, #20]
 80021c4:	9203      	str	r2, [sp, #12]
 80021c6:	699b      	ldr	r3, [r3, #24]
 80021c8:	9303      	str	r3, [sp, #12]
 80021ca:	9b03      	ldr	r3, [sp, #12]
    while (hi2c->XferSize > 0U)
 80021cc:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 80021ce:	b9f3      	cbnz	r3, 800220e <HAL_I2C_Master_Transmit+0x136>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021d0:	6821      	ldr	r1, [r4, #0]
 80021d2:	680a      	ldr	r2, [r1, #0]
 80021d4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80021d8:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80021da:	2220      	movs	r2, #32
 80021dc:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
    __HAL_UNLOCK(hi2c);
 80021e0:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80021e4:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    return HAL_OK;
 80021e8:	e786      	b.n	80020f8 <HAL_I2C_Master_Transmit+0x20>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80021ea:	11eb      	asrs	r3, r5, #7
 80021ec:	f003 0306 	and.w	r3, r3, #6
 80021f0:	f043 03f0 	orr.w	r3, r3, #240	@ 0xf0
 80021f4:	6113      	str	r3, [r2, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80021f6:	4924      	ldr	r1, [pc, #144]	@ (8002288 <HAL_I2C_Master_Transmit+0x1b0>)
 80021f8:	4633      	mov	r3, r6
 80021fa:	463a      	mov	r2, r7
 80021fc:	4620      	mov	r0, r4
 80021fe:	f7ff fdf9 	bl	8001df4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002202:	2800      	cmp	r0, #0
 8002204:	d1c5      	bne.n	8002192 <HAL_I2C_Master_Transmit+0xba>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002206:	6823      	ldr	r3, [r4, #0]
 8002208:	b2ed      	uxtb	r5, r5
 800220a:	611d      	str	r5, [r3, #16]
 800220c:	e7ce      	b.n	80021ac <HAL_I2C_Master_Transmit+0xd4>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800220e:	4632      	mov	r2, r6
 8002210:	4639      	mov	r1, r7
 8002212:	4620      	mov	r0, r4
 8002214:	f7ff fe30 	bl	8001e78 <I2C_WaitOnTXEFlagUntilTimeout>
 8002218:	b140      	cbz	r0, 800222c <HAL_I2C_Master_Transmit+0x154>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800221a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800221c:	2b04      	cmp	r3, #4
 800221e:	d1b8      	bne.n	8002192 <HAL_I2C_Master_Transmit+0xba>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002220:	6822      	ldr	r2, [r4, #0]
 8002222:	6813      	ldr	r3, [r2, #0]
 8002224:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002228:	6013      	str	r3, [r2, #0]
 800222a:	e7b2      	b.n	8002192 <HAL_I2C_Master_Transmit+0xba>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800222c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800222e:	6820      	ldr	r0, [r4, #0]
 8002230:	461a      	mov	r2, r3
 8002232:	f812 1b01 	ldrb.w	r1, [r2], #1
 8002236:	6101      	str	r1, [r0, #16]
      hi2c->pBuffPtr++;
 8002238:	6262      	str	r2, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 800223a:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 800223c:	3a01      	subs	r2, #1
 800223e:	b292      	uxth	r2, r2
 8002240:	8562      	strh	r2, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8002242:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002244:	f8d0 c014 	ldr.w	ip, [r0, #20]
      hi2c->XferSize--;
 8002248:	1e51      	subs	r1, r2, #1
 800224a:	b289      	uxth	r1, r1
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800224c:	f01c 0f04 	tst.w	ip, #4
      hi2c->XferSize--;
 8002250:	8521      	strh	r1, [r4, #40]	@ 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002252:	d00a      	beq.n	800226a <HAL_I2C_Master_Transmit+0x192>
 8002254:	b149      	cbz	r1, 800226a <HAL_I2C_Master_Transmit+0x192>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002256:	7859      	ldrb	r1, [r3, #1]
 8002258:	6101      	str	r1, [r0, #16]
        hi2c->pBuffPtr++;
 800225a:	3302      	adds	r3, #2
 800225c:	6263      	str	r3, [r4, #36]	@ 0x24
        hi2c->XferCount--;
 800225e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002260:	3b01      	subs	r3, #1
 8002262:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 8002264:	3a02      	subs	r2, #2
        hi2c->XferCount--;
 8002266:	8563      	strh	r3, [r4, #42]	@ 0x2a
        hi2c->XferSize--;
 8002268:	8522      	strh	r2, [r4, #40]	@ 0x28
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800226a:	4632      	mov	r2, r6
 800226c:	4639      	mov	r1, r7
 800226e:	4620      	mov	r0, r4
 8002270:	f7ff fe2c 	bl	8001ecc <I2C_WaitOnBTFFlagUntilTimeout>
 8002274:	2800      	cmp	r0, #0
 8002276:	d0a9      	beq.n	80021cc <HAL_I2C_Master_Transmit+0xf4>
 8002278:	e7cf      	b.n	800221a <HAL_I2C_Master_Transmit+0x142>
 800227a:	bf00      	nop
 800227c:	00100002 	.word	0x00100002
 8002280:	ffff0000 	.word	0xffff0000
 8002284:	00010002 	.word	0x00010002
 8002288:	00010008 	.word	0x00010008

0800228c <HAL_I2C_Master_Receive>:
{
 800228c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002290:	4604      	mov	r4, r0
 8002292:	b089      	sub	sp, #36	@ 0x24
 8002294:	4698      	mov	r8, r3
 8002296:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8002298:	460e      	mov	r6, r1
 800229a:	4691      	mov	r9, r2
  uint32_t tickstart = HAL_GetTick();
 800229c:	f7ff fbcc 	bl	8001a38 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80022a0:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
 80022a4:	2b20      	cmp	r3, #32
  uint32_t tickstart = HAL_GetTick();
 80022a6:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80022a8:	d004      	beq.n	80022b4 <HAL_I2C_Master_Receive+0x28>
      return HAL_BUSY;
 80022aa:	2602      	movs	r6, #2
}
 80022ac:	4630      	mov	r0, r6
 80022ae:	b009      	add	sp, #36	@ 0x24
 80022b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80022b4:	9000      	str	r0, [sp, #0]
 80022b6:	499a      	ldr	r1, [pc, #616]	@ (8002520 <HAL_I2C_Master_Receive+0x294>)
 80022b8:	2319      	movs	r3, #25
 80022ba:	2201      	movs	r2, #1
 80022bc:	4620      	mov	r0, r4
 80022be:	f7ff fd59 	bl	8001d74 <I2C_WaitOnFlagUntilTimeout>
 80022c2:	2800      	cmp	r0, #0
 80022c4:	d1f1      	bne.n	80022aa <HAL_I2C_Master_Receive+0x1e>
    __HAL_LOCK(hi2c);
 80022c6:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 80022ca:	2b01      	cmp	r3, #1
 80022cc:	d0ed      	beq.n	80022aa <HAL_I2C_Master_Receive+0x1e>
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80022ce:	6821      	ldr	r1, [r4, #0]
    __HAL_LOCK(hi2c);
 80022d0:	2301      	movs	r3, #1
 80022d2:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80022d6:	680b      	ldr	r3, [r1, #0]
 80022d8:	07db      	lsls	r3, r3, #31
      __HAL_I2C_ENABLE(hi2c);
 80022da:	bf5e      	ittt	pl
 80022dc:	680b      	ldrpl	r3, [r1, #0]
 80022de:	f043 0301 	orrpl.w	r3, r3, #1
 80022e2:	600b      	strpl	r3, [r1, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80022e4:	680b      	ldr	r3, [r1, #0]
 80022e6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80022ea:	600b      	str	r3, [r1, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80022ec:	2322      	movs	r3, #34	@ 0x22
 80022ee:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80022f2:	2310      	movs	r3, #16
 80022f4:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80022f8:	2300      	movs	r3, #0
 80022fa:	6423      	str	r3, [r4, #64]	@ 0x40
    hi2c->XferCount   = Size;
 80022fc:	f8a4 802a 	strh.w	r8, [r4, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002300:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002302:	8523      	strh	r3, [r4, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002304:	4b87      	ldr	r3, [pc, #540]	@ (8002524 <HAL_I2C_Master_Receive+0x298>)
 8002306:	62e3      	str	r3, [r4, #44]	@ 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002308:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800230a:	680a      	ldr	r2, [r1, #0]
    hi2c->pBuffPtr    = pData;
 800230c:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002310:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002314:	2b08      	cmp	r3, #8
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002316:	600a      	str	r2, [r1, #0]
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002318:	d004      	beq.n	8002324 <HAL_I2C_Master_Receive+0x98>
 800231a:	2b01      	cmp	r3, #1
 800231c:	d002      	beq.n	8002324 <HAL_I2C_Master_Receive+0x98>
 800231e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002322:	d104      	bne.n	800232e <HAL_I2C_Master_Receive+0xa2>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002324:	680b      	ldr	r3, [r1, #0]
 8002326:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800232a:	600b      	str	r3, [r1, #0]
 800232c:	e002      	b.n	8002334 <HAL_I2C_Master_Receive+0xa8>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800232e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8002330:	2b11      	cmp	r3, #17
 8002332:	d0f7      	beq.n	8002324 <HAL_I2C_Master_Receive+0x98>
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002334:	463b      	mov	r3, r7
 8002336:	9500      	str	r5, [sp, #0]
 8002338:	2200      	movs	r2, #0
 800233a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800233e:	4620      	mov	r0, r4
 8002340:	f7ff fd18 	bl	8001d74 <I2C_WaitOnFlagUntilTimeout>
 8002344:	6823      	ldr	r3, [r4, #0]
 8002346:	b138      	cbz	r0, 8002358 <HAL_I2C_Master_Receive+0xcc>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002348:	681b      	ldr	r3, [r3, #0]
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800234a:	05dd      	lsls	r5, r3, #23
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800234c:	bf44      	itt	mi
 800234e:	f44f 7300 	movmi.w	r3, #512	@ 0x200
 8002352:	6423      	strmi	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 8002354:	2601      	movs	r6, #1
 8002356:	e7a9      	b.n	80022ac <HAL_I2C_Master_Receive+0x20>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002358:	6922      	ldr	r2, [r4, #16]
 800235a:	f5b2 4f80 	cmp.w	r2, #16384	@ 0x4000
 800235e:	d127      	bne.n	80023b0 <HAL_I2C_Master_Receive+0x124>
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002360:	f046 0601 	orr.w	r6, r6, #1
 8002364:	b2f6      	uxtb	r6, r6
 8002366:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002368:	496f      	ldr	r1, [pc, #444]	@ (8002528 <HAL_I2C_Master_Receive+0x29c>)
 800236a:	462b      	mov	r3, r5
 800236c:	463a      	mov	r2, r7
 800236e:	4620      	mov	r0, r4
 8002370:	f7ff fd40 	bl	8001df4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002374:	4606      	mov	r6, r0
 8002376:	2800      	cmp	r0, #0
 8002378:	d1ec      	bne.n	8002354 <HAL_I2C_Master_Receive+0xc8>
    if (hi2c->XferSize == 0U)
 800237a:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800237c:	6821      	ldr	r1, [r4, #0]
    if (hi2c->XferSize == 0U)
 800237e:	2b00      	cmp	r3, #0
 8002380:	d14b      	bne.n	800241a <HAL_I2C_Master_Receive+0x18e>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002382:	9003      	str	r0, [sp, #12]
 8002384:	694b      	ldr	r3, [r1, #20]
 8002386:	9303      	str	r3, [sp, #12]
 8002388:	698b      	ldr	r3, [r1, #24]
 800238a:	9303      	str	r3, [sp, #12]
 800238c:	9b03      	ldr	r3, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800238e:	680b      	ldr	r3, [r1, #0]
 8002390:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002394:	600b      	str	r3, [r1, #0]
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002396:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8002530 <HAL_I2C_Master_Receive+0x2a4>
    while (hi2c->XferSize > 0U)
 800239a:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 800239c:	2b00      	cmp	r3, #0
 800239e:	d164      	bne.n	800246a <HAL_I2C_Master_Receive+0x1de>
    hi2c->State = HAL_I2C_STATE_READY;
 80023a0:	2220      	movs	r2, #32
 80023a2:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
    __HAL_UNLOCK(hi2c);
 80023a6:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80023aa:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    return HAL_OK;
 80023ae:	e77d      	b.n	80022ac <HAL_I2C_Master_Receive+0x20>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80023b0:	ea4f 18e6 	mov.w	r8, r6, asr #7
 80023b4:	f008 0806 	and.w	r8, r8, #6
 80023b8:	f048 02f0 	orr.w	r2, r8, #240	@ 0xf0
 80023bc:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80023be:	495b      	ldr	r1, [pc, #364]	@ (800252c <HAL_I2C_Master_Receive+0x2a0>)
 80023c0:	462b      	mov	r3, r5
 80023c2:	463a      	mov	r2, r7
 80023c4:	4620      	mov	r0, r4
 80023c6:	f7ff fd15 	bl	8001df4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80023ca:	2800      	cmp	r0, #0
 80023cc:	d1c2      	bne.n	8002354 <HAL_I2C_Master_Receive+0xc8>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80023ce:	6823      	ldr	r3, [r4, #0]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80023d0:	4955      	ldr	r1, [pc, #340]	@ (8002528 <HAL_I2C_Master_Receive+0x29c>)
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80023d2:	b2f6      	uxtb	r6, r6
 80023d4:	611e      	str	r6, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80023d6:	463a      	mov	r2, r7
 80023d8:	462b      	mov	r3, r5
 80023da:	4620      	mov	r0, r4
 80023dc:	f7ff fd0a 	bl	8001df4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80023e0:	4602      	mov	r2, r0
 80023e2:	2800      	cmp	r0, #0
 80023e4:	d1b6      	bne.n	8002354 <HAL_I2C_Master_Receive+0xc8>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023e6:	6823      	ldr	r3, [r4, #0]
 80023e8:	9007      	str	r0, [sp, #28]
 80023ea:	6959      	ldr	r1, [r3, #20]
 80023ec:	9107      	str	r1, [sp, #28]
 80023ee:	6999      	ldr	r1, [r3, #24]
 80023f0:	9107      	str	r1, [sp, #28]
 80023f2:	9907      	ldr	r1, [sp, #28]
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80023f4:	6819      	ldr	r1, [r3, #0]
 80023f6:	f441 7180 	orr.w	r1, r1, #256	@ 0x100
 80023fa:	6019      	str	r1, [r3, #0]
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80023fc:	4620      	mov	r0, r4
 80023fe:	9500      	str	r5, [sp, #0]
 8002400:	463b      	mov	r3, r7
 8002402:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002406:	f7ff fcb5 	bl	8001d74 <I2C_WaitOnFlagUntilTimeout>
 800240a:	6822      	ldr	r2, [r4, #0]
 800240c:	b108      	cbz	r0, 8002412 <HAL_I2C_Master_Receive+0x186>
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800240e:	6813      	ldr	r3, [r2, #0]
 8002410:	e79b      	b.n	800234a <HAL_I2C_Master_Receive+0xbe>
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002412:	f048 03f1 	orr.w	r3, r8, #241	@ 0xf1
 8002416:	6113      	str	r3, [r2, #16]
 8002418:	e7a6      	b.n	8002368 <HAL_I2C_Master_Receive+0xdc>
    else if (hi2c->XferSize == 1U)
 800241a:	2b01      	cmp	r3, #1
 800241c:	d10a      	bne.n	8002434 <HAL_I2C_Master_Receive+0x1a8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800241e:	680b      	ldr	r3, [r1, #0]
 8002420:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002424:	600b      	str	r3, [r1, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002426:	9004      	str	r0, [sp, #16]
 8002428:	694b      	ldr	r3, [r1, #20]
 800242a:	9304      	str	r3, [sp, #16]
 800242c:	698b      	ldr	r3, [r1, #24]
 800242e:	9304      	str	r3, [sp, #16]
 8002430:	9b04      	ldr	r3, [sp, #16]
 8002432:	e7ac      	b.n	800238e <HAL_I2C_Master_Receive+0x102>
    else if (hi2c->XferSize == 2U)
 8002434:	2b02      	cmp	r3, #2
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002436:	680b      	ldr	r3, [r1, #0]
    else if (hi2c->XferSize == 2U)
 8002438:	d10d      	bne.n	8002456 <HAL_I2C_Master_Receive+0x1ca>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800243a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800243e:	600b      	str	r3, [r1, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002440:	680b      	ldr	r3, [r1, #0]
 8002442:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002446:	600b      	str	r3, [r1, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002448:	9005      	str	r0, [sp, #20]
 800244a:	694b      	ldr	r3, [r1, #20]
 800244c:	9305      	str	r3, [sp, #20]
 800244e:	698b      	ldr	r3, [r1, #24]
 8002450:	9305      	str	r3, [sp, #20]
 8002452:	9b05      	ldr	r3, [sp, #20]
 8002454:	e79f      	b.n	8002396 <HAL_I2C_Master_Receive+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002456:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800245a:	600b      	str	r3, [r1, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800245c:	9006      	str	r0, [sp, #24]
 800245e:	694b      	ldr	r3, [r1, #20]
 8002460:	9306      	str	r3, [sp, #24]
 8002462:	698b      	ldr	r3, [r1, #24]
 8002464:	9306      	str	r3, [sp, #24]
 8002466:	9b06      	ldr	r3, [sp, #24]
 8002468:	e795      	b.n	8002396 <HAL_I2C_Master_Receive+0x10a>
      if (hi2c->XferSize <= 3U)
 800246a:	2b03      	cmp	r3, #3
 800246c:	d862      	bhi.n	8002534 <HAL_I2C_Master_Receive+0x2a8>
        if (hi2c->XferSize == 1U)
 800246e:	2b01      	cmp	r3, #1
 8002470:	d116      	bne.n	80024a0 <HAL_I2C_Master_Receive+0x214>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002472:	462a      	mov	r2, r5
 8002474:	4639      	mov	r1, r7
 8002476:	4620      	mov	r0, r4
 8002478:	f7ff fd52 	bl	8001f20 <I2C_WaitOnRXNEFlagUntilTimeout>
 800247c:	2800      	cmp	r0, #0
 800247e:	f47f af69 	bne.w	8002354 <HAL_I2C_Master_Receive+0xc8>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002482:	6823      	ldr	r3, [r4, #0]
 8002484:	691a      	ldr	r2, [r3, #16]
 8002486:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002488:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 800248a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800248c:	3301      	adds	r3, #1
 800248e:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 8002490:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8002492:	3b01      	subs	r3, #1
 8002494:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 8002496:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002498:	3b01      	subs	r3, #1
 800249a:	b29b      	uxth	r3, r3
 800249c:	8563      	strh	r3, [r4, #42]	@ 0x2a
 800249e:	e77c      	b.n	800239a <HAL_I2C_Master_Receive+0x10e>
        else if (hi2c->XferSize == 2U)
 80024a0:	2b02      	cmp	r3, #2
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80024a2:	9500      	str	r5, [sp, #0]
 80024a4:	463b      	mov	r3, r7
 80024a6:	f04f 0200 	mov.w	r2, #0
 80024aa:	4641      	mov	r1, r8
 80024ac:	4620      	mov	r0, r4
        else if (hi2c->XferSize == 2U)
 80024ae:	d11a      	bne.n	80024e6 <HAL_I2C_Master_Receive+0x25a>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80024b0:	f7ff fc60 	bl	8001d74 <I2C_WaitOnFlagUntilTimeout>
 80024b4:	2800      	cmp	r0, #0
 80024b6:	f47f af4d 	bne.w	8002354 <HAL_I2C_Master_Receive+0xc8>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024ba:	6823      	ldr	r3, [r4, #0]
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80024c2:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024c4:	691a      	ldr	r2, [r3, #16]
 80024c6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80024c8:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80024ca:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80024cc:	1c53      	adds	r3, r2, #1
 80024ce:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 80024d0:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 80024d2:	3b01      	subs	r3, #1
 80024d4:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 80024d6:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80024d8:	3b01      	subs	r3, #1
 80024da:	b29b      	uxth	r3, r3
 80024dc:	8563      	strh	r3, [r4, #42]	@ 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024de:	6823      	ldr	r3, [r4, #0]
 80024e0:	691b      	ldr	r3, [r3, #16]
 80024e2:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 80024e4:	e7d1      	b.n	800248a <HAL_I2C_Master_Receive+0x1fe>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80024e6:	f7ff fc45 	bl	8001d74 <I2C_WaitOnFlagUntilTimeout>
 80024ea:	4602      	mov	r2, r0
 80024ec:	2800      	cmp	r0, #0
 80024ee:	f47f af31 	bne.w	8002354 <HAL_I2C_Master_Receive+0xc8>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024f2:	6823      	ldr	r3, [r4, #0]
 80024f4:	6819      	ldr	r1, [r3, #0]
 80024f6:	f421 6180 	bic.w	r1, r1, #1024	@ 0x400
 80024fa:	6019      	str	r1, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024fc:	6919      	ldr	r1, [r3, #16]
 80024fe:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002500:	7019      	strb	r1, [r3, #0]
          hi2c->pBuffPtr++;
 8002502:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002504:	3301      	adds	r3, #1
 8002506:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 8002508:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 800250a:	3b01      	subs	r3, #1
 800250c:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 800250e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002510:	3b01      	subs	r3, #1
 8002512:	b29b      	uxth	r3, r3
 8002514:	8563      	strh	r3, [r4, #42]	@ 0x2a
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002516:	4641      	mov	r1, r8
 8002518:	9500      	str	r5, [sp, #0]
 800251a:	463b      	mov	r3, r7
 800251c:	4620      	mov	r0, r4
 800251e:	e7c7      	b.n	80024b0 <HAL_I2C_Master_Receive+0x224>
 8002520:	00100002 	.word	0x00100002
 8002524:	ffff0000 	.word	0xffff0000
 8002528:	00010002 	.word	0x00010002
 800252c:	00010008 	.word	0x00010008
 8002530:	00010004 	.word	0x00010004
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002534:	462a      	mov	r2, r5
 8002536:	4639      	mov	r1, r7
 8002538:	4620      	mov	r0, r4
 800253a:	f7ff fcf1 	bl	8001f20 <I2C_WaitOnRXNEFlagUntilTimeout>
 800253e:	2800      	cmp	r0, #0
 8002540:	f47f af08 	bne.w	8002354 <HAL_I2C_Master_Receive+0xc8>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002544:	6823      	ldr	r3, [r4, #0]
 8002546:	691a      	ldr	r2, [r3, #16]
 8002548:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800254a:	701a      	strb	r2, [r3, #0]
        hi2c->XferCount--;
 800254c:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
        hi2c->pBuffPtr++;
 800254e:	6a61      	ldr	r1, [r4, #36]	@ 0x24
        hi2c->XferCount--;
 8002550:	3a01      	subs	r2, #1
 8002552:	b292      	uxth	r2, r2
        hi2c->pBuffPtr++;
 8002554:	1c4b      	adds	r3, r1, #1
        hi2c->XferCount--;
 8002556:	8562      	strh	r2, [r4, #42]	@ 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002558:	6822      	ldr	r2, [r4, #0]
        hi2c->pBuffPtr++;
 800255a:	6263      	str	r3, [r4, #36]	@ 0x24
        hi2c->XferSize--;
 800255c:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800255e:	6950      	ldr	r0, [r2, #20]
        hi2c->XferSize--;
 8002560:	3b01      	subs	r3, #1
 8002562:	b29b      	uxth	r3, r3
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002564:	0740      	lsls	r0, r0, #29
        hi2c->XferSize--;
 8002566:	8523      	strh	r3, [r4, #40]	@ 0x28
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002568:	f57f af17 	bpl.w	800239a <HAL_I2C_Master_Receive+0x10e>
          if (hi2c->XferSize == 3U)
 800256c:	2b03      	cmp	r3, #3
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800256e:	bf02      	ittt	eq
 8002570:	6813      	ldreq	r3, [r2, #0]
 8002572:	f423 6380 	biceq.w	r3, r3, #1024	@ 0x400
 8002576:	6013      	streq	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002578:	6913      	ldr	r3, [r2, #16]
 800257a:	704b      	strb	r3, [r1, #1]
 800257c:	e785      	b.n	800248a <HAL_I2C_Master_Receive+0x1fe>
 800257e:	bf00      	nop

08002580 <HAL_I2C_MasterTxCpltCallback>:
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
 8002580:	4770      	bx	lr

08002582 <HAL_I2C_MasterRxCpltCallback>:
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
 8002582:	4770      	bx	lr

08002584 <HAL_I2C_SlaveTxCpltCallback>:
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
 8002584:	4770      	bx	lr

08002586 <HAL_I2C_SlaveRxCpltCallback>:
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
 8002586:	4770      	bx	lr

08002588 <HAL_I2C_AddrCallback>:
}
 8002588:	4770      	bx	lr

0800258a <HAL_I2C_ListenCpltCallback>:
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
 800258a:	4770      	bx	lr

0800258c <HAL_I2C_MemTxCpltCallback>:
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
 800258c:	4770      	bx	lr

0800258e <I2C_MemoryTransmit_TXE_BTF>:
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800258e:	f890 203d 	ldrb.w	r2, [r0, #61]	@ 0x3d
{
 8002592:	b508      	push	{r3, lr}
  if (hi2c->EventCount == 0U)
 8002594:	6d03      	ldr	r3, [r0, #80]	@ 0x50
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002596:	b2d2      	uxtb	r2, r2
  if (hi2c->EventCount == 0U)
 8002598:	b983      	cbnz	r3, 80025bc <I2C_MemoryTransmit_TXE_BTF+0x2e>
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800259a:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800259c:	6802      	ldr	r2, [r0, #0]
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800259e:	2b01      	cmp	r3, #1
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80025a0:	6c83      	ldr	r3, [r0, #72]	@ 0x48
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80025a2:	d105      	bne.n	80025b0 <I2C_MemoryTransmit_TXE_BTF+0x22>
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	6113      	str	r3, [r2, #16]
      hi2c->EventCount += 2U;
 80025a8:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 80025aa:	3302      	adds	r3, #2
      hi2c->EventCount++;
 80025ac:	6503      	str	r3, [r0, #80]	@ 0x50
}
 80025ae:	bd08      	pop	{r3, pc}
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80025b0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80025b4:	6113      	str	r3, [r2, #16]
      hi2c->EventCount++;
 80025b6:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 80025b8:	3301      	adds	r3, #1
 80025ba:	e7f7      	b.n	80025ac <I2C_MemoryTransmit_TXE_BTF+0x1e>
  else if (hi2c->EventCount == 1U)
 80025bc:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d103      	bne.n	80025ca <I2C_MemoryTransmit_TXE_BTF+0x3c>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80025c2:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 80025c4:	6802      	ldr	r2, [r0, #0]
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	e7f4      	b.n	80025b4 <I2C_MemoryTransmit_TXE_BTF+0x26>
  else if (hi2c->EventCount == 2U)
 80025ca:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 80025cc:	2b02      	cmp	r3, #2
 80025ce:	d12f      	bne.n	8002630 <I2C_MemoryTransmit_TXE_BTF+0xa2>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80025d0:	2a22      	cmp	r2, #34	@ 0x22
 80025d2:	d105      	bne.n	80025e0 <I2C_MemoryTransmit_TXE_BTF+0x52>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80025d4:	6802      	ldr	r2, [r0, #0]
 80025d6:	6813      	ldr	r3, [r2, #0]
 80025d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025dc:	6013      	str	r3, [r2, #0]
      hi2c->EventCount++;
 80025de:	e7ea      	b.n	80025b6 <I2C_MemoryTransmit_TXE_BTF+0x28>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80025e0:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 80025e2:	b29b      	uxth	r3, r3
 80025e4:	b163      	cbz	r3, 8002600 <I2C_MemoryTransmit_TXE_BTF+0x72>
 80025e6:	2a21      	cmp	r2, #33	@ 0x21
 80025e8:	d10a      	bne.n	8002600 <I2C_MemoryTransmit_TXE_BTF+0x72>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80025ea:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80025ec:	6802      	ldr	r2, [r0, #0]
 80025ee:	f813 1b01 	ldrb.w	r1, [r3], #1
 80025f2:	6111      	str	r1, [r2, #16]
      hi2c->pBuffPtr++;
 80025f4:	6243      	str	r3, [r0, #36]	@ 0x24
      hi2c->XferCount--;
 80025f6:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 80025f8:	3b01      	subs	r3, #1
 80025fa:	b29b      	uxth	r3, r3
 80025fc:	8543      	strh	r3, [r0, #42]	@ 0x2a
 80025fe:	e7d6      	b.n	80025ae <I2C_MemoryTransmit_TXE_BTF+0x20>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002600:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 8002602:	b29b      	uxth	r3, r3
 8002604:	2b00      	cmp	r3, #0
 8002606:	d1d2      	bne.n	80025ae <I2C_MemoryTransmit_TXE_BTF+0x20>
 8002608:	2a21      	cmp	r2, #33	@ 0x21
 800260a:	d1d0      	bne.n	80025ae <I2C_MemoryTransmit_TXE_BTF+0x20>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800260c:	6802      	ldr	r2, [r0, #0]
 800260e:	6851      	ldr	r1, [r2, #4]
 8002610:	f421 61e0 	bic.w	r1, r1, #1792	@ 0x700
 8002614:	6051      	str	r1, [r2, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002616:	6811      	ldr	r1, [r2, #0]
 8002618:	f441 7100 	orr.w	r1, r1, #512	@ 0x200
 800261c:	6011      	str	r1, [r2, #0]
      hi2c->State = HAL_I2C_STATE_READY;
 800261e:	2220      	movs	r2, #32
      hi2c->PreviousState = I2C_STATE_NONE;
 8002620:	6303      	str	r3, [r0, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002622:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002626:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800262a:	f7ff ffaf 	bl	800258c <HAL_I2C_MemTxCpltCallback>
 800262e:	e7be      	b.n	80025ae <I2C_MemoryTransmit_TXE_BTF+0x20>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8002630:	6803      	ldr	r3, [r0, #0]
 8002632:	695a      	ldr	r2, [r3, #20]
 8002634:	0612      	lsls	r2, r2, #24
    hi2c->Instance->DR = 0x00U;
 8002636:	bf44      	itt	mi
 8002638:	2200      	movmi	r2, #0
 800263a:	611a      	strmi	r2, [r3, #16]
}
 800263c:	e7b7      	b.n	80025ae <I2C_MemoryTransmit_TXE_BTF+0x20>

0800263e <HAL_I2C_MemRxCpltCallback>:
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
 800263e:	4770      	bx	lr

08002640 <HAL_I2C_ErrorCallback>:
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
 8002640:	4770      	bx	lr

08002642 <HAL_I2C_AbortCpltCallback>:
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
 8002642:	4770      	bx	lr

08002644 <I2C_DMAAbort>:
{
 8002644:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __IO uint32_t count = 0U;
 8002646:	2300      	movs	r3, #0
 8002648:	9301      	str	r3, [sp, #4]
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800264a:	4b2d      	ldr	r3, [pc, #180]	@ (8002700 <I2C_DMAAbort+0xbc>)
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800264c:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800264e:	681b      	ldr	r3, [r3, #0]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002650:	f890 203d 	ldrb.w	r2, [r0, #61]	@ 0x3d
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002654:	f246 11a8 	movw	r1, #25000	@ 0x61a8
 8002658:	fbb3 f3f1 	udiv	r3, r3, r1
 800265c:	2123      	movs	r1, #35	@ 0x23
 800265e:	434b      	muls	r3, r1
 8002660:	9301      	str	r3, [sp, #4]
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8002662:	6803      	ldr	r3, [r0, #0]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002664:	b2d2      	uxtb	r2, r2
    if (count == 0U)
 8002666:	9901      	ldr	r1, [sp, #4]
 8002668:	bb41      	cbnz	r1, 80026bc <I2C_DMAAbort+0x78>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800266a:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 800266c:	f041 0120 	orr.w	r1, r1, #32
 8002670:	6401      	str	r1, [r0, #64]	@ 0x40
  if (hi2c->hdmatx != NULL)
 8002672:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 8002674:	b10c      	cbz	r4, 800267a <I2C_DMAAbort+0x36>
    hi2c->hdmatx->XferCpltCallback = NULL;
 8002676:	2100      	movs	r1, #0
 8002678:	63e1      	str	r1, [r4, #60]	@ 0x3c
  if (hi2c->hdmarx != NULL)
 800267a:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 800267c:	b109      	cbz	r1, 8002682 <I2C_DMAAbort+0x3e>
    hi2c->hdmarx->XferCpltCallback = NULL;
 800267e:	2500      	movs	r5, #0
 8002680:	63cd      	str	r5, [r1, #60]	@ 0x3c
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002682:	681d      	ldr	r5, [r3, #0]
 8002684:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 8002688:	601d      	str	r5, [r3, #0]
  hi2c->XferCount = 0U;
 800268a:	2500      	movs	r5, #0
 800268c:	8545      	strh	r5, [r0, #42]	@ 0x2a
  if (hi2c->hdmatx != NULL)
 800268e:	b104      	cbz	r4, 8002692 <I2C_DMAAbort+0x4e>
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002690:	6525      	str	r5, [r4, #80]	@ 0x50
  if (hi2c->hdmarx != NULL)
 8002692:	b101      	cbz	r1, 8002696 <I2C_DMAAbort+0x52>
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002694:	650d      	str	r5, [r1, #80]	@ 0x50
  __HAL_I2C_DISABLE(hi2c);
 8002696:	6819      	ldr	r1, [r3, #0]
 8002698:	f021 0101 	bic.w	r1, r1, #1
 800269c:	6019      	str	r1, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800269e:	f890 103d 	ldrb.w	r1, [r0, #61]	@ 0x3d
 80026a2:	2960      	cmp	r1, #96	@ 0x60
 80026a4:	d111      	bne.n	80026ca <I2C_DMAAbort+0x86>
    hi2c->State         = HAL_I2C_STATE_READY;
 80026a6:	2320      	movs	r3, #32
 80026a8:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80026ac:	2300      	movs	r3, #0
 80026ae:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80026b2:	6403      	str	r3, [r0, #64]	@ 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 80026b4:	f7ff ffc5 	bl	8002642 <HAL_I2C_AbortCpltCallback>
}
 80026b8:	b003      	add	sp, #12
 80026ba:	bd30      	pop	{r4, r5, pc}
    count--;
 80026bc:	9901      	ldr	r1, [sp, #4]
 80026be:	3901      	subs	r1, #1
 80026c0:	9101      	str	r1, [sp, #4]
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80026c2:	6819      	ldr	r1, [r3, #0]
 80026c4:	0589      	lsls	r1, r1, #22
 80026c6:	d4ce      	bmi.n	8002666 <I2C_DMAAbort+0x22>
 80026c8:	e7d3      	b.n	8002672 <I2C_DMAAbort+0x2e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80026ca:	f002 0228 	and.w	r2, r2, #40	@ 0x28
 80026ce:	2a28      	cmp	r2, #40	@ 0x28
 80026d0:	d10e      	bne.n	80026f0 <I2C_DMAAbort+0xac>
      __HAL_I2C_ENABLE(hi2c);
 80026d2:	6819      	ldr	r1, [r3, #0]
 80026d4:	f041 0101 	orr.w	r1, r1, #1
 80026d8:	6019      	str	r1, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026da:	6819      	ldr	r1, [r3, #0]
 80026dc:	f441 6180 	orr.w	r1, r1, #1024	@ 0x400
 80026e0:	6019      	str	r1, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80026e2:	2300      	movs	r3, #0
 80026e4:	6303      	str	r3, [r0, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80026e6:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d
    HAL_I2C_ErrorCallback(hi2c);
 80026ea:	f7ff ffa9 	bl	8002640 <HAL_I2C_ErrorCallback>
}
 80026ee:	e7e3      	b.n	80026b8 <I2C_DMAAbort+0x74>
      hi2c->State = HAL_I2C_STATE_READY;
 80026f0:	2320      	movs	r3, #32
 80026f2:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80026f6:	2300      	movs	r3, #0
 80026f8:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
 80026fc:	e7f5      	b.n	80026ea <I2C_DMAAbort+0xa6>
 80026fe:	bf00      	nop
 8002700:	20000004 	.word	0x20000004

08002704 <I2C_ITError>:
{
 8002704:	b510      	push	{r4, lr}
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002706:	f890 203d 	ldrb.w	r2, [r0, #61]	@ 0x3d
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800270a:	f890 303e 	ldrb.w	r3, [r0, #62]	@ 0x3e
  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800270e:	2b10      	cmp	r3, #16
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8002710:	b2d9      	uxtb	r1, r3
{
 8002712:	4604      	mov	r4, r0
 8002714:	6803      	ldr	r3, [r0, #0]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002716:	b2d2      	uxtb	r2, r2
  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002718:	d001      	beq.n	800271e <I2C_ITError+0x1a>
 800271a:	2940      	cmp	r1, #64	@ 0x40
 800271c:	d113      	bne.n	8002746 <I2C_ITError+0x42>
 800271e:	2a22      	cmp	r2, #34	@ 0x22
 8002720:	d111      	bne.n	8002746 <I2C_ITError+0x42>
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8002722:	6819      	ldr	r1, [r3, #0]
 8002724:	f421 6100 	bic.w	r1, r1, #2048	@ 0x800
 8002728:	6019      	str	r1, [r3, #0]
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800272a:	6859      	ldr	r1, [r3, #4]
 800272c:	f411 6100 	ands.w	r1, r1, #2048	@ 0x800
 8002730:	d106      	bne.n	8002740 <I2C_ITError+0x3c>
 8002732:	2a60      	cmp	r2, #96	@ 0x60
      hi2c->State = HAL_I2C_STATE_READY;
 8002734:	bf1e      	ittt	ne
 8002736:	2220      	movne	r2, #32
 8002738:	f884 203d 	strbne.w	r2, [r4, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800273c:	f884 103e 	strbne.w	r1, [r4, #62]	@ 0x3e
    hi2c->PreviousState = I2C_STATE_NONE;
 8002740:	2200      	movs	r2, #0
 8002742:	6322      	str	r2, [r4, #48]	@ 0x30
 8002744:	e007      	b.n	8002756 <I2C_ITError+0x52>
  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002746:	f002 0128 	and.w	r1, r2, #40	@ 0x28
 800274a:	2928      	cmp	r1, #40	@ 0x28
 800274c:	d1ed      	bne.n	800272a <I2C_ITError+0x26>
    hi2c->PreviousState = I2C_STATE_NONE;
 800274e:	2200      	movs	r2, #0
 8002750:	6322      	str	r2, [r4, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8002752:	f884 103d 	strb.w	r1, [r4, #61]	@ 0x3d
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002756:	685a      	ldr	r2, [r3, #4]
 8002758:	f412 6200 	ands.w	r2, r2, #2048	@ 0x800
 800275c:	d04f      	beq.n	80027fe <I2C_ITError+0xfa>
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800275e:	685a      	ldr	r2, [r3, #4]
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8002760:	6b60      	ldr	r0, [r4, #52]	@ 0x34
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8002762:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002766:	605a      	str	r2, [r3, #4]
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8002768:	f890 3035 	ldrb.w	r3, [r0, #53]	@ 0x35
 800276c:	2b01      	cmp	r3, #1
 800276e:	4b37      	ldr	r3, [pc, #220]	@ (800284c <I2C_ITError+0x148>)
 8002770:	d02b      	beq.n	80027ca <I2C_ITError+0xc6>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002772:	6503      	str	r3, [r0, #80]	@ 0x50
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002774:	f7ff f9dc 	bl	8001b30 <HAL_DMA_Abort_IT>
 8002778:	b150      	cbz	r0, 8002790 <I2C_ITError+0x8c>
        __HAL_I2C_DISABLE(hi2c);
 800277a:	6822      	ldr	r2, [r4, #0]
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800277c:	6b60      	ldr	r0, [r4, #52]	@ 0x34
        __HAL_I2C_DISABLE(hi2c);
 800277e:	6813      	ldr	r3, [r2, #0]
 8002780:	f023 0301 	bic.w	r3, r3, #1
 8002784:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 8002786:	2320      	movs	r3, #32
 8002788:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800278c:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 800278e:	4798      	blx	r3
  CurrentError = hi2c->ErrorCode;
 8002790:	6c23      	ldr	r3, [r4, #64]	@ 0x40
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8002792:	0719      	lsls	r1, r3, #28
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002794:	bf1f      	itttt	ne
 8002796:	6822      	ldrne	r2, [r4, #0]
 8002798:	6853      	ldrne	r3, [r2, #4]
 800279a:	f423 63e0 	bicne.w	r3, r3, #1792	@ 0x700
 800279e:	6053      	strne	r3, [r2, #4]
  CurrentState = hi2c->State;
 80027a0:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80027a4:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80027a6:	0752      	lsls	r2, r2, #29
  CurrentState = hi2c->State;
 80027a8:	b2db      	uxtb	r3, r3
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80027aa:	d50d      	bpl.n	80027c8 <I2C_ITError+0xc4>
 80027ac:	2b28      	cmp	r3, #40	@ 0x28
 80027ae:	d10b      	bne.n	80027c8 <I2C_ITError+0xc4>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80027b0:	4b27      	ldr	r3, [pc, #156]	@ (8002850 <I2C_ITError+0x14c>)
 80027b2:	62e3      	str	r3, [r4, #44]	@ 0x2c
    hi2c->State         = HAL_I2C_STATE_READY;
 80027b4:	2220      	movs	r2, #32
    hi2c->PreviousState = I2C_STATE_NONE;
 80027b6:	2300      	movs	r3, #0
 80027b8:	6323      	str	r3, [r4, #48]	@ 0x30
    HAL_I2C_ListenCpltCallback(hi2c);
 80027ba:	4620      	mov	r0, r4
    hi2c->State         = HAL_I2C_STATE_READY;
 80027bc:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80027c0:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 80027c4:	f7ff fee1 	bl	800258a <HAL_I2C_ListenCpltCallback>
}
 80027c8:	bd10      	pop	{r4, pc}
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80027ca:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80027cc:	6503      	str	r3, [r0, #80]	@ 0x50
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80027ce:	f7ff f9af 	bl	8001b30 <HAL_DMA_Abort_IT>
 80027d2:	2800      	cmp	r0, #0
 80027d4:	d0dc      	beq.n	8002790 <I2C_ITError+0x8c>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80027d6:	6823      	ldr	r3, [r4, #0]
 80027d8:	695a      	ldr	r2, [r3, #20]
 80027da:	0651      	lsls	r1, r2, #25
 80027dc:	d505      	bpl.n	80027ea <I2C_ITError+0xe6>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027de:	691a      	ldr	r2, [r3, #16]
 80027e0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80027e2:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80027e4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80027e6:	3301      	adds	r3, #1
 80027e8:	6263      	str	r3, [r4, #36]	@ 0x24
        __HAL_I2C_DISABLE(hi2c);
 80027ea:	6822      	ldr	r2, [r4, #0]
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80027ec:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
        __HAL_I2C_DISABLE(hi2c);
 80027ee:	6813      	ldr	r3, [r2, #0]
 80027f0:	f023 0301 	bic.w	r3, r3, #1
 80027f4:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 80027f6:	2320      	movs	r3, #32
 80027f8:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80027fc:	e7c6      	b.n	800278c <I2C_ITError+0x88>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80027fe:	f894 103d 	ldrb.w	r1, [r4, #61]	@ 0x3d
 8002802:	2960      	cmp	r1, #96	@ 0x60
 8002804:	d115      	bne.n	8002832 <I2C_ITError+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8002806:	2120      	movs	r1, #32
 8002808:	f884 103d 	strb.w	r1, [r4, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800280c:	6422      	str	r2, [r4, #64]	@ 0x40
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800280e:	695a      	ldr	r2, [r3, #20]
 8002810:	0652      	lsls	r2, r2, #25
 8002812:	d505      	bpl.n	8002820 <I2C_ITError+0x11c>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002814:	691a      	ldr	r2, [r3, #16]
 8002816:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002818:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 800281a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800281c:	3301      	adds	r3, #1
 800281e:	6263      	str	r3, [r4, #36]	@ 0x24
    __HAL_I2C_DISABLE(hi2c);
 8002820:	6822      	ldr	r2, [r4, #0]
 8002822:	6813      	ldr	r3, [r2, #0]
 8002824:	f023 0301 	bic.w	r3, r3, #1
 8002828:	6013      	str	r3, [r2, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 800282a:	4620      	mov	r0, r4
 800282c:	f7ff ff09 	bl	8002642 <HAL_I2C_AbortCpltCallback>
 8002830:	e7ae      	b.n	8002790 <I2C_ITError+0x8c>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002832:	695a      	ldr	r2, [r3, #20]
 8002834:	0650      	lsls	r0, r2, #25
 8002836:	d505      	bpl.n	8002844 <I2C_ITError+0x140>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002838:	691a      	ldr	r2, [r3, #16]
 800283a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800283c:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 800283e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002840:	3301      	adds	r3, #1
 8002842:	6263      	str	r3, [r4, #36]	@ 0x24
    HAL_I2C_ErrorCallback(hi2c);
 8002844:	4620      	mov	r0, r4
 8002846:	f7ff fefb 	bl	8002640 <HAL_I2C_ErrorCallback>
 800284a:	e7a1      	b.n	8002790 <I2C_ITError+0x8c>
 800284c:	08002645 	.word	0x08002645
 8002850:	ffff0000 	.word	0xffff0000

08002854 <HAL_I2C_EV_IRQHandler>:
{
 8002854:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002856:	6803      	ldr	r3, [r0, #0]
{
 8002858:	4604      	mov	r4, r0
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800285a:	685a      	ldr	r2, [r3, #4]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800285c:	6ac6      	ldr	r6, [r0, #44]	@ 0x2c
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800285e:	f890 003e 	ldrb.w	r0, [r0, #62]	@ 0x3e
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002862:	f894 103d 	ldrb.w	r1, [r4, #61]	@ 0x3d
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002866:	2810      	cmp	r0, #16
{
 8002868:	b08f      	sub	sp, #60	@ 0x3c
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800286a:	b2c5      	uxtb	r5, r0
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800286c:	b2c9      	uxtb	r1, r1
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800286e:	d002      	beq.n	8002876 <HAL_I2C_EV_IRQHandler+0x22>
 8002870:	2d40      	cmp	r5, #64	@ 0x40
 8002872:	f040 82dd 	bne.w	8002e30 <HAL_I2C_EV_IRQHandler+0x5dc>
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002876:	699f      	ldr	r7, [r3, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002878:	6958      	ldr	r0, [r3, #20]
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800287a:	f010 0f01 	tst.w	r0, #1
 800287e:	d107      	bne.n	8002890 <HAL_I2C_EV_IRQHandler+0x3c>
 8002880:	f5b6 0f2a 	cmp.w	r6, #11141120	@ 0xaa0000
 8002884:	d002      	beq.n	800288c <HAL_I2C_EV_IRQHandler+0x38>
 8002886:	f1b6 4f2a 	cmp.w	r6, #2852126720	@ 0xaa000000
 800288a:	d151      	bne.n	8002930 <HAL_I2C_EV_IRQHandler+0xdc>
}
 800288c:	b00f      	add	sp, #60	@ 0x3c
 800288e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002890:	0596      	lsls	r6, r2, #22
 8002892:	d54d      	bpl.n	8002930 <HAL_I2C_EV_IRQHandler+0xdc>
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8002894:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8002896:	f5b2 0f2a 	cmp.w	r2, #11141120	@ 0xaa0000
 800289a:	d10c      	bne.n	80028b6 <HAL_I2C_EV_IRQHandler+0x62>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800289c:	2201      	movs	r2, #1
  /* it request implicitly to generate a restart condition    */
  /* then generate a stop condition at the end of transfer    */
  /* set XferOptions to I2C_FIRST_AND_LAST_FRAME              */
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
  {
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800289e:	62e2      	str	r2, [r4, #44]	@ 0x2c
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80028a0:	f894 203e 	ldrb.w	r2, [r4, #62]	@ 0x3e
 80028a4:	2a40      	cmp	r2, #64	@ 0x40
 80028a6:	d111      	bne.n	80028cc <HAL_I2C_EV_IRQHandler+0x78>
    if (hi2c->EventCount == 0U)
 80028a8:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 80028aa:	b952      	cbnz	r2, 80028c2 <HAL_I2C_EV_IRQHandler+0x6e>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80028ac:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 80028ae:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80028b2:	611a      	str	r2, [r3, #16]
 80028b4:	e7ea      	b.n	800288c <HAL_I2C_EV_IRQHandler+0x38>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80028b6:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80028b8:	f1b2 4f2a 	cmp.w	r2, #2852126720	@ 0xaa000000
 80028bc:	d1f0      	bne.n	80028a0 <HAL_I2C_EV_IRQHandler+0x4c>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80028be:	2208      	movs	r2, #8
 80028c0:	e7ed      	b.n	800289e <HAL_I2C_EV_IRQHandler+0x4a>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80028c2:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 80028c4:	f042 0201 	orr.w	r2, r2, #1
 80028c8:	b2d2      	uxtb	r2, r2
 80028ca:	e7f2      	b.n	80028b2 <HAL_I2C_EV_IRQHandler+0x5e>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80028cc:	6922      	ldr	r2, [r4, #16]
 80028ce:	f5b2 4f80 	cmp.w	r2, #16384	@ 0x4000
 80028d2:	d11a      	bne.n	800290a <HAL_I2C_EV_IRQHandler+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80028d4:	f894 203d 	ldrb.w	r2, [r4, #61]	@ 0x3d
 80028d8:	2a21      	cmp	r2, #33	@ 0x21
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80028da:	6c62      	ldr	r2, [r4, #68]	@ 0x44
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80028dc:	d111      	bne.n	8002902 <HAL_I2C_EV_IRQHandler+0xae>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80028de:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80028e2:	611a      	str	r2, [r3, #16]
  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80028e4:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 80028e6:	b10a      	cbz	r2, 80028ec <HAL_I2C_EV_IRQHandler+0x98>
 80028e8:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80028ea:	b92a      	cbnz	r2, 80028f8 <HAL_I2C_EV_IRQHandler+0xa4>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80028ec:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80028ee:	2a00      	cmp	r2, #0
 80028f0:	d0cc      	beq.n	800288c <HAL_I2C_EV_IRQHandler+0x38>
 80028f2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80028f4:	2a00      	cmp	r2, #0
 80028f6:	d0c9      	beq.n	800288c <HAL_I2C_EV_IRQHandler+0x38>
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80028f8:	685a      	ldr	r2, [r3, #4]
 80028fa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80028fe:	605a      	str	r2, [r3, #4]
 8002900:	e7c4      	b.n	800288c <HAL_I2C_EV_IRQHandler+0x38>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002902:	f042 0201 	orr.w	r2, r2, #1
 8002906:	b2d2      	uxtb	r2, r2
 8002908:	e7eb      	b.n	80028e2 <HAL_I2C_EV_IRQHandler+0x8e>
      if (hi2c->EventCount == 0U)
 800290a:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 800290c:	b932      	cbnz	r2, 800291c <HAL_I2C_EV_IRQHandler+0xc8>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800290e:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8002910:	11d2      	asrs	r2, r2, #7
 8002912:	f002 0206 	and.w	r2, r2, #6
 8002916:	f042 02f0 	orr.w	r2, r2, #240	@ 0xf0
 800291a:	e7ca      	b.n	80028b2 <HAL_I2C_EV_IRQHandler+0x5e>
      else if (hi2c->EventCount == 1U)
 800291c:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 800291e:	2a01      	cmp	r2, #1
 8002920:	d1b4      	bne.n	800288c <HAL_I2C_EV_IRQHandler+0x38>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8002922:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8002924:	11d2      	asrs	r2, r2, #7
 8002926:	f002 0206 	and.w	r2, r2, #6
 800292a:	f042 02f1 	orr.w	r2, r2, #241	@ 0xf1
 800292e:	e7c0      	b.n	80028b2 <HAL_I2C_EV_IRQHandler+0x5e>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002930:	0706      	lsls	r6, r0, #28
 8002932:	d503      	bpl.n	800293c <HAL_I2C_EV_IRQHandler+0xe8>
 8002934:	0596      	lsls	r6, r2, #22
 8002936:	d501      	bpl.n	800293c <HAL_I2C_EV_IRQHandler+0xe8>
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8002938:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800293a:	e7e4      	b.n	8002906 <HAL_I2C_EV_IRQHandler+0xb2>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800293c:	0786      	lsls	r6, r0, #30
 800293e:	f140 80e8 	bpl.w	8002b12 <HAL_I2C_EV_IRQHandler+0x2be>
 8002942:	0596      	lsls	r6, r2, #22
 8002944:	f140 80e5 	bpl.w	8002b12 <HAL_I2C_EV_IRQHandler+0x2be>
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8002948:	f894 103e 	ldrb.w	r1, [r4, #62]	@ 0x3e
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800294c:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
  uint32_t Prev_State                   = hi2c->PreviousState;
 800294e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002950:	f894 003d 	ldrb.w	r0, [r4, #61]	@ 0x3d
 8002954:	2822      	cmp	r0, #34	@ 0x22
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8002956:	b2c9      	uxtb	r1, r1
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002958:	f040 80d3 	bne.w	8002b02 <HAL_I2C_EV_IRQHandler+0x2ae>
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800295c:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 800295e:	b940      	cbnz	r0, 8002972 <HAL_I2C_EV_IRQHandler+0x11e>
 8002960:	2940      	cmp	r1, #64	@ 0x40
 8002962:	d106      	bne.n	8002972 <HAL_I2C_EV_IRQHandler+0x11e>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002964:	9001      	str	r0, [sp, #4]
 8002966:	695a      	ldr	r2, [r3, #20]
 8002968:	9201      	str	r2, [sp, #4]
 800296a:	699b      	ldr	r3, [r3, #24]
 800296c:	9301      	str	r3, [sp, #4]
 800296e:	9b01      	ldr	r3, [sp, #4]
 8002970:	e78c      	b.n	800288c <HAL_I2C_EV_IRQHandler+0x38>
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8002972:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 8002974:	b989      	cbnz	r1, 800299a <HAL_I2C_EV_IRQHandler+0x146>
 8002976:	6920      	ldr	r0, [r4, #16]
 8002978:	f5b0 4f40 	cmp.w	r0, #49152	@ 0xc000
 800297c:	d10d      	bne.n	800299a <HAL_I2C_EV_IRQHandler+0x146>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800297e:	9102      	str	r1, [sp, #8]
 8002980:	695a      	ldr	r2, [r3, #20]
 8002982:	9202      	str	r2, [sp, #8]
 8002984:	699a      	ldr	r2, [r3, #24]
 8002986:	9202      	str	r2, [sp, #8]
 8002988:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002990:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8002992:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8002994:	3301      	adds	r3, #1
      hi2c->EventCount = 0U;
 8002996:	6523      	str	r3, [r4, #80]	@ 0x50
 8002998:	e778      	b.n	800288c <HAL_I2C_EV_IRQHandler+0x38>
      if (hi2c->XferCount == 0U)
 800299a:	8d61      	ldrh	r1, [r4, #42]	@ 0x2a
 800299c:	b289      	uxth	r1, r1
 800299e:	b951      	cbnz	r1, 80029b6 <HAL_I2C_EV_IRQHandler+0x162>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029a0:	9103      	str	r1, [sp, #12]
 80029a2:	695a      	ldr	r2, [r3, #20]
 80029a4:	9203      	str	r2, [sp, #12]
 80029a6:	699a      	ldr	r2, [r3, #24]
 80029a8:	9203      	str	r2, [sp, #12]
 80029aa:	9a03      	ldr	r2, [sp, #12]
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80029b2:	601a      	str	r2, [r3, #0]
 80029b4:	e019      	b.n	80029ea <HAL_I2C_EV_IRQHandler+0x196>
      else if (hi2c->XferCount == 1U)
 80029b6:	8d61      	ldrh	r1, [r4, #42]	@ 0x2a
 80029b8:	b289      	uxth	r1, r1
 80029ba:	2901      	cmp	r1, #1
 80029bc:	d149      	bne.n	8002a52 <HAL_I2C_EV_IRQHandler+0x1fe>
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80029be:	f512 3f80 	cmn.w	r2, #65536	@ 0x10000
 80029c2:	d11b      	bne.n	80029fc <HAL_I2C_EV_IRQHandler+0x1a8>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80029ca:	601a      	str	r2, [r3, #0]
          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80029cc:	685a      	ldr	r2, [r3, #4]
 80029ce:	f412 6200 	ands.w	r2, r2, #2048	@ 0x800
 80029d2:	d00c      	beq.n	80029ee <HAL_I2C_EV_IRQHandler+0x19a>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80029da:	601a      	str	r2, [r3, #0]
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029dc:	2200      	movs	r2, #0
 80029de:	9204      	str	r2, [sp, #16]
 80029e0:	695a      	ldr	r2, [r3, #20]
 80029e2:	9204      	str	r2, [sp, #16]
 80029e4:	699b      	ldr	r3, [r3, #24]
 80029e6:	9304      	str	r3, [sp, #16]
 80029e8:	9b04      	ldr	r3, [sp, #16]
      hi2c->EventCount = 0U;
 80029ea:	2300      	movs	r3, #0
 80029ec:	e7d3      	b.n	8002996 <HAL_I2C_EV_IRQHandler+0x142>
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029ee:	9205      	str	r2, [sp, #20]
 80029f0:	695a      	ldr	r2, [r3, #20]
 80029f2:	9205      	str	r2, [sp, #20]
 80029f4:	699a      	ldr	r2, [r3, #24]
 80029f6:	9205      	str	r2, [sp, #20]
 80029f8:	9a05      	ldr	r2, [sp, #20]
 80029fa:	e7d7      	b.n	80029ac <HAL_I2C_EV_IRQHandler+0x158>
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80029fc:	2a08      	cmp	r2, #8
 80029fe:	d01c      	beq.n	8002a3a <HAL_I2C_EV_IRQHandler+0x1e6>
 8002a00:	2a20      	cmp	r2, #32
 8002a02:	d01a      	beq.n	8002a3a <HAL_I2C_EV_IRQHandler+0x1e6>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8002a04:	2d12      	cmp	r5, #18
 8002a06:	d10d      	bne.n	8002a24 <HAL_I2C_EV_IRQHandler+0x1d0>
 8002a08:	2a01      	cmp	r2, #1
 8002a0a:	d116      	bne.n	8002a3a <HAL_I2C_EV_IRQHandler+0x1e6>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a12:	601a      	str	r2, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a14:	2200      	movs	r2, #0
 8002a16:	9206      	str	r2, [sp, #24]
 8002a18:	695a      	ldr	r2, [r3, #20]
 8002a1a:	9206      	str	r2, [sp, #24]
 8002a1c:	699b      	ldr	r3, [r3, #24]
 8002a1e:	9306      	str	r3, [sp, #24]
 8002a20:	9b06      	ldr	r3, [sp, #24]
 8002a22:	e7e2      	b.n	80029ea <HAL_I2C_EV_IRQHandler+0x196>
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002a24:	2a10      	cmp	r2, #16
 8002a26:	d8f1      	bhi.n	8002a0c <HAL_I2C_EV_IRQHandler+0x1b8>
 8002a28:	4982      	ldr	r1, [pc, #520]	@ (8002c34 <HAL_I2C_EV_IRQHandler+0x3e0>)
 8002a2a:	fa41 f202 	asr.w	r2, r1, r2
 8002a2e:	07d7      	lsls	r7, r2, #31
 8002a30:	d4ec      	bmi.n	8002a0c <HAL_I2C_EV_IRQHandler+0x1b8>
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002a38:	e7eb      	b.n	8002a12 <HAL_I2C_EV_IRQHandler+0x1be>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a40:	601a      	str	r2, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a42:	2200      	movs	r2, #0
 8002a44:	9207      	str	r2, [sp, #28]
 8002a46:	695a      	ldr	r2, [r3, #20]
 8002a48:	9207      	str	r2, [sp, #28]
 8002a4a:	699a      	ldr	r2, [r3, #24]
 8002a4c:	9207      	str	r2, [sp, #28]
 8002a4e:	9a07      	ldr	r2, [sp, #28]
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a50:	e7ac      	b.n	80029ac <HAL_I2C_EV_IRQHandler+0x158>
      else if (hi2c->XferCount == 2U)
 8002a52:	8d61      	ldrh	r1, [r4, #42]	@ 0x2a
 8002a54:	b289      	uxth	r1, r1
 8002a56:	2902      	cmp	r1, #2
 8002a58:	d130      	bne.n	8002abc <HAL_I2C_EV_IRQHandler+0x268>
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002a5a:	2a10      	cmp	r2, #16
 8002a5c:	d803      	bhi.n	8002a66 <HAL_I2C_EV_IRQHandler+0x212>
 8002a5e:	4976      	ldr	r1, [pc, #472]	@ (8002c38 <HAL_I2C_EV_IRQHandler+0x3e4>)
 8002a60:	40d1      	lsrs	r1, r2
 8002a62:	07ce      	lsls	r6, r1, #31
 8002a64:	d415      	bmi.n	8002a92 <HAL_I2C_EV_IRQHandler+0x23e>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a66:	6819      	ldr	r1, [r3, #0]
 8002a68:	f421 6180 	bic.w	r1, r1, #1024	@ 0x400
 8002a6c:	6019      	str	r1, [r3, #0]
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a6e:	6819      	ldr	r1, [r3, #0]
 8002a70:	f441 6100 	orr.w	r1, r1, #2048	@ 0x800
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a74:	6019      	str	r1, [r3, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002a76:	6859      	ldr	r1, [r3, #4]
 8002a78:	050d      	lsls	r5, r1, #20
 8002a7a:	d514      	bpl.n	8002aa6 <HAL_I2C_EV_IRQHandler+0x252>
 8002a7c:	2a20      	cmp	r2, #32
 8002a7e:	d81a      	bhi.n	8002ab6 <HAL_I2C_EV_IRQHandler+0x262>
 8002a80:	2a07      	cmp	r2, #7
 8002a82:	d80a      	bhi.n	8002a9a <HAL_I2C_EV_IRQHandler+0x246>
 8002a84:	2a01      	cmp	r2, #1
 8002a86:	d10e      	bne.n	8002aa6 <HAL_I2C_EV_IRQHandler+0x252>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002a88:	685a      	ldr	r2, [r3, #4]
 8002a8a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002a8e:	605a      	str	r2, [r3, #4]
 8002a90:	e009      	b.n	8002aa6 <HAL_I2C_EV_IRQHandler+0x252>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a92:	6819      	ldr	r1, [r3, #0]
 8002a94:	f441 6180 	orr.w	r1, r1, #1024	@ 0x400
 8002a98:	e7ec      	b.n	8002a74 <HAL_I2C_EV_IRQHandler+0x220>
 8002a9a:	f1a2 0108 	sub.w	r1, r2, #8
 8002a9e:	4a67      	ldr	r2, [pc, #412]	@ (8002c3c <HAL_I2C_EV_IRQHandler+0x3e8>)
 8002aa0:	40ca      	lsrs	r2, r1
 8002aa2:	07d0      	lsls	r0, r2, #31
 8002aa4:	d4f0      	bmi.n	8002a88 <HAL_I2C_EV_IRQHandler+0x234>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	9208      	str	r2, [sp, #32]
 8002aaa:	695a      	ldr	r2, [r3, #20]
 8002aac:	9208      	str	r2, [sp, #32]
 8002aae:	699b      	ldr	r3, [r3, #24]
 8002ab0:	9308      	str	r3, [sp, #32]
 8002ab2:	9b08      	ldr	r3, [sp, #32]
 8002ab4:	e799      	b.n	80029ea <HAL_I2C_EV_IRQHandler+0x196>
 8002ab6:	f512 3f80 	cmn.w	r2, #65536	@ 0x10000
 8002aba:	e7e4      	b.n	8002a86 <HAL_I2C_EV_IRQHandler+0x232>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002abc:	6819      	ldr	r1, [r3, #0]
 8002abe:	f441 6180 	orr.w	r1, r1, #1024	@ 0x400
 8002ac2:	6019      	str	r1, [r3, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002ac4:	6859      	ldr	r1, [r3, #4]
 8002ac6:	0509      	lsls	r1, r1, #20
 8002ac8:	d510      	bpl.n	8002aec <HAL_I2C_EV_IRQHandler+0x298>
 8002aca:	2a20      	cmp	r2, #32
 8002acc:	d816      	bhi.n	8002afc <HAL_I2C_EV_IRQHandler+0x2a8>
 8002ace:	2a07      	cmp	r2, #7
 8002ad0:	d806      	bhi.n	8002ae0 <HAL_I2C_EV_IRQHandler+0x28c>
 8002ad2:	2a01      	cmp	r2, #1
 8002ad4:	d10a      	bne.n	8002aec <HAL_I2C_EV_IRQHandler+0x298>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002ad6:	685a      	ldr	r2, [r3, #4]
 8002ad8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002adc:	605a      	str	r2, [r3, #4]
 8002ade:	e005      	b.n	8002aec <HAL_I2C_EV_IRQHandler+0x298>
 8002ae0:	f1a2 0108 	sub.w	r1, r2, #8
 8002ae4:	4a55      	ldr	r2, [pc, #340]	@ (8002c3c <HAL_I2C_EV_IRQHandler+0x3e8>)
 8002ae6:	40ca      	lsrs	r2, r1
 8002ae8:	07d2      	lsls	r2, r2, #31
 8002aea:	d4f4      	bmi.n	8002ad6 <HAL_I2C_EV_IRQHandler+0x282>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002aec:	2200      	movs	r2, #0
 8002aee:	9209      	str	r2, [sp, #36]	@ 0x24
 8002af0:	695a      	ldr	r2, [r3, #20]
 8002af2:	9209      	str	r2, [sp, #36]	@ 0x24
 8002af4:	699b      	ldr	r3, [r3, #24]
 8002af6:	9309      	str	r3, [sp, #36]	@ 0x24
 8002af8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002afa:	e776      	b.n	80029ea <HAL_I2C_EV_IRQHandler+0x196>
 8002afc:	f512 3f80 	cmn.w	r2, #65536	@ 0x10000
 8002b00:	e7e8      	b.n	8002ad4 <HAL_I2C_EV_IRQHandler+0x280>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b02:	2200      	movs	r2, #0
 8002b04:	920a      	str	r2, [sp, #40]	@ 0x28
 8002b06:	695a      	ldr	r2, [r3, #20]
 8002b08:	920a      	str	r2, [sp, #40]	@ 0x28
 8002b0a:	699b      	ldr	r3, [r3, #24]
 8002b0c:	930a      	str	r3, [sp, #40]	@ 0x28
 8002b0e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8002b10:	e6bc      	b.n	800288c <HAL_I2C_EV_IRQHandler+0x38>
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8002b12:	077f      	lsls	r7, r7, #29
 8002b14:	f140 8094 	bpl.w	8002c40 <HAL_I2C_EV_IRQHandler+0x3ec>
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002b18:	685e      	ldr	r6, [r3, #4]
 8002b1a:	0536      	lsls	r6, r6, #20
 8002b1c:	f53f aeb6 	bmi.w	800288c <HAL_I2C_EV_IRQHandler+0x38>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002b20:	0607      	lsls	r7, r0, #24
 8002b22:	f000 0604 	and.w	r6, r0, #4
 8002b26:	d53e      	bpl.n	8002ba6 <HAL_I2C_EV_IRQHandler+0x352>
 8002b28:	0550      	lsls	r0, r2, #21
 8002b2a:	d53c      	bpl.n	8002ba6 <HAL_I2C_EV_IRQHandler+0x352>
 8002b2c:	2e00      	cmp	r6, #0
 8002b2e:	d13d      	bne.n	8002bac <HAL_I2C_EV_IRQHandler+0x358>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002b30:	f894 203d 	ldrb.w	r2, [r4, #61]	@ 0x3d
  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002b34:	8d25      	ldrh	r5, [r4, #40]	@ 0x28
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002b36:	f894 103e 	ldrb.w	r1, [r4, #62]	@ 0x3e
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002b3a:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002b3c:	b2d2      	uxtb	r2, r2
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002b3e:	b2c9      	uxtb	r1, r1
  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002b40:	b9c5      	cbnz	r5, 8002b74 <HAL_I2C_EV_IRQHandler+0x320>
 8002b42:	2a21      	cmp	r2, #33	@ 0x21
 8002b44:	d118      	bne.n	8002b78 <HAL_I2C_EV_IRQHandler+0x324>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002b46:	2808      	cmp	r0, #8
 8002b48:	d058      	beq.n	8002bfc <HAL_I2C_EV_IRQHandler+0x3a8>
 8002b4a:	2820      	cmp	r0, #32
 8002b4c:	d056      	beq.n	8002bfc <HAL_I2C_EV_IRQHandler+0x3a8>
 8002b4e:	f510 3f80 	cmn.w	r0, #65536	@ 0x10000
 8002b52:	d053      	beq.n	8002bfc <HAL_I2C_EV_IRQHandler+0x3a8>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002b54:	685a      	ldr	r2, [r3, #4]
 8002b56:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002b5a:	605a      	str	r2, [r3, #4]
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002b5c:	2311      	movs	r3, #17
 8002b5e:	6323      	str	r3, [r4, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b60:	2300      	movs	r3, #0
 8002b62:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002b66:	2320      	movs	r3, #32
 8002b68:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002b6c:	4620      	mov	r0, r4
 8002b6e:	f7ff fd07 	bl	8002580 <HAL_I2C_MasterTxCpltCallback>
 8002b72:	e68b      	b.n	800288c <HAL_I2C_EV_IRQHandler+0x38>
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002b74:	2a21      	cmp	r2, #33	@ 0x21
 8002b76:	d005      	beq.n	8002b84 <HAL_I2C_EV_IRQHandler+0x330>
 8002b78:	2940      	cmp	r1, #64	@ 0x40
 8002b7a:	f47f ae87 	bne.w	800288c <HAL_I2C_EV_IRQHandler+0x38>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002b7e:	2a22      	cmp	r2, #34	@ 0x22
 8002b80:	f47f ae84 	bne.w	800288c <HAL_I2C_EV_IRQHandler+0x38>
    if (hi2c->XferCount == 0U)
 8002b84:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8002b86:	b292      	uxth	r2, r2
 8002b88:	b91a      	cbnz	r2, 8002b92 <HAL_I2C_EV_IRQHandler+0x33e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002b8a:	685a      	ldr	r2, [r3, #4]
 8002b8c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b90:	e6b5      	b.n	80028fe <HAL_I2C_EV_IRQHandler+0xaa>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002b92:	f894 203e 	ldrb.w	r2, [r4, #62]	@ 0x3e
 8002b96:	2a40      	cmp	r2, #64	@ 0x40
 8002b98:	d116      	bne.n	8002bc8 <HAL_I2C_EV_IRQHandler+0x374>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002b9a:	4620      	mov	r0, r4
}
 8002b9c:	b00f      	add	sp, #60	@ 0x3c
 8002b9e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002ba2:	f7ff bcf4 	b.w	800258e <I2C_MemoryTransmit_TXE_BTF>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002ba6:	2e00      	cmp	r6, #0
 8002ba8:	f43f ae70 	beq.w	800288c <HAL_I2C_EV_IRQHandler+0x38>
 8002bac:	0597      	lsls	r7, r2, #22
 8002bae:	f57f ae6d 	bpl.w	800288c <HAL_I2C_EV_IRQHandler+0x38>
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002bb2:	2921      	cmp	r1, #33	@ 0x21
 8002bb4:	d139      	bne.n	8002c2a <HAL_I2C_EV_IRQHandler+0x3d6>
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002bb6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002bb8:	f894 203d 	ldrb.w	r2, [r4, #61]	@ 0x3d
 8002bbc:	2a21      	cmp	r2, #33	@ 0x21
 8002bbe:	f47f ae65 	bne.w	800288c <HAL_I2C_EV_IRQHandler+0x38>
    if (hi2c->XferCount != 0U)
 8002bc2:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8002bc4:	b292      	uxth	r2, r2
 8002bc6:	b14a      	cbz	r2, 8002bdc <HAL_I2C_EV_IRQHandler+0x388>
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002bc8:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8002bca:	f812 1b01 	ldrb.w	r1, [r2], #1
 8002bce:	6119      	str	r1, [r3, #16]
    hi2c->pBuffPtr++;
 8002bd0:	6262      	str	r2, [r4, #36]	@ 0x24
    hi2c->XferCount--;
 8002bd2:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002bd4:	3b01      	subs	r3, #1
 8002bd6:	b29b      	uxth	r3, r3
 8002bd8:	8563      	strh	r3, [r4, #42]	@ 0x2a
      }
 8002bda:	e657      	b.n	800288c <HAL_I2C_EV_IRQHandler+0x38>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002bdc:	2908      	cmp	r1, #8
 8002bde:	d00d      	beq.n	8002bfc <HAL_I2C_EV_IRQHandler+0x3a8>
 8002be0:	2920      	cmp	r1, #32
 8002be2:	d00b      	beq.n	8002bfc <HAL_I2C_EV_IRQHandler+0x3a8>
 8002be4:	f511 3f80 	cmn.w	r1, #65536	@ 0x10000
 8002be8:	d008      	beq.n	8002bfc <HAL_I2C_EV_IRQHandler+0x3a8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002bea:	6859      	ldr	r1, [r3, #4]
 8002bec:	f421 61e0 	bic.w	r1, r1, #1792	@ 0x700
 8002bf0:	6059      	str	r1, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002bf2:	2311      	movs	r3, #17
 8002bf4:	6323      	str	r3, [r4, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bf6:	f884 203e 	strb.w	r2, [r4, #62]	@ 0x3e
 8002bfa:	e7b4      	b.n	8002b66 <HAL_I2C_EV_IRQHandler+0x312>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002bfc:	685a      	ldr	r2, [r3, #4]
 8002bfe:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002c02:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c0a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002c0c:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 8002c0e:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8002c10:	6323      	str	r3, [r4, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002c12:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002c16:	f894 203e 	ldrb.w	r2, [r4, #62]	@ 0x3e
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c1a:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002c1e:	2a40      	cmp	r2, #64	@ 0x40
          HAL_I2C_MemTxCpltCallback(hi2c);
 8002c20:	4620      	mov	r0, r4
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002c22:	d1a4      	bne.n	8002b6e <HAL_I2C_EV_IRQHandler+0x31a>
          HAL_I2C_MemTxCpltCallback(hi2c);
 8002c24:	f7ff fcb2 	bl	800258c <HAL_I2C_MemTxCpltCallback>
 8002c28:	e630      	b.n	800288c <HAL_I2C_EV_IRQHandler+0x38>
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8002c2a:	2d40      	cmp	r5, #64	@ 0x40
 8002c2c:	f47f ae2e 	bne.w	800288c <HAL_I2C_EV_IRQHandler+0x38>
 8002c30:	e7b3      	b.n	8002b9a <HAL_I2C_EV_IRQHandler+0x346>
 8002c32:	bf00      	nop
 8002c34:	fffeffeb 	.word	0xfffeffeb
 8002c38:	00010014 	.word	0x00010014
 8002c3c:	01000101 	.word	0x01000101
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002c40:	6859      	ldr	r1, [r3, #4]
 8002c42:	050e      	lsls	r6, r1, #20
 8002c44:	f53f ae22 	bmi.w	800288c <HAL_I2C_EV_IRQHandler+0x38>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002c48:	0645      	lsls	r5, r0, #25
 8002c4a:	f000 0104 	and.w	r1, r0, #4
 8002c4e:	f140 8086 	bpl.w	8002d5e <HAL_I2C_EV_IRQHandler+0x50a>
 8002c52:	0550      	lsls	r0, r2, #21
 8002c54:	f140 8083 	bpl.w	8002d5e <HAL_I2C_EV_IRQHandler+0x50a>
 8002c58:	2900      	cmp	r1, #0
 8002c5a:	f040 8083 	bne.w	8002d64 <HAL_I2C_EV_IRQHandler+0x510>
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002c5e:	f894 203d 	ldrb.w	r2, [r4, #61]	@ 0x3d
 8002c62:	2a22      	cmp	r2, #34	@ 0x22
 8002c64:	f47f ae12 	bne.w	800288c <HAL_I2C_EV_IRQHandler+0x38>
    CurrentXferOptions = hi2c->XferOptions;
 8002c68:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
    tmp = hi2c->XferCount;
 8002c6a:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8002c6c:	b292      	uxth	r2, r2
    if (tmp > 3U)
 8002c6e:	2a03      	cmp	r2, #3
 8002c70:	d914      	bls.n	8002c9c <HAL_I2C_EV_IRQHandler+0x448>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c72:	691a      	ldr	r2, [r3, #16]
 8002c74:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002c76:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8002c78:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002c7a:	3301      	adds	r3, #1
 8002c7c:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8002c7e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002c80:	3b01      	subs	r3, #1
 8002c82:	b29b      	uxth	r3, r3
 8002c84:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if (hi2c->XferCount == (uint16_t)3)
 8002c86:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002c88:	b29b      	uxth	r3, r3
 8002c8a:	2b03      	cmp	r3, #3
 8002c8c:	f47f adfe 	bne.w	800288c <HAL_I2C_EV_IRQHandler+0x38>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002c90:	6822      	ldr	r2, [r4, #0]
 8002c92:	6853      	ldr	r3, [r2, #4]
 8002c94:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002c98:	6053      	str	r3, [r2, #4]
 8002c9a:	e5f7      	b.n	800288c <HAL_I2C_EV_IRQHandler+0x38>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8002c9c:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
 8002c9e:	2d02      	cmp	r5, #2
 8002ca0:	f43f af73 	beq.w	8002b8a <HAL_I2C_EV_IRQHandler+0x336>
 8002ca4:	2a01      	cmp	r2, #1
 8002ca6:	f63f af70 	bhi.w	8002b8a <HAL_I2C_EV_IRQHandler+0x336>
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8002caa:	4a7a      	ldr	r2, [pc, #488]	@ (8002e94 <HAL_I2C_EV_IRQHandler+0x640>)
  __IO uint32_t count = 0U;
 8002cac:	910b      	str	r1, [sp, #44]	@ 0x2c
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8002cae:	6812      	ldr	r2, [r2, #0]
 8002cb0:	f246 11a8 	movw	r1, #25000	@ 0x61a8
 8002cb4:	fbb2 f2f1 	udiv	r2, r2, r1
 8002cb8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002cbc:	920b      	str	r2, [sp, #44]	@ 0x2c
    count--;
 8002cbe:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8002cc0:	3a01      	subs	r2, #1
 8002cc2:	920b      	str	r2, [sp, #44]	@ 0x2c
    if (count == 0U)
 8002cc4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8002cc6:	b9d1      	cbnz	r1, 8002cfe <HAL_I2C_EV_IRQHandler+0x4aa>
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002cc8:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8002cca:	f042 0220 	orr.w	r2, r2, #32
 8002cce:	6422      	str	r2, [r4, #64]	@ 0x40
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002cd0:	685a      	ldr	r2, [r3, #4]
 8002cd2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002cd6:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cd8:	691a      	ldr	r2, [r3, #16]
 8002cda:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002cdc:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002cde:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002ce0:	3301      	adds	r3, #1
 8002ce2:	6263      	str	r3, [r4, #36]	@ 0x24
        hi2c->XferCount--;
 8002ce4:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002ce6:	3b01      	subs	r3, #1
 8002ce8:	b29b      	uxth	r3, r3
 8002cea:	8563      	strh	r3, [r4, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002cec:	2320      	movs	r3, #32
 8002cee:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        HAL_I2C_ErrorCallback(hi2c);
 8002cf2:	4620      	mov	r0, r4
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cf4:	f884 103e 	strb.w	r1, [r4, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8002cf8:	f7ff fca2 	bl	8002640 <HAL_I2C_ErrorCallback>
 8002cfc:	e5c6      	b.n	800288c <HAL_I2C_EV_IRQHandler+0x38>
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8002cfe:	681a      	ldr	r2, [r3, #0]
 8002d00:	f412 7200 	ands.w	r2, r2, #512	@ 0x200
 8002d04:	d1db      	bne.n	8002cbe <HAL_I2C_EV_IRQHandler+0x46a>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d06:	6819      	ldr	r1, [r3, #0]
 8002d08:	f421 6180 	bic.w	r1, r1, #1024	@ 0x400
 8002d0c:	6019      	str	r1, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002d0e:	6859      	ldr	r1, [r3, #4]
 8002d10:	f421 61e0 	bic.w	r1, r1, #1792	@ 0x700
 8002d14:	6059      	str	r1, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d16:	6919      	ldr	r1, [r3, #16]
 8002d18:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002d1a:	7019      	strb	r1, [r3, #0]
        hi2c->pBuffPtr++;
 8002d1c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002d1e:	3301      	adds	r3, #1
 8002d20:	6263      	str	r3, [r4, #36]	@ 0x24
        hi2c->XferCount--;
 8002d22:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002d24:	3b01      	subs	r3, #1
 8002d26:	b29b      	uxth	r3, r3
 8002d28:	8563      	strh	r3, [r4, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002d2a:	2320      	movs	r3, #32
 8002d2c:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002d30:	f894 303e 	ldrb.w	r3, [r4, #62]	@ 0x3e
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d34:	f884 203e 	strb.w	r2, [r4, #62]	@ 0x3e
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002d38:	2b40      	cmp	r3, #64	@ 0x40
 8002d3a:	d104      	bne.n	8002d46 <HAL_I2C_EV_IRQHandler+0x4f2>
          hi2c->PreviousState = I2C_STATE_NONE;
 8002d3c:	6322      	str	r2, [r4, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002d3e:	4620      	mov	r0, r4
 8002d40:	f7ff fc7d 	bl	800263e <HAL_I2C_MemRxCpltCallback>
 8002d44:	e5a2      	b.n	800288c <HAL_I2C_EV_IRQHandler+0x38>
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8002d46:	2808      	cmp	r0, #8
 8002d48:	d001      	beq.n	8002d4e <HAL_I2C_EV_IRQHandler+0x4fa>
 8002d4a:	2820      	cmp	r0, #32
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8002d4c:	d101      	bne.n	8002d52 <HAL_I2C_EV_IRQHandler+0x4fe>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	e000      	b.n	8002d54 <HAL_I2C_EV_IRQHandler+0x500>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002d52:	2312      	movs	r3, #18
 8002d54:	6323      	str	r3, [r4, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8002d56:	4620      	mov	r0, r4
 8002d58:	f7ff fc13 	bl	8002582 <HAL_I2C_MasterRxCpltCallback>
 8002d5c:	e596      	b.n	800288c <HAL_I2C_EV_IRQHandler+0x38>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d5e:	2900      	cmp	r1, #0
 8002d60:	f43f ad94 	beq.w	800288c <HAL_I2C_EV_IRQHandler+0x38>
 8002d64:	0592      	lsls	r2, r2, #22
 8002d66:	f57f ad91 	bpl.w	800288c <HAL_I2C_EV_IRQHandler+0x38>
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002d6a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
  if (hi2c->XferCount == 4U)
 8002d6c:	8d60      	ldrh	r0, [r4, #42]	@ 0x2a
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d6e:	6a61      	ldr	r1, [r4, #36]	@ 0x24
  if (hi2c->XferCount == 4U)
 8002d70:	b280      	uxth	r0, r0
 8002d72:	2804      	cmp	r0, #4
 8002d74:	d109      	bne.n	8002d8a <HAL_I2C_EV_IRQHandler+0x536>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002d76:	685a      	ldr	r2, [r3, #4]
 8002d78:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d7c:	605a      	str	r2, [r3, #4]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d7e:	691b      	ldr	r3, [r3, #16]
 8002d80:	700b      	strb	r3, [r1, #0]
    hi2c->pBuffPtr++;
 8002d82:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002d84:	3301      	adds	r3, #1
 8002d86:	6263      	str	r3, [r4, #36]	@ 0x24
 8002d88:	e723      	b.n	8002bd2 <HAL_I2C_EV_IRQHandler+0x37e>
  else if (hi2c->XferCount == 3U)
 8002d8a:	8d60      	ldrh	r0, [r4, #42]	@ 0x2a
 8002d8c:	b280      	uxth	r0, r0
 8002d8e:	2803      	cmp	r0, #3
 8002d90:	d10c      	bne.n	8002dac <HAL_I2C_EV_IRQHandler+0x558>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002d92:	6858      	ldr	r0, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8002d94:	2a04      	cmp	r2, #4
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002d96:	f420 6080 	bic.w	r0, r0, #1024	@ 0x400
 8002d9a:	6058      	str	r0, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8002d9c:	d0ef      	beq.n	8002d7e <HAL_I2C_EV_IRQHandler+0x52a>
 8002d9e:	2a02      	cmp	r2, #2
 8002da0:	d0ed      	beq.n	8002d7e <HAL_I2C_EV_IRQHandler+0x52a>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002da2:	681a      	ldr	r2, [r3, #0]
 8002da4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002da8:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002daa:	e7e8      	b.n	8002d7e <HAL_I2C_EV_IRQHandler+0x52a>
  else if (hi2c->XferCount == 2U)
 8002dac:	8d60      	ldrh	r0, [r4, #42]	@ 0x2a
 8002dae:	b280      	uxth	r0, r0
 8002db0:	2802      	cmp	r0, #2
 8002db2:	d1e4      	bne.n	8002d7e <HAL_I2C_EV_IRQHandler+0x52a>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8002db4:	2a04      	cmp	r2, #4
 8002db6:	d033      	beq.n	8002e20 <HAL_I2C_EV_IRQHandler+0x5cc>
 8002db8:	d807      	bhi.n	8002dca <HAL_I2C_EV_IRQHandler+0x576>
 8002dba:	2a01      	cmp	r2, #1
 8002dbc:	d007      	beq.n	8002dce <HAL_I2C_EV_IRQHandler+0x57a>
 8002dbe:	2a02      	cmp	r2, #2
 8002dc0:	d02e      	beq.n	8002e20 <HAL_I2C_EV_IRQHandler+0x5cc>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dc2:	6818      	ldr	r0, [r3, #0]
 8002dc4:	f440 7000 	orr.w	r0, r0, #512	@ 0x200
 8002dc8:	e004      	b.n	8002dd4 <HAL_I2C_EV_IRQHandler+0x580>
 8002dca:	2a10      	cmp	r2, #16
 8002dcc:	d1f9      	bne.n	8002dc2 <HAL_I2C_EV_IRQHandler+0x56e>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002dce:	6818      	ldr	r0, [r3, #0]
 8002dd0:	f420 6080 	bic.w	r0, r0, #1024	@ 0x400
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dd4:	6018      	str	r0, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dd6:	691b      	ldr	r3, [r3, #16]
 8002dd8:	700b      	strb	r3, [r1, #0]
    hi2c->pBuffPtr++;
 8002dda:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8002ddc:	1c4b      	adds	r3, r1, #1
 8002dde:	6263      	str	r3, [r4, #36]	@ 0x24
    hi2c->XferCount--;
 8002de0:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002de2:	3b01      	subs	r3, #1
 8002de4:	b29b      	uxth	r3, r3
 8002de6:	8563      	strh	r3, [r4, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002de8:	6823      	ldr	r3, [r4, #0]
 8002dea:	691b      	ldr	r3, [r3, #16]
 8002dec:	704b      	strb	r3, [r1, #1]
    hi2c->pBuffPtr++;
 8002dee:	6a63      	ldr	r3, [r4, #36]	@ 0x24
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002df0:	6821      	ldr	r1, [r4, #0]
    hi2c->pBuffPtr++;
 8002df2:	3301      	adds	r3, #1
 8002df4:	6263      	str	r3, [r4, #36]	@ 0x24
    hi2c->XferCount--;
 8002df6:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002df8:	3b01      	subs	r3, #1
 8002dfa:	b29b      	uxth	r3, r3
 8002dfc:	8563      	strh	r3, [r4, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002dfe:	684b      	ldr	r3, [r1, #4]
 8002e00:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e04:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002e06:	2320      	movs	r3, #32
 8002e08:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002e0c:	f894 303e 	ldrb.w	r3, [r4, #62]	@ 0x3e
 8002e10:	2b40      	cmp	r3, #64	@ 0x40
 8002e12:	f04f 0300 	mov.w	r3, #0
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e16:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002e1a:	d105      	bne.n	8002e28 <HAL_I2C_EV_IRQHandler+0x5d4>
      hi2c->PreviousState = I2C_STATE_NONE;
 8002e1c:	6323      	str	r3, [r4, #48]	@ 0x30
 8002e1e:	e78e      	b.n	8002d3e <HAL_I2C_EV_IRQHandler+0x4ea>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e20:	6818      	ldr	r0, [r3, #0]
 8002e22:	f440 6080 	orr.w	r0, r0, #1024	@ 0x400
 8002e26:	e7d5      	b.n	8002dd4 <HAL_I2C_EV_IRQHandler+0x580>
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8002e28:	2a08      	cmp	r2, #8
 8002e2a:	d090      	beq.n	8002d4e <HAL_I2C_EV_IRQHandler+0x4fa>
 8002e2c:	2a20      	cmp	r2, #32
 8002e2e:	e78d      	b.n	8002d4c <HAL_I2C_EV_IRQHandler+0x4f8>
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002e30:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8002e32:	b310      	cbz	r0, 8002e7a <HAL_I2C_EV_IRQHandler+0x626>
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002e34:	6958      	ldr	r0, [r3, #20]
  uint32_t sr2itflags               = 0U;
 8002e36:	2500      	movs	r5, #0
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002e38:	0787      	lsls	r7, r0, #30
 8002e3a:	d52d      	bpl.n	8002e98 <HAL_I2C_EV_IRQHandler+0x644>
 8002e3c:	0596      	lsls	r6, r2, #22
 8002e3e:	d52b      	bpl.n	8002e98 <HAL_I2C_EV_IRQHandler+0x644>
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002e40:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8002e42:	b102      	cbz	r2, 8002e46 <HAL_I2C_EV_IRQHandler+0x5f2>
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002e44:	699d      	ldr	r5, [r3, #24]
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002e46:	f894 203d 	ldrb.w	r2, [r4, #61]	@ 0x3d
 8002e4a:	f002 0228 	and.w	r2, r2, #40	@ 0x28
 8002e4e:	2a28      	cmp	r2, #40	@ 0x28
 8002e50:	d116      	bne.n	8002e80 <HAL_I2C_EV_IRQHandler+0x62c>
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8002e52:	685a      	ldr	r2, [r3, #4]
 8002e54:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e58:	605a      	str	r2, [r3, #4]
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8002e5a:	062f      	lsls	r7, r5, #24
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8002e5c:	f085 0104 	eor.w	r1, r5, #4
    __HAL_UNLOCK(hi2c);
 8002e60:	f04f 0300 	mov.w	r3, #0
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8002e64:	bf54      	ite	pl
 8002e66:	89a2      	ldrhpl	r2, [r4, #12]
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8002e68:	8b22      	ldrhmi	r2, [r4, #24]
    __HAL_UNLOCK(hi2c);
 8002e6a:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8002e6e:	f3c1 0180 	ubfx	r1, r1, #2, #1
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8002e72:	4620      	mov	r0, r4
 8002e74:	f7ff fb88 	bl	8002588 <HAL_I2C_AddrCallback>
 8002e78:	e508      	b.n	800288c <HAL_I2C_EV_IRQHandler+0x38>
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002e7a:	699d      	ldr	r5, [r3, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002e7c:	6958      	ldr	r0, [r3, #20]
 8002e7e:	e7db      	b.n	8002e38 <HAL_I2C_EV_IRQHandler+0x5e4>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e80:	2200      	movs	r2, #0
 8002e82:	920c      	str	r2, [sp, #48]	@ 0x30
 8002e84:	6959      	ldr	r1, [r3, #20]
 8002e86:	910c      	str	r1, [sp, #48]	@ 0x30
 8002e88:	699b      	ldr	r3, [r3, #24]
 8002e8a:	930c      	str	r3, [sp, #48]	@ 0x30
 8002e8c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8002e8e:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
 8002e92:	e4fb      	b.n	800288c <HAL_I2C_EV_IRQHandler+0x38>
 8002e94:	20000004 	.word	0x20000004
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002e98:	06c6      	lsls	r6, r0, #27
 8002e9a:	f140 80b1 	bpl.w	8003000 <HAL_I2C_EV_IRQHandler+0x7ac>
 8002e9e:	0595      	lsls	r5, r2, #22
 8002ea0:	f140 80ae 	bpl.w	8003000 <HAL_I2C_EV_IRQHandler+0x7ac>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002ea4:	f894 503d 	ldrb.w	r5, [r4, #61]	@ 0x3d
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002ea8:	685a      	ldr	r2, [r3, #4]
 8002eaa:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002eae:	605a      	str	r2, [r3, #4]
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	920d      	str	r2, [sp, #52]	@ 0x34
 8002eb4:	695a      	ldr	r2, [r3, #20]
 8002eb6:	920d      	str	r2, [sp, #52]	@ 0x34
 8002eb8:	681a      	ldr	r2, [r3, #0]
 8002eba:	f042 0201 	orr.w	r2, r2, #1
 8002ebe:	601a      	str	r2, [r3, #0]
 8002ec0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ec8:	601a      	str	r2, [r3, #0]
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002eca:	685a      	ldr	r2, [r3, #4]
 8002ecc:	0510      	lsls	r0, r2, #20
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002ece:	b2ed      	uxtb	r5, r5
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002ed0:	d520      	bpl.n	8002f14 <HAL_I2C_EV_IRQHandler+0x6c0>
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002ed2:	f005 02f7 	and.w	r2, r5, #247	@ 0xf7
 8002ed6:	2a22      	cmp	r2, #34	@ 0x22
 8002ed8:	d14a      	bne.n	8002f70 <HAL_I2C_EV_IRQHandler+0x71c>
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8002eda:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8002edc:	6802      	ldr	r2, [r0, #0]
 8002ede:	6852      	ldr	r2, [r2, #4]
 8002ee0:	b292      	uxth	r2, r2
 8002ee2:	8562      	strh	r2, [r4, #42]	@ 0x2a
      if (hi2c->XferCount != 0U)
 8002ee4:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8002ee6:	b292      	uxth	r2, r2
 8002ee8:	b11a      	cbz	r2, 8002ef2 <HAL_I2C_EV_IRQHandler+0x69e>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002eea:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8002eec:	f042 0204 	orr.w	r2, r2, #4
 8002ef0:	6422      	str	r2, [r4, #64]	@ 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002ef2:	685a      	ldr	r2, [r3, #4]
 8002ef4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002ef8:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002efa:	f7fe fe2b 	bl	8001b54 <HAL_DMA_GetState>
 8002efe:	2801      	cmp	r0, #1
 8002f00:	d008      	beq.n	8002f14 <HAL_I2C_EV_IRQHandler+0x6c0>
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002f02:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8002f04:	4b79      	ldr	r3, [pc, #484]	@ (80030ec <HAL_I2C_EV_IRQHandler+0x898>)
 8002f06:	6503      	str	r3, [r0, #80]	@ 0x50
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002f08:	f7fe fe12 	bl	8001b30 <HAL_DMA_Abort_IT>
 8002f0c:	b110      	cbz	r0, 8002f14 <HAL_I2C_EV_IRQHandler+0x6c0>
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002f0e:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002f10:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8002f12:	4798      	blx	r3
  if (hi2c->XferCount != 0U)
 8002f14:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002f16:	b29b      	uxth	r3, r3
 8002f18:	b313      	cbz	r3, 8002f60 <HAL_I2C_EV_IRQHandler+0x70c>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002f1a:	6823      	ldr	r3, [r4, #0]
 8002f1c:	695a      	ldr	r2, [r3, #20]
 8002f1e:	0751      	lsls	r1, r2, #29
 8002f20:	d509      	bpl.n	8002f36 <HAL_I2C_EV_IRQHandler+0x6e2>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f22:	691a      	ldr	r2, [r3, #16]
 8002f24:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002f26:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8002f28:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002f2a:	3301      	adds	r3, #1
 8002f2c:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8002f2e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002f30:	3b01      	subs	r3, #1
 8002f32:	b29b      	uxth	r3, r3
 8002f34:	8563      	strh	r3, [r4, #42]	@ 0x2a
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002f36:	6823      	ldr	r3, [r4, #0]
 8002f38:	695a      	ldr	r2, [r3, #20]
 8002f3a:	0652      	lsls	r2, r2, #25
 8002f3c:	d509      	bpl.n	8002f52 <HAL_I2C_EV_IRQHandler+0x6fe>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f3e:	691a      	ldr	r2, [r3, #16]
 8002f40:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002f42:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8002f44:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002f46:	3301      	adds	r3, #1
 8002f48:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8002f4a:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002f4c:	3b01      	subs	r3, #1
 8002f4e:	b29b      	uxth	r3, r3
 8002f50:	8563      	strh	r3, [r4, #42]	@ 0x2a
    if (hi2c->XferCount != 0U)
 8002f52:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002f54:	b29b      	uxth	r3, r3
 8002f56:	b11b      	cbz	r3, 8002f60 <HAL_I2C_EV_IRQHandler+0x70c>
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002f58:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002f5a:	f043 0304 	orr.w	r3, r3, #4
 8002f5e:	6423      	str	r3, [r4, #64]	@ 0x40
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002f60:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002f62:	b313      	cbz	r3, 8002faa <HAL_I2C_EV_IRQHandler+0x756>
    I2C_ITError(hi2c);
 8002f64:	4620      	mov	r0, r4
}
 8002f66:	b00f      	add	sp, #60	@ 0x3c
 8002f68:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    I2C_ITError(hi2c);
 8002f6c:	f7ff bbca 	b.w	8002704 <I2C_ITError>
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8002f70:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8002f72:	6802      	ldr	r2, [r0, #0]
 8002f74:	6852      	ldr	r2, [r2, #4]
 8002f76:	b292      	uxth	r2, r2
 8002f78:	8562      	strh	r2, [r4, #42]	@ 0x2a
      if (hi2c->XferCount != 0U)
 8002f7a:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8002f7c:	b292      	uxth	r2, r2
 8002f7e:	b11a      	cbz	r2, 8002f88 <HAL_I2C_EV_IRQHandler+0x734>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002f80:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8002f82:	f042 0204 	orr.w	r2, r2, #4
 8002f86:	6422      	str	r2, [r4, #64]	@ 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002f88:	685a      	ldr	r2, [r3, #4]
 8002f8a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002f8e:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002f90:	f7fe fde0 	bl	8001b54 <HAL_DMA_GetState>
 8002f94:	2801      	cmp	r0, #1
 8002f96:	d0bd      	beq.n	8002f14 <HAL_I2C_EV_IRQHandler+0x6c0>
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002f98:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8002f9a:	4b54      	ldr	r3, [pc, #336]	@ (80030ec <HAL_I2C_EV_IRQHandler+0x898>)
 8002f9c:	6503      	str	r3, [r0, #80]	@ 0x50
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002f9e:	f7fe fdc7 	bl	8001b30 <HAL_DMA_Abort_IT>
 8002fa2:	2800      	cmp	r0, #0
 8002fa4:	d0b6      	beq.n	8002f14 <HAL_I2C_EV_IRQHandler+0x6c0>
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002fa6:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8002fa8:	e7b2      	b.n	8002f10 <HAL_I2C_EV_IRQHandler+0x6bc>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002faa:	2d2a      	cmp	r5, #42	@ 0x2a
 8002fac:	d106      	bne.n	8002fbc <HAL_I2C_EV_IRQHandler+0x768>
      hi2c->PreviousState = I2C_STATE_NONE;
 8002fae:	6323      	str	r3, [r4, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002fb0:	2328      	movs	r3, #40	@ 0x28
 8002fb2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002fb6:	4620      	mov	r0, r4
 8002fb8:	f7ff fae5 	bl	8002586 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002fbc:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
 8002fc0:	2b28      	cmp	r3, #40	@ 0x28
 8002fc2:	d10c      	bne.n	8002fde <HAL_I2C_EV_IRQHandler+0x78a>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002fc4:	4b4a      	ldr	r3, [pc, #296]	@ (80030f0 <HAL_I2C_EV_IRQHandler+0x89c>)
 8002fc6:	62e3      	str	r3, [r4, #44]	@ 0x2c
      hi2c->State = HAL_I2C_STATE_READY;
 8002fc8:	2220      	movs	r2, #32
      hi2c->PreviousState = I2C_STATE_NONE;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	6323      	str	r3, [r4, #48]	@ 0x30
      HAL_I2C_ListenCpltCallback(hi2c);
 8002fce:	4620      	mov	r0, r4
      hi2c->State = HAL_I2C_STATE_READY;
 8002fd0:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fd4:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8002fd8:	f7ff fad7 	bl	800258a <HAL_I2C_ListenCpltCallback>
 8002fdc:	e456      	b.n	800288c <HAL_I2C_EV_IRQHandler+0x38>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002fde:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8002fe0:	2b22      	cmp	r3, #34	@ 0x22
 8002fe2:	d002      	beq.n	8002fea <HAL_I2C_EV_IRQHandler+0x796>
 8002fe4:	2d22      	cmp	r5, #34	@ 0x22
 8002fe6:	f47f ac51 	bne.w	800288c <HAL_I2C_EV_IRQHandler+0x38>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002fea:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 8002fec:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8002fee:	6323      	str	r3, [r4, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002ff0:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ff4:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002ff8:	4620      	mov	r0, r4
 8002ffa:	f7ff fac4 	bl	8002586 <HAL_I2C_SlaveRxCpltCallback>
 8002ffe:	e445      	b.n	800288c <HAL_I2C_EV_IRQHandler+0x38>
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003000:	f001 01f7 	and.w	r1, r1, #247	@ 0xf7
 8003004:	2921      	cmp	r1, #33	@ 0x21
 8003006:	f000 0504 	and.w	r5, r0, #4
 800300a:	d135      	bne.n	8003078 <HAL_I2C_EV_IRQHandler+0x824>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800300c:	0607      	lsls	r7, r0, #24
 800300e:	d527      	bpl.n	8003060 <HAL_I2C_EV_IRQHandler+0x80c>
 8003010:	0556      	lsls	r6, r2, #21
 8003012:	d525      	bpl.n	8003060 <HAL_I2C_EV_IRQHandler+0x80c>
 8003014:	bb3d      	cbnz	r5, 8003066 <HAL_I2C_EV_IRQHandler+0x812>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003016:	f894 003d 	ldrb.w	r0, [r4, #61]	@ 0x3d
  if (hi2c->XferCount != 0U)
 800301a:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 800301c:	b292      	uxth	r2, r2
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800301e:	b2c0      	uxtb	r0, r0
  if (hi2c->XferCount != 0U)
 8003020:	2a00      	cmp	r2, #0
 8003022:	f43f ac33 	beq.w	800288c <HAL_I2C_EV_IRQHandler+0x38>
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003026:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8003028:	f812 5b01 	ldrb.w	r5, [r2], #1
 800302c:	611d      	str	r5, [r3, #16]
    hi2c->pBuffPtr++;
 800302e:	6262      	str	r2, [r4, #36]	@ 0x24
    hi2c->XferCount--;
 8003030:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8003032:	3a01      	subs	r2, #1
 8003034:	b292      	uxth	r2, r2
 8003036:	8562      	strh	r2, [r4, #42]	@ 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003038:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 800303a:	b292      	uxth	r2, r2
 800303c:	2a00      	cmp	r2, #0
 800303e:	f47f ac25 	bne.w	800288c <HAL_I2C_EV_IRQHandler+0x38>
 8003042:	2829      	cmp	r0, #41	@ 0x29
 8003044:	f47f ac22 	bne.w	800288c <HAL_I2C_EV_IRQHandler+0x38>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003048:	685a      	ldr	r2, [r3, #4]
 800304a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800304e:	605a      	str	r2, [r3, #4]
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003050:	2328      	movs	r3, #40	@ 0x28
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003052:	6321      	str	r1, [r4, #48]	@ 0x30
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003054:	4620      	mov	r0, r4
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003056:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800305a:	f7ff fa93 	bl	8002584 <HAL_I2C_SlaveTxCpltCallback>
 800305e:	e415      	b.n	800288c <HAL_I2C_EV_IRQHandler+0x38>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003060:	2d00      	cmp	r5, #0
 8003062:	f43f ac13 	beq.w	800288c <HAL_I2C_EV_IRQHandler+0x38>
 8003066:	0595      	lsls	r5, r2, #22
 8003068:	f57f ac10 	bpl.w	800288c <HAL_I2C_EV_IRQHandler+0x38>
  if (hi2c->XferCount != 0U)
 800306c:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 800306e:	b292      	uxth	r2, r2
 8003070:	2a00      	cmp	r2, #0
 8003072:	f43f ac0b 	beq.w	800288c <HAL_I2C_EV_IRQHandler+0x38>
 8003076:	e5a7      	b.n	8002bc8 <HAL_I2C_EV_IRQHandler+0x374>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003078:	0640      	lsls	r0, r0, #25
 800307a:	d527      	bpl.n	80030cc <HAL_I2C_EV_IRQHandler+0x878>
 800307c:	0551      	lsls	r1, r2, #21
 800307e:	d525      	bpl.n	80030cc <HAL_I2C_EV_IRQHandler+0x878>
 8003080:	bb3d      	cbnz	r5, 80030d2 <HAL_I2C_EV_IRQHandler+0x87e>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003082:	f894 203d 	ldrb.w	r2, [r4, #61]	@ 0x3d
  if (hi2c->XferCount != 0U)
 8003086:	8d61      	ldrh	r1, [r4, #42]	@ 0x2a
 8003088:	b289      	uxth	r1, r1
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800308a:	b2d2      	uxtb	r2, r2
  if (hi2c->XferCount != 0U)
 800308c:	2900      	cmp	r1, #0
 800308e:	f43f abfd 	beq.w	800288c <HAL_I2C_EV_IRQHandler+0x38>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003092:	6919      	ldr	r1, [r3, #16]
 8003094:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003096:	7019      	strb	r1, [r3, #0]
    hi2c->pBuffPtr++;
 8003098:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800309a:	3301      	adds	r3, #1
 800309c:	6263      	str	r3, [r4, #36]	@ 0x24
    hi2c->XferCount--;
 800309e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80030a0:	3b01      	subs	r3, #1
 80030a2:	b29b      	uxth	r3, r3
 80030a4:	8563      	strh	r3, [r4, #42]	@ 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80030a6:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80030a8:	b29b      	uxth	r3, r3
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	f47f abee 	bne.w	800288c <HAL_I2C_EV_IRQHandler+0x38>
 80030b0:	2a2a      	cmp	r2, #42	@ 0x2a
 80030b2:	f47f abeb 	bne.w	800288c <HAL_I2C_EV_IRQHandler+0x38>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80030b6:	6822      	ldr	r2, [r4, #0]
 80030b8:	6853      	ldr	r3, [r2, #4]
 80030ba:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80030be:	6053      	str	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80030c0:	2322      	movs	r3, #34	@ 0x22
 80030c2:	6323      	str	r3, [r4, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80030c4:	2328      	movs	r3, #40	@ 0x28
 80030c6:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
 80030ca:	e795      	b.n	8002ff8 <HAL_I2C_EV_IRQHandler+0x7a4>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80030cc:	2d00      	cmp	r5, #0
 80030ce:	f43f abdd 	beq.w	800288c <HAL_I2C_EV_IRQHandler+0x38>
 80030d2:	0592      	lsls	r2, r2, #22
 80030d4:	f57f abda 	bpl.w	800288c <HAL_I2C_EV_IRQHandler+0x38>
  if (hi2c->XferCount != 0U)
 80030d8:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 80030da:	b292      	uxth	r2, r2
 80030dc:	2a00      	cmp	r2, #0
 80030de:	f43f abd5 	beq.w	800288c <HAL_I2C_EV_IRQHandler+0x38>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030e2:	691a      	ldr	r2, [r3, #16]
 80030e4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80030e6:	701a      	strb	r2, [r3, #0]
 80030e8:	e64b      	b.n	8002d82 <HAL_I2C_EV_IRQHandler+0x52e>
 80030ea:	bf00      	nop
 80030ec:	08002645 	.word	0x08002645
 80030f0:	ffff0000 	.word	0xffff0000

080030f4 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80030f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80030f8:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80030fc:	4604      	mov	r4, r0
 80030fe:	460e      	mov	r6, r1
 8003100:	4615      	mov	r5, r2
 8003102:	461f      	mov	r7, r3
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003104:	6822      	ldr	r2, [r4, #0]
 8003106:	6893      	ldr	r3, [r2, #8]
 8003108:	4233      	tst	r3, r6
 800310a:	bf14      	ite	ne
 800310c:	2301      	movne	r3, #1
 800310e:	2300      	moveq	r3, #0
 8003110:	42ab      	cmp	r3, r5
 8003112:	d101      	bne.n	8003118 <QSPI_WaitFlagStateUntilTimeout+0x24>

        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8003114:	2000      	movs	r0, #0
 8003116:	e00f      	b.n	8003138 <QSPI_WaitFlagStateUntilTimeout+0x44>
    if (Timeout != HAL_MAX_DELAY)
 8003118:	f1b8 3fff 	cmp.w	r8, #4294967295
 800311c:	d0f3      	beq.n	8003106 <QSPI_WaitFlagStateUntilTimeout+0x12>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800311e:	f7fe fc8b 	bl	8001a38 <HAL_GetTick>
 8003122:	1bc0      	subs	r0, r0, r7
 8003124:	4540      	cmp	r0, r8
 8003126:	d909      	bls.n	800313c <QSPI_WaitFlagStateUntilTimeout+0x48>
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8003128:	2304      	movs	r3, #4
 800312a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800312e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8003130:	f043 0301 	orr.w	r3, r3, #1
 8003134:	6463      	str	r3, [r4, #68]	@ 0x44
 8003136:	2001      	movs	r0, #1
}
 8003138:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800313c:	f1b8 0f00 	cmp.w	r8, #0
 8003140:	d1e0      	bne.n	8003104 <QSPI_WaitFlagStateUntilTimeout+0x10>
 8003142:	e7f1      	b.n	8003128 <QSPI_WaitFlagStateUntilTimeout+0x34>

08003144 <HAL_QSPI_Init>:
{
 8003144:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003146:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003148:	f7fe fc76 	bl	8001a38 <HAL_GetTick>
 800314c:	4605      	mov	r5, r0
  if(hqspi == NULL)
 800314e:	2c00      	cmp	r4, #0
 8003150:	d046      	beq.n	80031e0 <HAL_QSPI_Init+0x9c>
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8003152:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8003156:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800315a:	b93b      	cbnz	r3, 800316c <HAL_QSPI_Init+0x28>
    hqspi->Lock = HAL_UNLOCKED;
 800315c:	f884 2040 	strb.w	r2, [r4, #64]	@ 0x40
    HAL_QSPI_MspInit(hqspi);
 8003160:	4620      	mov	r0, r4
 8003162:	f7fe f927 	bl	80013b4 <HAL_QSPI_MspInit>
  hqspi->Timeout = Timeout;
 8003166:	f241 3388 	movw	r3, #5000	@ 0x1388
 800316a:	64a3      	str	r3, [r4, #72]	@ 0x48
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800316c:	6821      	ldr	r1, [r4, #0]
 800316e:	68a3      	ldr	r3, [r4, #8]
 8003170:	680a      	ldr	r2, [r1, #0]
 8003172:	3b01      	subs	r3, #1
 8003174:	f422 52f8 	bic.w	r2, r2, #7936	@ 0x1f00
 8003178:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800317c:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800317e:	600a      	str	r2, [r1, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8003180:	4620      	mov	r0, r4
 8003182:	9300      	str	r3, [sp, #0]
 8003184:	2200      	movs	r2, #0
 8003186:	462b      	mov	r3, r5
 8003188:	2120      	movs	r1, #32
 800318a:	f7ff ffb3 	bl	80030f4 <QSPI_WaitFlagStateUntilTimeout>
  if(status == HAL_OK)
 800318e:	bb10      	cbnz	r0, 80031d6 <HAL_QSPI_Init+0x92>
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8003190:	69e5      	ldr	r5, [r4, #28]
 8003192:	68e3      	ldr	r3, [r4, #12]
 8003194:	6822      	ldr	r2, [r4, #0]
 8003196:	432b      	orrs	r3, r5
 8003198:	6a25      	ldr	r5, [r4, #32]
 800319a:	6811      	ldr	r1, [r2, #0]
 800319c:	432b      	orrs	r3, r5
 800319e:	6865      	ldr	r5, [r4, #4]
 80031a0:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80031a4:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 80031a8:	f021 01d0 	bic.w	r1, r1, #208	@ 0xd0
 80031ac:	430b      	orrs	r3, r1
 80031ae:	6013      	str	r3, [r2, #0]
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80031b0:	e9d4 3105 	ldrd	r3, r1, [r4, #20]
 80031b4:	430b      	orrs	r3, r1
 80031b6:	6921      	ldr	r1, [r4, #16]
 80031b8:	6855      	ldr	r5, [r2, #4]
 80031ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80031be:	4909      	ldr	r1, [pc, #36]	@ (80031e4 <HAL_QSPI_Init+0xa0>)
 80031c0:	4029      	ands	r1, r5
 80031c2:	430b      	orrs	r3, r1
 80031c4:	6053      	str	r3, [r2, #4]
    __HAL_QSPI_ENABLE(hqspi);
 80031c6:	6813      	ldr	r3, [r2, #0]
 80031c8:	f043 0301 	orr.w	r3, r3, #1
 80031cc:	6013      	str	r3, [r2, #0]
    hqspi->State = HAL_QSPI_STATE_READY;
 80031ce:	2301      	movs	r3, #1
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80031d0:	6460      	str	r0, [r4, #68]	@ 0x44
    hqspi->State = HAL_QSPI_STATE_READY;
 80031d2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UNLOCK(hqspi);
 80031d6:	2300      	movs	r3, #0
 80031d8:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 80031dc:	b003      	add	sp, #12
 80031de:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 80031e0:	2001      	movs	r0, #1
 80031e2:	e7fb      	b.n	80031dc <HAL_QSPI_Init+0x98>
 80031e4:	ffe0f8fe 	.word	0xffe0f8fe

080031e8 <HAL_RCC_GetSysClockFreq>:
  uint32_t pllvco = 0U;
  uint32_t pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80031e8:	4913      	ldr	r1, [pc, #76]	@ (8003238 <HAL_RCC_GetSysClockFreq+0x50>)
{
 80031ea:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80031ec:	688b      	ldr	r3, [r1, #8]
 80031ee:	f003 030c 	and.w	r3, r3, #12
 80031f2:	2b04      	cmp	r3, #4
 80031f4:	d01c      	beq.n	8003230 <HAL_RCC_GetSysClockFreq+0x48>
 80031f6:	2b08      	cmp	r3, #8
 80031f8:	d11c      	bne.n	8003234 <HAL_RCC_GetSysClockFreq+0x4c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80031fa:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80031fc:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031fe:	6849      	ldr	r1, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003200:	f413 0380 	ands.w	r3, r3, #4194304	@ 0x400000
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003204:	bf14      	ite	ne
 8003206:	480d      	ldrne	r0, [pc, #52]	@ (800323c <HAL_RCC_GetSysClockFreq+0x54>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003208:	480d      	ldreq	r0, [pc, #52]	@ (8003240 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800320a:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800320e:	bf18      	it	ne
 8003210:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003212:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003216:	fba1 0100 	umull	r0, r1, r1, r0
 800321a:	f7fd f849 	bl	80002b0 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800321e:	4b06      	ldr	r3, [pc, #24]	@ (8003238 <HAL_RCC_GetSysClockFreq+0x50>)
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8003226:	3301      	adds	r3, #1
 8003228:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 800322a:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800322e:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003230:	4802      	ldr	r0, [pc, #8]	@ (800323c <HAL_RCC_GetSysClockFreq+0x54>)
 8003232:	e7fc      	b.n	800322e <HAL_RCC_GetSysClockFreq+0x46>
      sysclockfreq = HSI_VALUE;
 8003234:	4802      	ldr	r0, [pc, #8]	@ (8003240 <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 8003236:	e7fa      	b.n	800322e <HAL_RCC_GetSysClockFreq+0x46>
 8003238:	40023800 	.word	0x40023800
 800323c:	007a1200 	.word	0x007a1200
 8003240:	00f42400 	.word	0x00f42400

08003244 <HAL_RCC_ClockConfig>:
{
 8003244:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003248:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 800324a:	4604      	mov	r4, r0
 800324c:	b910      	cbnz	r0, 8003254 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800324e:	2001      	movs	r0, #1
}
 8003250:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003254:	4b43      	ldr	r3, [pc, #268]	@ (8003364 <HAL_RCC_ClockConfig+0x120>)
 8003256:	681a      	ldr	r2, [r3, #0]
 8003258:	f002 0207 	and.w	r2, r2, #7
 800325c:	428a      	cmp	r2, r1
 800325e:	d328      	bcc.n	80032b2 <HAL_RCC_ClockConfig+0x6e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003260:	6821      	ldr	r1, [r4, #0]
 8003262:	078f      	lsls	r7, r1, #30
 8003264:	d42d      	bmi.n	80032c2 <HAL_RCC_ClockConfig+0x7e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003266:	07c8      	lsls	r0, r1, #31
 8003268:	d440      	bmi.n	80032ec <HAL_RCC_ClockConfig+0xa8>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800326a:	4b3e      	ldr	r3, [pc, #248]	@ (8003364 <HAL_RCC_ClockConfig+0x120>)
 800326c:	681a      	ldr	r2, [r3, #0]
 800326e:	f002 0207 	and.w	r2, r2, #7
 8003272:	42aa      	cmp	r2, r5
 8003274:	d865      	bhi.n	8003342 <HAL_RCC_ClockConfig+0xfe>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003276:	6822      	ldr	r2, [r4, #0]
 8003278:	0751      	lsls	r1, r2, #29
 800327a:	d46b      	bmi.n	8003354 <HAL_RCC_ClockConfig+0x110>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800327c:	0713      	lsls	r3, r2, #28
 800327e:	d507      	bpl.n	8003290 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003280:	4a39      	ldr	r2, [pc, #228]	@ (8003368 <HAL_RCC_ClockConfig+0x124>)
 8003282:	6921      	ldr	r1, [r4, #16]
 8003284:	6893      	ldr	r3, [r2, #8]
 8003286:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 800328a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800328e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003290:	f7ff ffaa 	bl	80031e8 <HAL_RCC_GetSysClockFreq>
 8003294:	4b34      	ldr	r3, [pc, #208]	@ (8003368 <HAL_RCC_ClockConfig+0x124>)
 8003296:	4a35      	ldr	r2, [pc, #212]	@ (800336c <HAL_RCC_ClockConfig+0x128>)
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800329e:	5cd3      	ldrb	r3, [r2, r3]
 80032a0:	40d8      	lsrs	r0, r3
 80032a2:	4b33      	ldr	r3, [pc, #204]	@ (8003370 <HAL_RCC_ClockConfig+0x12c>)
 80032a4:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80032a6:	4b33      	ldr	r3, [pc, #204]	@ (8003374 <HAL_RCC_ClockConfig+0x130>)
 80032a8:	6818      	ldr	r0, [r3, #0]
 80032aa:	f7fe f917 	bl	80014dc <HAL_InitTick>
  return HAL_OK;
 80032ae:	2000      	movs	r0, #0
 80032b0:	e7ce      	b.n	8003250 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032b2:	b2ca      	uxtb	r2, r1
 80032b4:	701a      	strb	r2, [r3, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f003 0307 	and.w	r3, r3, #7
 80032bc:	428b      	cmp	r3, r1
 80032be:	d1c6      	bne.n	800324e <HAL_RCC_ClockConfig+0xa>
 80032c0:	e7ce      	b.n	8003260 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032c2:	4b29      	ldr	r3, [pc, #164]	@ (8003368 <HAL_RCC_ClockConfig+0x124>)
 80032c4:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032c8:	bf1e      	ittt	ne
 80032ca:	689a      	ldrne	r2, [r3, #8]
 80032cc:	f442 52e0 	orrne.w	r2, r2, #7168	@ 0x1c00
 80032d0:	609a      	strne	r2, [r3, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032d2:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80032d4:	bf42      	ittt	mi
 80032d6:	689a      	ldrmi	r2, [r3, #8]
 80032d8:	f442 4260 	orrmi.w	r2, r2, #57344	@ 0xe000
 80032dc:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032de:	689a      	ldr	r2, [r3, #8]
 80032e0:	68a0      	ldr	r0, [r4, #8]
 80032e2:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 80032e6:	4302      	orrs	r2, r0
 80032e8:	609a      	str	r2, [r3, #8]
 80032ea:	e7bc      	b.n	8003266 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032ec:	6862      	ldr	r2, [r4, #4]
 80032ee:	4b1e      	ldr	r3, [pc, #120]	@ (8003368 <HAL_RCC_ClockConfig+0x124>)
 80032f0:	2a01      	cmp	r2, #1
 80032f2:	d11c      	bne.n	800332e <HAL_RCC_ClockConfig+0xea>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032fa:	d0a8      	beq.n	800324e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032fc:	4e1a      	ldr	r6, [pc, #104]	@ (8003368 <HAL_RCC_ClockConfig+0x124>)
 80032fe:	68b3      	ldr	r3, [r6, #8]
 8003300:	f023 0303 	bic.w	r3, r3, #3
 8003304:	4313      	orrs	r3, r2
 8003306:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8003308:	f7fe fb96 	bl	8001a38 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800330c:	f241 3888 	movw	r8, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 8003310:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003312:	68b3      	ldr	r3, [r6, #8]
 8003314:	6862      	ldr	r2, [r4, #4]
 8003316:	f003 030c 	and.w	r3, r3, #12
 800331a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800331e:	d0a4      	beq.n	800326a <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003320:	f7fe fb8a 	bl	8001a38 <HAL_GetTick>
 8003324:	1bc0      	subs	r0, r0, r7
 8003326:	4540      	cmp	r0, r8
 8003328:	d9f3      	bls.n	8003312 <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 800332a:	2003      	movs	r0, #3
 800332c:	e790      	b.n	8003250 <HAL_RCC_ClockConfig+0xc>
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800332e:	1e91      	subs	r1, r2, #2
 8003330:	2901      	cmp	r1, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003332:	681b      	ldr	r3, [r3, #0]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003334:	d802      	bhi.n	800333c <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003336:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800333a:	e7de      	b.n	80032fa <HAL_RCC_ClockConfig+0xb6>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800333c:	f013 0f02 	tst.w	r3, #2
 8003340:	e7db      	b.n	80032fa <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003342:	b2ea      	uxtb	r2, r5
 8003344:	701a      	strb	r2, [r3, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f003 0307 	and.w	r3, r3, #7
 800334c:	42ab      	cmp	r3, r5
 800334e:	f47f af7e 	bne.w	800324e <HAL_RCC_ClockConfig+0xa>
 8003352:	e790      	b.n	8003276 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003354:	4904      	ldr	r1, [pc, #16]	@ (8003368 <HAL_RCC_ClockConfig+0x124>)
 8003356:	68e0      	ldr	r0, [r4, #12]
 8003358:	688b      	ldr	r3, [r1, #8]
 800335a:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 800335e:	4303      	orrs	r3, r0
 8003360:	608b      	str	r3, [r1, #8]
 8003362:	e78b      	b.n	800327c <HAL_RCC_ClockConfig+0x38>
 8003364:	40023c00 	.word	0x40023c00
 8003368:	40023800 	.word	0x40023800
 800336c:	0800ca4c 	.word	0x0800ca4c
 8003370:	20000004 	.word	0x20000004
 8003374:	2000000c 	.word	0x2000000c

08003378 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003378:	4b04      	ldr	r3, [pc, #16]	@ (800338c <HAL_RCC_GetPCLK1Freq+0x14>)
 800337a:	4a05      	ldr	r2, [pc, #20]	@ (8003390 <HAL_RCC_GetPCLK1Freq+0x18>)
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8003382:	5cd3      	ldrb	r3, [r2, r3]
 8003384:	4a03      	ldr	r2, [pc, #12]	@ (8003394 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8003386:	6810      	ldr	r0, [r2, #0]
}
 8003388:	40d8      	lsrs	r0, r3
 800338a:	4770      	bx	lr
 800338c:	40023800 	.word	0x40023800
 8003390:	0800ca44 	.word	0x0800ca44
 8003394:	20000004 	.word	0x20000004

08003398 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003398:	230f      	movs	r3, #15
 800339a:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800339c:	4b0b      	ldr	r3, [pc, #44]	@ (80033cc <HAL_RCC_GetClockConfig+0x34>)
 800339e:	689a      	ldr	r2, [r3, #8]
 80033a0:	f002 0203 	and.w	r2, r2, #3
 80033a4:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80033a6:	689a      	ldr	r2, [r3, #8]
 80033a8:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 80033ac:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80033ae:	689a      	ldr	r2, [r3, #8]
 80033b0:	f402 52e0 	and.w	r2, r2, #7168	@ 0x1c00
 80033b4:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	08db      	lsrs	r3, r3, #3
 80033ba:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 80033be:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80033c0:	4b03      	ldr	r3, [pc, #12]	@ (80033d0 <HAL_RCC_GetClockConfig+0x38>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f003 0307 	and.w	r3, r3, #7
 80033c8:	600b      	str	r3, [r1, #0]
}
 80033ca:	4770      	bx	lr
 80033cc:	40023800 	.word	0x40023800
 80033d0:	40023c00 	.word	0x40023c00

080033d4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033d4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80033d8:	4604      	mov	r4, r0
 80033da:	b340      	cbz	r0, 800342e <HAL_RCC_OscConfig+0x5a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033dc:	6803      	ldr	r3, [r0, #0]
 80033de:	07de      	lsls	r6, r3, #31
 80033e0:	d410      	bmi.n	8003404 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033e2:	6823      	ldr	r3, [r4, #0]
 80033e4:	079d      	lsls	r5, r3, #30
 80033e6:	d45b      	bmi.n	80034a0 <HAL_RCC_OscConfig+0xcc>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033e8:	6823      	ldr	r3, [r4, #0]
 80033ea:	0719      	lsls	r1, r3, #28
 80033ec:	f100 809d 	bmi.w	800352a <HAL_RCC_OscConfig+0x156>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033f0:	6823      	ldr	r3, [r4, #0]
 80033f2:	075a      	lsls	r2, r3, #29
 80033f4:	f100 80bd 	bmi.w	8003572 <HAL_RCC_OscConfig+0x19e>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033f8:	69a3      	ldr	r3, [r4, #24]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	f040 8124 	bne.w	8003648 <HAL_RCC_OscConfig+0x274>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8003400:	2000      	movs	r0, #0
 8003402:	e02c      	b.n	800345e <HAL_RCC_OscConfig+0x8a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003404:	4b8d      	ldr	r3, [pc, #564]	@ (800363c <HAL_RCC_OscConfig+0x268>)
 8003406:	689a      	ldr	r2, [r3, #8]
 8003408:	f002 020c 	and.w	r2, r2, #12
 800340c:	2a04      	cmp	r2, #4
 800340e:	d007      	beq.n	8003420 <HAL_RCC_OscConfig+0x4c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003410:	689a      	ldr	r2, [r3, #8]
 8003412:	f002 020c 	and.w	r2, r2, #12
        || \
 8003416:	2a08      	cmp	r2, #8
 8003418:	d10b      	bne.n	8003432 <HAL_RCC_OscConfig+0x5e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	0259      	lsls	r1, r3, #9
 800341e:	d508      	bpl.n	8003432 <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003420:	4b86      	ldr	r3, [pc, #536]	@ (800363c <HAL_RCC_OscConfig+0x268>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	039a      	lsls	r2, r3, #14
 8003426:	d5dc      	bpl.n	80033e2 <HAL_RCC_OscConfig+0xe>
 8003428:	6863      	ldr	r3, [r4, #4]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d1d9      	bne.n	80033e2 <HAL_RCC_OscConfig+0xe>
    return HAL_ERROR;
 800342e:	2001      	movs	r0, #1
 8003430:	e015      	b.n	800345e <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003432:	6863      	ldr	r3, [r4, #4]
 8003434:	4d81      	ldr	r5, [pc, #516]	@ (800363c <HAL_RCC_OscConfig+0x268>)
 8003436:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800343a:	d113      	bne.n	8003464 <HAL_RCC_OscConfig+0x90>
 800343c:	682b      	ldr	r3, [r5, #0]
 800343e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003442:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003444:	f7fe faf8 	bl	8001a38 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003448:	4e7c      	ldr	r6, [pc, #496]	@ (800363c <HAL_RCC_OscConfig+0x268>)
        tickstart = HAL_GetTick();
 800344a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800344c:	6833      	ldr	r3, [r6, #0]
 800344e:	039b      	lsls	r3, r3, #14
 8003450:	d4c7      	bmi.n	80033e2 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003452:	f7fe faf1 	bl	8001a38 <HAL_GetTick>
 8003456:	1b40      	subs	r0, r0, r5
 8003458:	2864      	cmp	r0, #100	@ 0x64
 800345a:	d9f7      	bls.n	800344c <HAL_RCC_OscConfig+0x78>
            return HAL_TIMEOUT;
 800345c:	2003      	movs	r0, #3
}
 800345e:	b002      	add	sp, #8
 8003460:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003464:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003468:	d104      	bne.n	8003474 <HAL_RCC_OscConfig+0xa0>
 800346a:	682b      	ldr	r3, [r5, #0]
 800346c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003470:	602b      	str	r3, [r5, #0]
 8003472:	e7e3      	b.n	800343c <HAL_RCC_OscConfig+0x68>
 8003474:	682a      	ldr	r2, [r5, #0]
 8003476:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800347a:	602a      	str	r2, [r5, #0]
 800347c:	682a      	ldr	r2, [r5, #0]
 800347e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003482:	602a      	str	r2, [r5, #0]
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003484:	2b00      	cmp	r3, #0
 8003486:	d1dd      	bne.n	8003444 <HAL_RCC_OscConfig+0x70>
        tickstart = HAL_GetTick();
 8003488:	f7fe fad6 	bl	8001a38 <HAL_GetTick>
 800348c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800348e:	682b      	ldr	r3, [r5, #0]
 8003490:	039f      	lsls	r7, r3, #14
 8003492:	d5a6      	bpl.n	80033e2 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003494:	f7fe fad0 	bl	8001a38 <HAL_GetTick>
 8003498:	1b80      	subs	r0, r0, r6
 800349a:	2864      	cmp	r0, #100	@ 0x64
 800349c:	d9f7      	bls.n	800348e <HAL_RCC_OscConfig+0xba>
 800349e:	e7dd      	b.n	800345c <HAL_RCC_OscConfig+0x88>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80034a0:	4b66      	ldr	r3, [pc, #408]	@ (800363c <HAL_RCC_OscConfig+0x268>)
 80034a2:	689a      	ldr	r2, [r3, #8]
 80034a4:	f012 0f0c 	tst.w	r2, #12
 80034a8:	d007      	beq.n	80034ba <HAL_RCC_OscConfig+0xe6>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034aa:	689a      	ldr	r2, [r3, #8]
 80034ac:	f002 020c 	and.w	r2, r2, #12
        || \
 80034b0:	2a08      	cmp	r2, #8
 80034b2:	d111      	bne.n	80034d8 <HAL_RCC_OscConfig+0x104>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	025d      	lsls	r5, r3, #9
 80034b8:	d40e      	bmi.n	80034d8 <HAL_RCC_OscConfig+0x104>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034ba:	4a60      	ldr	r2, [pc, #384]	@ (800363c <HAL_RCC_OscConfig+0x268>)
 80034bc:	6813      	ldr	r3, [r2, #0]
 80034be:	0799      	lsls	r1, r3, #30
 80034c0:	d502      	bpl.n	80034c8 <HAL_RCC_OscConfig+0xf4>
 80034c2:	68e3      	ldr	r3, [r4, #12]
 80034c4:	2b01      	cmp	r3, #1
 80034c6:	d1b2      	bne.n	800342e <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034c8:	6813      	ldr	r3, [r2, #0]
 80034ca:	6921      	ldr	r1, [r4, #16]
 80034cc:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80034d0:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80034d4:	6013      	str	r3, [r2, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034d6:	e787      	b.n	80033e8 <HAL_RCC_OscConfig+0x14>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80034d8:	68e2      	ldr	r2, [r4, #12]
 80034da:	4b59      	ldr	r3, [pc, #356]	@ (8003640 <HAL_RCC_OscConfig+0x26c>)
 80034dc:	b1b2      	cbz	r2, 800350c <HAL_RCC_OscConfig+0x138>
        __HAL_RCC_HSI_ENABLE();
 80034de:	2201      	movs	r2, #1
 80034e0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80034e2:	f7fe faa9 	bl	8001a38 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034e6:	4d55      	ldr	r5, [pc, #340]	@ (800363c <HAL_RCC_OscConfig+0x268>)
        tickstart = HAL_GetTick();
 80034e8:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034ea:	682b      	ldr	r3, [r5, #0]
 80034ec:	079b      	lsls	r3, r3, #30
 80034ee:	d507      	bpl.n	8003500 <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034f0:	682b      	ldr	r3, [r5, #0]
 80034f2:	6922      	ldr	r2, [r4, #16]
 80034f4:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80034f8:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80034fc:	602b      	str	r3, [r5, #0]
 80034fe:	e773      	b.n	80033e8 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003500:	f7fe fa9a 	bl	8001a38 <HAL_GetTick>
 8003504:	1b80      	subs	r0, r0, r6
 8003506:	2802      	cmp	r0, #2
 8003508:	d9ef      	bls.n	80034ea <HAL_RCC_OscConfig+0x116>
 800350a:	e7a7      	b.n	800345c <HAL_RCC_OscConfig+0x88>
        __HAL_RCC_HSI_DISABLE();
 800350c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800350e:	f7fe fa93 	bl	8001a38 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003512:	4e4a      	ldr	r6, [pc, #296]	@ (800363c <HAL_RCC_OscConfig+0x268>)
        tickstart = HAL_GetTick();
 8003514:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003516:	6833      	ldr	r3, [r6, #0]
 8003518:	079f      	lsls	r7, r3, #30
 800351a:	f57f af65 	bpl.w	80033e8 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800351e:	f7fe fa8b 	bl	8001a38 <HAL_GetTick>
 8003522:	1b40      	subs	r0, r0, r5
 8003524:	2802      	cmp	r0, #2
 8003526:	d9f6      	bls.n	8003516 <HAL_RCC_OscConfig+0x142>
 8003528:	e798      	b.n	800345c <HAL_RCC_OscConfig+0x88>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800352a:	6962      	ldr	r2, [r4, #20]
 800352c:	4b44      	ldr	r3, [pc, #272]	@ (8003640 <HAL_RCC_OscConfig+0x26c>)
 800352e:	b182      	cbz	r2, 8003552 <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8003530:	2201      	movs	r2, #1
 8003532:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80
      tickstart = HAL_GetTick();
 8003536:	f7fe fa7f 	bl	8001a38 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800353a:	4e40      	ldr	r6, [pc, #256]	@ (800363c <HAL_RCC_OscConfig+0x268>)
      tickstart = HAL_GetTick();
 800353c:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800353e:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 8003540:	079b      	lsls	r3, r3, #30
 8003542:	f53f af55 	bmi.w	80033f0 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003546:	f7fe fa77 	bl	8001a38 <HAL_GetTick>
 800354a:	1b40      	subs	r0, r0, r5
 800354c:	2802      	cmp	r0, #2
 800354e:	d9f6      	bls.n	800353e <HAL_RCC_OscConfig+0x16a>
 8003550:	e784      	b.n	800345c <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_LSI_DISABLE();
 8003552:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80
      tickstart = HAL_GetTick();
 8003556:	f7fe fa6f 	bl	8001a38 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800355a:	4e38      	ldr	r6, [pc, #224]	@ (800363c <HAL_RCC_OscConfig+0x268>)
      tickstart = HAL_GetTick();
 800355c:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800355e:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 8003560:	079f      	lsls	r7, r3, #30
 8003562:	f57f af45 	bpl.w	80033f0 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003566:	f7fe fa67 	bl	8001a38 <HAL_GetTick>
 800356a:	1b40      	subs	r0, r0, r5
 800356c:	2802      	cmp	r0, #2
 800356e:	d9f6      	bls.n	800355e <HAL_RCC_OscConfig+0x18a>
 8003570:	e774      	b.n	800345c <HAL_RCC_OscConfig+0x88>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003572:	4b32      	ldr	r3, [pc, #200]	@ (800363c <HAL_RCC_OscConfig+0x268>)
 8003574:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003576:	f012 5280 	ands.w	r2, r2, #268435456	@ 0x10000000
 800357a:	d128      	bne.n	80035ce <HAL_RCC_OscConfig+0x1fa>
      __HAL_RCC_PWR_CLK_ENABLE();
 800357c:	9201      	str	r2, [sp, #4]
 800357e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003580:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8003584:	641a      	str	r2, [r3, #64]	@ 0x40
 8003586:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003588:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800358c:	9301      	str	r3, [sp, #4]
 800358e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003590:	2701      	movs	r7, #1
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003592:	4d2c      	ldr	r5, [pc, #176]	@ (8003644 <HAL_RCC_OscConfig+0x270>)
 8003594:	682b      	ldr	r3, [r5, #0]
 8003596:	05d8      	lsls	r0, r3, #23
 8003598:	d51b      	bpl.n	80035d2 <HAL_RCC_OscConfig+0x1fe>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800359a:	68a3      	ldr	r3, [r4, #8]
 800359c:	4d27      	ldr	r5, [pc, #156]	@ (800363c <HAL_RCC_OscConfig+0x268>)
 800359e:	2b01      	cmp	r3, #1
 80035a0:	d127      	bne.n	80035f2 <HAL_RCC_OscConfig+0x21e>
 80035a2:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 80035a4:	f043 0301 	orr.w	r3, r3, #1
 80035a8:	672b      	str	r3, [r5, #112]	@ 0x70
      tickstart = HAL_GetTick();
 80035aa:	f7fe fa45 	bl	8001a38 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035ae:	4e23      	ldr	r6, [pc, #140]	@ (800363c <HAL_RCC_OscConfig+0x268>)
      tickstart = HAL_GetTick();
 80035b0:	4605      	mov	r5, r0
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035b2:	f241 3888 	movw	r8, #5000	@ 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035b6:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 80035b8:	079a      	lsls	r2, r3, #30
 80035ba:	d539      	bpl.n	8003630 <HAL_RCC_OscConfig+0x25c>
    if (pwrclkchanged == SET)
 80035bc:	2f00      	cmp	r7, #0
 80035be:	f43f af1b 	beq.w	80033f8 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 80035c2:	4a1e      	ldr	r2, [pc, #120]	@ (800363c <HAL_RCC_OscConfig+0x268>)
 80035c4:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80035c6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80035ca:	6413      	str	r3, [r2, #64]	@ 0x40
 80035cc:	e714      	b.n	80033f8 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 80035ce:	2700      	movs	r7, #0
 80035d0:	e7df      	b.n	8003592 <HAL_RCC_OscConfig+0x1be>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035d2:	682b      	ldr	r3, [r5, #0]
 80035d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80035d8:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80035da:	f7fe fa2d 	bl	8001a38 <HAL_GetTick>
 80035de:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035e0:	682b      	ldr	r3, [r5, #0]
 80035e2:	05d9      	lsls	r1, r3, #23
 80035e4:	d4d9      	bmi.n	800359a <HAL_RCC_OscConfig+0x1c6>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035e6:	f7fe fa27 	bl	8001a38 <HAL_GetTick>
 80035ea:	1b80      	subs	r0, r0, r6
 80035ec:	2802      	cmp	r0, #2
 80035ee:	d9f7      	bls.n	80035e0 <HAL_RCC_OscConfig+0x20c>
 80035f0:	e734      	b.n	800345c <HAL_RCC_OscConfig+0x88>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035f2:	2b05      	cmp	r3, #5
 80035f4:	d104      	bne.n	8003600 <HAL_RCC_OscConfig+0x22c>
 80035f6:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 80035f8:	f043 0304 	orr.w	r3, r3, #4
 80035fc:	672b      	str	r3, [r5, #112]	@ 0x70
 80035fe:	e7d0      	b.n	80035a2 <HAL_RCC_OscConfig+0x1ce>
 8003600:	6f2a      	ldr	r2, [r5, #112]	@ 0x70
 8003602:	f022 0201 	bic.w	r2, r2, #1
 8003606:	672a      	str	r2, [r5, #112]	@ 0x70
 8003608:	6f2a      	ldr	r2, [r5, #112]	@ 0x70
 800360a:	f022 0204 	bic.w	r2, r2, #4
 800360e:	672a      	str	r2, [r5, #112]	@ 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003610:	2b00      	cmp	r3, #0
 8003612:	d1ca      	bne.n	80035aa <HAL_RCC_OscConfig+0x1d6>
      tickstart = HAL_GetTick();
 8003614:	f7fe fa10 	bl	8001a38 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003618:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 800361c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800361e:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8003620:	079b      	lsls	r3, r3, #30
 8003622:	d5cb      	bpl.n	80035bc <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003624:	f7fe fa08 	bl	8001a38 <HAL_GetTick>
 8003628:	1b80      	subs	r0, r0, r6
 800362a:	4540      	cmp	r0, r8
 800362c:	d9f7      	bls.n	800361e <HAL_RCC_OscConfig+0x24a>
 800362e:	e715      	b.n	800345c <HAL_RCC_OscConfig+0x88>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003630:	f7fe fa02 	bl	8001a38 <HAL_GetTick>
 8003634:	1b40      	subs	r0, r0, r5
 8003636:	4540      	cmp	r0, r8
 8003638:	d9bd      	bls.n	80035b6 <HAL_RCC_OscConfig+0x1e2>
 800363a:	e70f      	b.n	800345c <HAL_RCC_OscConfig+0x88>
 800363c:	40023800 	.word	0x40023800
 8003640:	42470000 	.word	0x42470000
 8003644:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003648:	4d3c      	ldr	r5, [pc, #240]	@ (800373c <HAL_RCC_OscConfig+0x368>)
 800364a:	68aa      	ldr	r2, [r5, #8]
 800364c:	f002 020c 	and.w	r2, r2, #12
 8003650:	2a08      	cmp	r2, #8
 8003652:	d041      	beq.n	80036d8 <HAL_RCC_OscConfig+0x304>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003654:	2b02      	cmp	r3, #2
 8003656:	4b3a      	ldr	r3, [pc, #232]	@ (8003740 <HAL_RCC_OscConfig+0x36c>)
 8003658:	f04f 0200 	mov.w	r2, #0
        __HAL_RCC_PLL_DISABLE();
 800365c:	661a      	str	r2, [r3, #96]	@ 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800365e:	d12e      	bne.n	80036be <HAL_RCC_OscConfig+0x2ea>
        tickstart = HAL_GetTick();
 8003660:	f7fe f9ea 	bl	8001a38 <HAL_GetTick>
 8003664:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003666:	682b      	ldr	r3, [r5, #0]
 8003668:	0199      	lsls	r1, r3, #6
 800366a:	d422      	bmi.n	80036b2 <HAL_RCC_OscConfig+0x2de>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800366c:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8003670:	4313      	orrs	r3, r2
 8003672:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8003674:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8003678:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800367a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800367e:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8003680:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8003684:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8003686:	0852      	lsrs	r2, r2, #1
 8003688:	3a01      	subs	r2, #1
 800368a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800368e:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8003690:	4b2b      	ldr	r3, [pc, #172]	@ (8003740 <HAL_RCC_OscConfig+0x36c>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003692:	4d2a      	ldr	r5, [pc, #168]	@ (800373c <HAL_RCC_OscConfig+0x368>)
        __HAL_RCC_PLL_ENABLE();
 8003694:	2201      	movs	r2, #1
 8003696:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8003698:	f7fe f9ce 	bl	8001a38 <HAL_GetTick>
 800369c:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800369e:	682b      	ldr	r3, [r5, #0]
 80036a0:	019a      	lsls	r2, r3, #6
 80036a2:	f53f aead 	bmi.w	8003400 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036a6:	f7fe f9c7 	bl	8001a38 <HAL_GetTick>
 80036aa:	1b00      	subs	r0, r0, r4
 80036ac:	2802      	cmp	r0, #2
 80036ae:	d9f6      	bls.n	800369e <HAL_RCC_OscConfig+0x2ca>
 80036b0:	e6d4      	b.n	800345c <HAL_RCC_OscConfig+0x88>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036b2:	f7fe f9c1 	bl	8001a38 <HAL_GetTick>
 80036b6:	1b80      	subs	r0, r0, r6
 80036b8:	2802      	cmp	r0, #2
 80036ba:	d9d4      	bls.n	8003666 <HAL_RCC_OscConfig+0x292>
 80036bc:	e6ce      	b.n	800345c <HAL_RCC_OscConfig+0x88>
        tickstart = HAL_GetTick();
 80036be:	f7fe f9bb 	bl	8001a38 <HAL_GetTick>
 80036c2:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036c4:	682b      	ldr	r3, [r5, #0]
 80036c6:	019b      	lsls	r3, r3, #6
 80036c8:	f57f ae9a 	bpl.w	8003400 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036cc:	f7fe f9b4 	bl	8001a38 <HAL_GetTick>
 80036d0:	1b00      	subs	r0, r0, r4
 80036d2:	2802      	cmp	r0, #2
 80036d4:	d9f6      	bls.n	80036c4 <HAL_RCC_OscConfig+0x2f0>
 80036d6:	e6c1      	b.n	800345c <HAL_RCC_OscConfig+0x88>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036d8:	2b01      	cmp	r3, #1
 80036da:	f43f aea8 	beq.w	800342e <HAL_RCC_OscConfig+0x5a>
        pll_config = RCC->PLLCFGR;
 80036de:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036e0:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036e2:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036e6:	4291      	cmp	r1, r2
 80036e8:	f47f aea1 	bne.w	800342e <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036ec:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80036ee:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036f2:	428a      	cmp	r2, r1
 80036f4:	f47f ae9b 	bne.w	800342e <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80036f8:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80036fa:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 80036fe:	401a      	ands	r2, r3
 8003700:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8003704:	f47f ae93 	bne.w	800342e <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003708:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800370a:	0852      	lsrs	r2, r2, #1
 800370c:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 8003710:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003712:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8003716:	f47f ae8a 	bne.w	800342e <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800371a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800371c:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003720:	ebb2 6f01 	cmp.w	r2, r1, lsl #24
 8003724:	f47f ae83 	bne.w	800342e <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003728:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800372a:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800372e:	ebb3 7f02 	cmp.w	r3, r2, lsl #28
 8003732:	bf14      	ite	ne
 8003734:	2001      	movne	r0, #1
 8003736:	2000      	moveq	r0, #0
 8003738:	e691      	b.n	800345e <HAL_RCC_OscConfig+0x8a>
 800373a:	bf00      	nop
 800373c:	40023800 	.word	0x40023800
 8003740:	42470000 	.word	0x42470000

08003744 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8003744:	b570      	push	{r4, r5, r6, lr}
 8003746:	460e      	mov	r6, r1
 8003748:	4615      	mov	r5, r2
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 800374a:	4604      	mov	r4, r0
 800374c:	b328      	cbz	r0, 800379a <HAL_SRAM_Init+0x56>
  {
    return HAL_ERROR;
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 800374e:	f890 3049 	ldrb.w	r3, [r0, #73]	@ 0x49
 8003752:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8003756:	b91b      	cbnz	r3, 8003760 <HAL_SRAM_Init+0x1c>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8003758:	f880 2048 	strb.w	r2, [r0, #72]	@ 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800375c:	f7fd fc58 	bl	8001010 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8003760:	f104 0108 	add.w	r1, r4, #8
 8003764:	6820      	ldr	r0, [r4, #0]
 8003766:	f000 f96f 	bl	8003a48 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 800376a:	68a2      	ldr	r2, [r4, #8]
 800376c:	6820      	ldr	r0, [r4, #0]
 800376e:	4631      	mov	r1, r6
 8003770:	f000 f9ae 	bl	8003ad0 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8003774:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003776:	68a2      	ldr	r2, [r4, #8]
 8003778:	6860      	ldr	r0, [r4, #4]
 800377a:	4629      	mov	r1, r5
 800377c:	f000 f9ce 	bl	8003b1c <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8003780:	6822      	ldr	r2, [r4, #0]
 8003782:	68a1      	ldr	r1, [r4, #8]
 8003784:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8003788:	f043 0301 	orr.w	r3, r3, #1
 800378c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8003790:	2301      	movs	r3, #1
 8003792:	f884 3049 	strb.w	r3, [r4, #73]	@ 0x49

  return HAL_OK;
 8003796:	2000      	movs	r0, #0
}
 8003798:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800379a:	2001      	movs	r0, #1
 800379c:	e7fc      	b.n	8003798 <HAL_SRAM_Init+0x54>

0800379e <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800379e:	4770      	bx	lr

080037a0 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80037a0:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d130      	bne.n	800380a <HAL_TIM_Base_Start_IT+0x6a>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037a8:	2302      	movs	r3, #2
 80037aa:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80037ae:	6803      	ldr	r3, [r0, #0]
 80037b0:	68da      	ldr	r2, [r3, #12]
 80037b2:	f042 0201 	orr.w	r2, r2, #1
 80037b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037b8:	4a15      	ldr	r2, [pc, #84]	@ (8003810 <HAL_TIM_Base_Start_IT+0x70>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d01a      	beq.n	80037f4 <HAL_TIM_Base_Start_IT+0x54>
 80037be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037c2:	d017      	beq.n	80037f4 <HAL_TIM_Base_Start_IT+0x54>
 80037c4:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d013      	beq.n	80037f4 <HAL_TIM_Base_Start_IT+0x54>
 80037cc:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d00f      	beq.n	80037f4 <HAL_TIM_Base_Start_IT+0x54>
 80037d4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80037d8:	4293      	cmp	r3, r2
 80037da:	d00b      	beq.n	80037f4 <HAL_TIM_Base_Start_IT+0x54>
 80037dc:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d007      	beq.n	80037f4 <HAL_TIM_Base_Start_IT+0x54>
 80037e4:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d003      	beq.n	80037f4 <HAL_TIM_Base_Start_IT+0x54>
 80037ec:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d104      	bne.n	80037fe <HAL_TIM_Base_Start_IT+0x5e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80037f4:	689a      	ldr	r2, [r3, #8]
 80037f6:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037fa:	2a06      	cmp	r2, #6
 80037fc:	d003      	beq.n	8003806 <HAL_TIM_Base_Start_IT+0x66>
    {
      __HAL_TIM_ENABLE(htim);
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	f042 0201 	orr.w	r2, r2, #1
 8003804:	601a      	str	r2, [r3, #0]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 8003806:	2000      	movs	r0, #0
 8003808:	4770      	bx	lr
    return HAL_ERROR;
 800380a:	2001      	movs	r0, #1
}
 800380c:	4770      	bx	lr
 800380e:	bf00      	nop
 8003810:	40010000 	.word	0x40010000

08003814 <HAL_TIM_OC_DelayElapsedCallback>:
/**
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 8003814:	4770      	bx	lr

08003816 <HAL_TIM_IC_CaptureCallback>:
/**
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 8003816:	4770      	bx	lr

08003818 <HAL_TIM_PWM_PulseFinishedCallback>:
/**
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 8003818:	4770      	bx	lr

0800381a <HAL_TIM_TriggerCallback>:
/**
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 800381a:	4770      	bx	lr

0800381c <HAL_TIM_IRQHandler>:
  uint32_t itsource = htim->Instance->DIER;
 800381c:	6803      	ldr	r3, [r0, #0]
{
 800381e:	b570      	push	{r4, r5, r6, lr}
  uint32_t itsource = htim->Instance->DIER;
 8003820:	68dd      	ldr	r5, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003822:	691e      	ldr	r6, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003824:	07b1      	lsls	r1, r6, #30
{
 8003826:	4604      	mov	r4, r0
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003828:	d50d      	bpl.n	8003846 <HAL_TIM_IRQHandler+0x2a>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800382a:	07aa      	lsls	r2, r5, #30
 800382c:	d50b      	bpl.n	8003846 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800382e:	f06f 0202 	mvn.w	r2, #2
 8003832:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003834:	2201      	movs	r2, #1
 8003836:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003838:	699b      	ldr	r3, [r3, #24]
 800383a:	079b      	lsls	r3, r3, #30
 800383c:	d069      	beq.n	8003912 <HAL_TIM_IRQHandler+0xf6>
          HAL_TIM_IC_CaptureCallback(htim);
 800383e:	f7ff ffea 	bl	8003816 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003842:	2300      	movs	r3, #0
 8003844:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003846:	0771      	lsls	r1, r6, #29
 8003848:	d510      	bpl.n	800386c <HAL_TIM_IRQHandler+0x50>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800384a:	076a      	lsls	r2, r5, #29
 800384c:	d50e      	bpl.n	800386c <HAL_TIM_IRQHandler+0x50>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800384e:	6823      	ldr	r3, [r4, #0]
 8003850:	f06f 0204 	mvn.w	r2, #4
 8003854:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003856:	2202      	movs	r2, #2
 8003858:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800385a:	699b      	ldr	r3, [r3, #24]
 800385c:	f413 7f40 	tst.w	r3, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8003860:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003862:	d05c      	beq.n	800391e <HAL_TIM_IRQHandler+0x102>
        HAL_TIM_IC_CaptureCallback(htim);
 8003864:	f7ff ffd7 	bl	8003816 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003868:	2300      	movs	r3, #0
 800386a:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800386c:	0733      	lsls	r3, r6, #28
 800386e:	d50f      	bpl.n	8003890 <HAL_TIM_IRQHandler+0x74>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003870:	0728      	lsls	r0, r5, #28
 8003872:	d50d      	bpl.n	8003890 <HAL_TIM_IRQHandler+0x74>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003874:	6823      	ldr	r3, [r4, #0]
 8003876:	f06f 0208 	mvn.w	r2, #8
 800387a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800387c:	2204      	movs	r2, #4
 800387e:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003880:	69db      	ldr	r3, [r3, #28]
 8003882:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8003884:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003886:	d050      	beq.n	800392a <HAL_TIM_IRQHandler+0x10e>
        HAL_TIM_IC_CaptureCallback(htim);
 8003888:	f7ff ffc5 	bl	8003816 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800388c:	2300      	movs	r3, #0
 800388e:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003890:	06f2      	lsls	r2, r6, #27
 8003892:	d510      	bpl.n	80038b6 <HAL_TIM_IRQHandler+0x9a>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003894:	06eb      	lsls	r3, r5, #27
 8003896:	d50e      	bpl.n	80038b6 <HAL_TIM_IRQHandler+0x9a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003898:	6823      	ldr	r3, [r4, #0]
 800389a:	f06f 0210 	mvn.w	r2, #16
 800389e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80038a0:	2208      	movs	r2, #8
 80038a2:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80038a4:	69db      	ldr	r3, [r3, #28]
 80038a6:	f413 7f40 	tst.w	r3, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 80038aa:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80038ac:	d043      	beq.n	8003936 <HAL_TIM_IRQHandler+0x11a>
        HAL_TIM_IC_CaptureCallback(htim);
 80038ae:	f7ff ffb2 	bl	8003816 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038b2:	2300      	movs	r3, #0
 80038b4:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80038b6:	07f0      	lsls	r0, r6, #31
 80038b8:	d508      	bpl.n	80038cc <HAL_TIM_IRQHandler+0xb0>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80038ba:	07e9      	lsls	r1, r5, #31
 80038bc:	d506      	bpl.n	80038cc <HAL_TIM_IRQHandler+0xb0>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80038be:	6823      	ldr	r3, [r4, #0]
 80038c0:	f06f 0201 	mvn.w	r2, #1
 80038c4:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80038c6:	4620      	mov	r0, r4
 80038c8:	f7fd fd48 	bl	800135c <HAL_TIM_PeriodElapsedCallback>
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80038cc:	0632      	lsls	r2, r6, #24
 80038ce:	d508      	bpl.n	80038e2 <HAL_TIM_IRQHandler+0xc6>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80038d0:	062b      	lsls	r3, r5, #24
 80038d2:	d506      	bpl.n	80038e2 <HAL_TIM_IRQHandler+0xc6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80038d4:	6823      	ldr	r3, [r4, #0]
 80038d6:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80038da:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80038dc:	4620      	mov	r0, r4
 80038de:	f000 f8b2 	bl	8003a46 <HAL_TIMEx_BreakCallback>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80038e2:	0670      	lsls	r0, r6, #25
 80038e4:	d508      	bpl.n	80038f8 <HAL_TIM_IRQHandler+0xdc>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80038e6:	0669      	lsls	r1, r5, #25
 80038e8:	d506      	bpl.n	80038f8 <HAL_TIM_IRQHandler+0xdc>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80038ea:	6823      	ldr	r3, [r4, #0]
 80038ec:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80038f0:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80038f2:	4620      	mov	r0, r4
 80038f4:	f7ff ff91 	bl	800381a <HAL_TIM_TriggerCallback>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80038f8:	06b2      	lsls	r2, r6, #26
 80038fa:	d522      	bpl.n	8003942 <HAL_TIM_IRQHandler+0x126>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80038fc:	06ab      	lsls	r3, r5, #26
 80038fe:	d520      	bpl.n	8003942 <HAL_TIM_IRQHandler+0x126>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003900:	6823      	ldr	r3, [r4, #0]
 8003902:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8003906:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003908:	611a      	str	r2, [r3, #16]
}
 800390a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      HAL_TIMEx_CommutCallback(htim);
 800390e:	f000 b899 	b.w	8003a44 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003912:	f7ff ff7f 	bl	8003814 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003916:	4620      	mov	r0, r4
 8003918:	f7ff ff7e 	bl	8003818 <HAL_TIM_PWM_PulseFinishedCallback>
 800391c:	e791      	b.n	8003842 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800391e:	f7ff ff79 	bl	8003814 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003922:	4620      	mov	r0, r4
 8003924:	f7ff ff78 	bl	8003818 <HAL_TIM_PWM_PulseFinishedCallback>
 8003928:	e79e      	b.n	8003868 <HAL_TIM_IRQHandler+0x4c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800392a:	f7ff ff73 	bl	8003814 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800392e:	4620      	mov	r0, r4
 8003930:	f7ff ff72 	bl	8003818 <HAL_TIM_PWM_PulseFinishedCallback>
 8003934:	e7aa      	b.n	800388c <HAL_TIM_IRQHandler+0x70>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003936:	f7ff ff6d 	bl	8003814 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800393a:	4620      	mov	r0, r4
 800393c:	f7ff ff6c 	bl	8003818 <HAL_TIM_PWM_PulseFinishedCallback>
 8003940:	e7b7      	b.n	80038b2 <HAL_TIM_IRQHandler+0x96>
}
 8003942:	bd70      	pop	{r4, r5, r6, pc}

08003944 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003944:	4a27      	ldr	r2, [pc, #156]	@ (80039e4 <TIM_Base_SetConfig+0xa0>)
  tmpcr1 = TIMx->CR1;
 8003946:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003948:	4290      	cmp	r0, r2
 800394a:	d012      	beq.n	8003972 <TIM_Base_SetConfig+0x2e>
 800394c:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8003950:	d00f      	beq.n	8003972 <TIM_Base_SetConfig+0x2e>
 8003952:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8003956:	4290      	cmp	r0, r2
 8003958:	d00b      	beq.n	8003972 <TIM_Base_SetConfig+0x2e>
 800395a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800395e:	4290      	cmp	r0, r2
 8003960:	d007      	beq.n	8003972 <TIM_Base_SetConfig+0x2e>
 8003962:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003966:	4290      	cmp	r0, r2
 8003968:	d003      	beq.n	8003972 <TIM_Base_SetConfig+0x2e>
 800396a:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800396e:	4290      	cmp	r0, r2
 8003970:	d108      	bne.n	8003984 <TIM_Base_SetConfig+0x40>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8003972:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003974:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8003978:	4313      	orrs	r3, r2

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800397a:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800397c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003980:	4313      	orrs	r3, r2
 8003982:	e016      	b.n	80039b2 <TIM_Base_SetConfig+0x6e>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003984:	4a18      	ldr	r2, [pc, #96]	@ (80039e8 <TIM_Base_SetConfig+0xa4>)
 8003986:	4290      	cmp	r0, r2
 8003988:	d0f7      	beq.n	800397a <TIM_Base_SetConfig+0x36>
 800398a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800398e:	4290      	cmp	r0, r2
 8003990:	d0f3      	beq.n	800397a <TIM_Base_SetConfig+0x36>
 8003992:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003996:	4290      	cmp	r0, r2
 8003998:	d0ef      	beq.n	800397a <TIM_Base_SetConfig+0x36>
 800399a:	f5a2 3298 	sub.w	r2, r2, #77824	@ 0x13000
 800399e:	4290      	cmp	r0, r2
 80039a0:	d0eb      	beq.n	800397a <TIM_Base_SetConfig+0x36>
 80039a2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80039a6:	4290      	cmp	r0, r2
 80039a8:	d0e7      	beq.n	800397a <TIM_Base_SetConfig+0x36>
 80039aa:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80039ae:	4290      	cmp	r0, r2
 80039b0:	d0e3      	beq.n	800397a <TIM_Base_SetConfig+0x36>
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039b2:	694a      	ldr	r2, [r1, #20]
 80039b4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80039b8:	4313      	orrs	r3, r2

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039ba:	688a      	ldr	r2, [r1, #8]
 80039bc:	62c2      	str	r2, [r0, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80039be:	680a      	ldr	r2, [r1, #0]
 80039c0:	6282      	str	r2, [r0, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80039c2:	4a08      	ldr	r2, [pc, #32]	@ (80039e4 <TIM_Base_SetConfig+0xa0>)
 80039c4:	4290      	cmp	r0, r2
 80039c6:	d003      	beq.n	80039d0 <TIM_Base_SetConfig+0x8c>
 80039c8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80039cc:	4290      	cmp	r0, r2
 80039ce:	d101      	bne.n	80039d4 <TIM_Base_SetConfig+0x90>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80039d0:	690a      	ldr	r2, [r1, #16]
 80039d2:	6302      	str	r2, [r0, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80039d4:	6802      	ldr	r2, [r0, #0]
 80039d6:	f042 0204 	orr.w	r2, r2, #4
 80039da:	6002      	str	r2, [r0, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80039dc:	2201      	movs	r2, #1
 80039de:	6142      	str	r2, [r0, #20]

  TIMx->CR1 = tmpcr1;
 80039e0:	6003      	str	r3, [r0, #0]
}
 80039e2:	4770      	bx	lr
 80039e4:	40010000 	.word	0x40010000
 80039e8:	40014000 	.word	0x40014000

080039ec <HAL_TIM_Base_Init>:
{
 80039ec:	b510      	push	{r4, lr}
  if (htim == NULL)
 80039ee:	4604      	mov	r4, r0
 80039f0:	b330      	cbz	r0, 8003a40 <HAL_TIM_Base_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 80039f2:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80039f6:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80039fa:	b91b      	cbnz	r3, 8003a04 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80039fc:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8003a00:	f7ff fecd 	bl	800379e <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8003a04:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a06:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8003a08:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a0c:	1d21      	adds	r1, r4, #4
 8003a0e:	f7ff ff99 	bl	8003944 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a12:	2301      	movs	r3, #1
 8003a14:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  return HAL_OK;
 8003a18:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a1a:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8003a1e:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8003a22:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8003a26:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a2a:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003a2e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003a32:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8003a36:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8003a3a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 8003a3e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003a40:	2001      	movs	r0, #1
 8003a42:	e7fc      	b.n	8003a3e <HAL_TIM_Base_Init+0x52>

08003a44 <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 8003a44:	4770      	bx	lr

08003a46 <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 8003a46:	4770      	bx	lr

08003a48 <FSMC_NORSRAM_Init>:
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FSMC_BCR1_WFDIS */
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8003a48:	680a      	ldr	r2, [r1, #0]
 8003a4a:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
 8003a4e:	f023 0301 	bic.w	r3, r3, #1
{
 8003a52:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8003a54:	688d      	ldr	r5, [r1, #8]
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8003a56:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
#if defined(FSMC_BCR1_WFDIS)
  mask |= FSMC_BCR1_WFDIS;
#endif /* FSMC_BCR1_WFDIS */
  mask |= FSMC_BCR1_CPSIZE;

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8003a5a:	684b      	ldr	r3, [r1, #4]
 8003a5c:	68cf      	ldr	r7, [r1, #12]
 8003a5e:	f850 c022 	ldr.w	ip, [r0, r2, lsl #2]
 8003a62:	432b      	orrs	r3, r5
 8003a64:	433b      	orrs	r3, r7
 8003a66:	690f      	ldr	r7, [r1, #16]
 8003a68:	433b      	orrs	r3, r7
 8003a6a:	694f      	ldr	r7, [r1, #20]
 8003a6c:	433b      	orrs	r3, r7
 8003a6e:	69cf      	ldr	r7, [r1, #28]
 8003a70:	433b      	orrs	r3, r7
 8003a72:	6a0f      	ldr	r7, [r1, #32]
 8003a74:	433b      	orrs	r3, r7
 8003a76:	6a4f      	ldr	r7, [r1, #36]	@ 0x24
 8003a78:	433b      	orrs	r3, r7
 8003a7a:	6a8f      	ldr	r7, [r1, #40]	@ 0x28
 8003a7c:	433b      	orrs	r3, r7
 8003a7e:	6acf      	ldr	r7, [r1, #44]	@ 0x2c
  btcr_reg |= Init->WriteFifo;
 8003a80:	e9d1 640d 	ldrd	r6, r4, [r1, #52]	@ 0x34
  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8003a84:	433b      	orrs	r3, r7
 8003a86:	6b0f      	ldr	r7, [r1, #48]	@ 0x30
 8003a88:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
 8003a8a:	433b      	orrs	r3, r7
 8003a8c:	4333      	orrs	r3, r6
 8003a8e:	4323      	orrs	r3, r4
 8003a90:	430b      	orrs	r3, r1
 8003a92:	490e      	ldr	r1, [pc, #56]	@ (8003acc <FSMC_NORSRAM_Init+0x84>)
 8003a94:	ea01 010c 	and.w	r1, r1, ip
 8003a98:	430b      	orrs	r3, r1
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8003a9a:	f1a5 0108 	sub.w	r1, r5, #8
 8003a9e:	424d      	negs	r5, r1
 8003aa0:	414d      	adcs	r5, r1
  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8003aa2:	ea43 1385 	orr.w	r3, r3, r5, lsl #6

#if defined(FSMC_BCR1_CCLKEN)
  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FSMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FSMC_NORSRAM_BANK1))
 8003aa6:	f5b6 1f80 	cmp.w	r6, #1048576	@ 0x100000
  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8003aaa:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
  if ((Init->ContinuousClock == FSMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FSMC_NORSRAM_BANK1))
 8003aae:	d108      	bne.n	8003ac2 <FSMC_NORSRAM_Init+0x7a>
 8003ab0:	b14a      	cbz	r2, 8003ac6 <FSMC_NORSRAM_Init+0x7e>
  {
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1], FSMC_BCR1_CCLKEN, Init->ContinuousClock);
 8003ab2:	6803      	ldr	r3, [r0, #0]
 8003ab4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003ab8:	6003      	str	r3, [r0, #0]
#if defined(FSMC_BCR1_WFDIS)

  if (Init->NSBank != FSMC_NORSRAM_BANK1)
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FSMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 8003aba:	6803      	ldr	r3, [r0, #0]
 8003abc:	431c      	orrs	r4, r3
 8003abe:	6004      	str	r4, [r0, #0]
 8003ac0:	e001      	b.n	8003ac6 <FSMC_NORSRAM_Init+0x7e>
  if (Init->NSBank != FSMC_NORSRAM_BANK1)
 8003ac2:	2a00      	cmp	r2, #0
 8003ac4:	d1f9      	bne.n	8003aba <FSMC_NORSRAM_Init+0x72>
  }
#endif /* FSMC_BCR1_WFDIS */

  return HAL_OK;
}
 8003ac6:	2000      	movs	r0, #0
 8003ac8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003aca:	bf00      	nop
 8003acc:	ffc00480 	.word	0xffc00480

08003ad0 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                           const FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8003ad0:	b570      	push	{r4, r5, r6, lr}
    (Timing->AddressSetupTime << FSMC_BTR1_ADDSET_Pos) |
    (Timing->AddressHoldTime << FSMC_BTR1_ADDHLD_Pos) |
    (Timing->DataSetupTime << FSMC_BTR1_DATAST_Pos) |
    (Timing->BusTurnAroundDuration << FSMC_BTR1_BUSTURN_Pos) |
    ((Timing->CLKDivision - 1U) << FSMC_BTR1_CLKDIV_Pos) |
    ((Timing->DataLatency - 2U) << FSMC_BTR1_DATLAT_Pos) |
 8003ad2:	680b      	ldr	r3, [r1, #0]
 8003ad4:	698e      	ldr	r6, [r1, #24]
    ((Timing->CLKDivision - 1U) << FSMC_BTR1_CLKDIV_Pos) |
 8003ad6:	690c      	ldr	r4, [r1, #16]
    ((Timing->DataLatency - 2U) << FSMC_BTR1_DATLAT_Pos) |
 8003ad8:	4333      	orrs	r3, r6
    (Timing->AddressHoldTime << FSMC_BTR1_ADDHLD_Pos) |
 8003ada:	684e      	ldr	r6, [r1, #4]
    ((Timing->DataLatency - 2U) << FSMC_BTR1_DATLAT_Pos) |
 8003adc:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
    (Timing->DataSetupTime << FSMC_BTR1_DATAST_Pos) |
 8003ae0:	688e      	ldr	r6, [r1, #8]
    ((Timing->DataLatency - 2U) << FSMC_BTR1_DATLAT_Pos) |
 8003ae2:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
    (Timing->BusTurnAroundDuration << FSMC_BTR1_BUSTURN_Pos) |
 8003ae6:	68ce      	ldr	r6, [r1, #12]
    ((Timing->DataLatency - 2U) << FSMC_BTR1_DATLAT_Pos) |
 8003ae8:	6949      	ldr	r1, [r1, #20]
    ((Timing->CLKDivision - 1U) << FSMC_BTR1_CLKDIV_Pos) |
 8003aea:	3c01      	subs	r4, #1
    ((Timing->DataLatency - 2U) << FSMC_BTR1_DATLAT_Pos) |
 8003aec:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
  Device->BTCR[Bank + 1U] =
 8003af0:	3201      	adds	r2, #1
    ((Timing->DataLatency - 2U) << FSMC_BTR1_DATLAT_Pos) |
 8003af2:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
 8003af6:	3902      	subs	r1, #2
 8003af8:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
  Device->BTCR[Bank + 1U] =
 8003afc:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
    Timing->AccessMode;

#if defined(FSMC_BCR1_CCLKEN)
  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FSMC_NORSRAM_BANK1], FSMC_BCR1_CCLKEN))
 8003b00:	6803      	ldr	r3, [r0, #0]
 8003b02:	02db      	lsls	r3, r3, #11
    ((Timing->CLKDivision - 1U) << FSMC_BTR1_CLKDIV_Pos) |
 8003b04:	ea4f 5504 	mov.w	r5, r4, lsl #20
  if (HAL_IS_BIT_SET(Device->BTCR[FSMC_NORSRAM_BANK1], FSMC_BCR1_CCLKEN))
 8003b08:	d506      	bpl.n	8003b18 <FSMC_NORSRAM_Timing_Init+0x48>
  {
    tmpr = (uint32_t)(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FSMC_BTR1_CLKDIV_Pos));
 8003b0a:	6843      	ldr	r3, [r0, #4]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FSMC_BTR1_CLKDIV_Pos);
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U], FSMC_BTR1_CLKDIV, tmpr);
 8003b0c:	6842      	ldr	r2, [r0, #4]
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003b14:	432b      	orrs	r3, r5
 8003b16:	6043      	str	r3, [r0, #4]
  }

#endif /* FSMC_BCR1_CCLKEN */
  return HAL_OK;
}
 8003b18:	2000      	movs	r0, #0
 8003b1a:	bd70      	pop	{r4, r5, r6, pc}

08003b1c <FSMC_NORSRAM_Extended_Timing_Init>:
{
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8003b1c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
{
 8003b20:	b530      	push	{r4, r5, lr}
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8003b22:	d114      	bne.n	8003b4e <FSMC_NORSRAM_Extended_Timing_Init+0x32>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8003b24:	698d      	ldr	r5, [r1, #24]
 8003b26:	680b      	ldr	r3, [r1, #0]
 8003b28:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
 8003b2c:	432b      	orrs	r3, r5
 8003b2e:	684d      	ldr	r5, [r1, #4]
 8003b30:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
 8003b34:	688d      	ldr	r5, [r1, #8]
 8003b36:	68c9      	ldr	r1, [r1, #12]
 8003b38:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8003b3c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8003b40:	4904      	ldr	r1, [pc, #16]	@ (8003b54 <FSMC_NORSRAM_Extended_Timing_Init+0x38>)
 8003b42:	4021      	ands	r1, r4
 8003b44:	430b      	orrs	r3, r1
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FSMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8003b46:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
  }

  return HAL_OK;
}
 8003b4a:	2000      	movs	r0, #0
 8003b4c:	bd30      	pop	{r4, r5, pc}
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8003b4e:	f06f 4370 	mvn.w	r3, #4026531840	@ 0xf0000000
 8003b52:	e7f8      	b.n	8003b46 <FSMC_NORSRAM_Extended_Timing_Init+0x2a>
 8003b54:	cff00000 	.word	0xcff00000

08003b58 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003b58:	b508      	push	{r3, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
 8003b5a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8003b5e:	691b      	ldr	r3, [r3, #16]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003b60:	f001 fe24 	bl	80057ac <xTaskGetSchedulerState>
 8003b64:	2801      	cmp	r0, #1
 8003b66:	d003      	beq.n	8003b70 <SysTick_Handler+0x18>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
 8003b68:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 8003b6c:	f000 bbe2 	b.w	8004334 <xPortSysTickHandler>
}
 8003b70:	bd08      	pop	{r3, pc}
	...

08003b74 <osKernelInitialize>:
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003b74:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8003b78:	b92b      	cbnz	r3, 8003b86 <osKernelInitialize+0x12>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 8003b7a:	4b06      	ldr	r3, [pc, #24]	@ (8003b94 <osKernelInitialize+0x20>)
 8003b7c:	6818      	ldr	r0, [r3, #0]
 8003b7e:	b928      	cbnz	r0, 8003b8c <osKernelInitialize+0x18>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003b80:	2201      	movs	r2, #1
 8003b82:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003b84:	4770      	bx	lr
    stat = osErrorISR;
 8003b86:	f06f 0005 	mvn.w	r0, #5
 8003b8a:	4770      	bx	lr
    } else {
      stat = osError;
 8003b8c:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 8003b90:	4770      	bx	lr
 8003b92:	bf00      	nop
 8003b94:	20000ad8 	.word	0x20000ad8

08003b98 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003b98:	b510      	push	{r4, lr}
 8003b9a:	f3ef 8405 	mrs	r4, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8003b9e:	b95c      	cbnz	r4, 8003bb8 <osKernelStart+0x20>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 8003ba0:	4b08      	ldr	r3, [pc, #32]	@ (8003bc4 <osKernelStart+0x2c>)
 8003ba2:	681a      	ldr	r2, [r3, #0]
 8003ba4:	2a01      	cmp	r2, #1
 8003ba6:	d10a      	bne.n	8003bbe <osKernelStart+0x26>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ba8:	4a07      	ldr	r2, [pc, #28]	@ (8003bc8 <osKernelStart+0x30>)
 8003baa:	77d4      	strb	r4, [r2, #31]
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003bac:	2202      	movs	r2, #2
 8003bae:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003bb0:	f001 fca4 	bl	80054fc <vTaskStartScheduler>
      stat = osOK;
 8003bb4:	4620      	mov	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
 8003bb6:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 8003bb8:	f06f 0005 	mvn.w	r0, #5
 8003bbc:	e7fb      	b.n	8003bb6 <osKernelStart+0x1e>
      stat = osError;
 8003bbe:	f04f 30ff 	mov.w	r0, #4294967295
  return (stat);
 8003bc2:	e7f8      	b.n	8003bb6 <osKernelStart+0x1e>
 8003bc4:	20000ad8 	.word	0x20000ad8
 8003bc8:	e000ed00 	.word	0xe000ed00

08003bcc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003bce:	b087      	sub	sp, #28
 8003bd0:	4614      	mov	r4, r2
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003bd2:	2200      	movs	r2, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003bd4:	460b      	mov	r3, r1
  hTask = NULL;
 8003bd6:	9205      	str	r2, [sp, #20]
 8003bd8:	f3ef 8205 	mrs	r2, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 8003bdc:	b9fa      	cbnz	r2, 8003c1e <osThreadNew+0x52>
 8003bde:	b1f0      	cbz	r0, 8003c1e <osThreadNew+0x52>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 8003be0:	b354      	cbz	r4, 8003c38 <osThreadNew+0x6c>
      if (attr->name != NULL) {
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 8003be2:	69a5      	ldr	r5, [r4, #24]
 8003be4:	b125      	cbz	r5, 8003bf0 <osThreadNew+0x24>
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003be6:	1e69      	subs	r1, r5, #1
 8003be8:	2937      	cmp	r1, #55	@ 0x37
 8003bea:	d902      	bls.n	8003bf2 <osThreadNew+0x26>
        return (NULL);
 8003bec:	2000      	movs	r0, #0
 8003bee:	e017      	b.n	8003c20 <osThreadNew+0x54>
    prio  = (UBaseType_t)osPriorityNormal;
 8003bf0:	2518      	movs	r5, #24
      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003bf2:	6862      	ldr	r2, [r4, #4]
 8003bf4:	07d2      	lsls	r2, r2, #31
 8003bf6:	d4f9      	bmi.n	8003bec <osThreadNew+0x20>
      }

      if (attr->stack_size > 0U) {
 8003bf8:	6966      	ldr	r6, [r4, #20]
 8003bfa:	b19e      	cbz	r6, 8003c24 <osThreadNew+0x58>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003bfc:	08b2      	lsrs	r2, r6, #2
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003bfe:	e9d4 7c02 	ldrd	r7, ip, [r4, #8]
      if (attr->name != NULL) {
 8003c02:	6821      	ldr	r1, [r4, #0]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003c04:	b187      	cbz	r7, 8003c28 <osThreadNew+0x5c>
 8003c06:	f1bc 0f5f 	cmp.w	ip, #95	@ 0x5f
 8003c0a:	d908      	bls.n	8003c1e <osThreadNew+0x52>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003c0c:	6924      	ldr	r4, [r4, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003c0e:	b134      	cbz	r4, 8003c1e <osThreadNew+0x52>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003c10:	b12e      	cbz	r6, 8003c1e <osThreadNew+0x52>
      mem = 0;
    }

    if (mem == 1) {
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003c12:	e9cd 4701 	strd	r4, r7, [sp, #4]
 8003c16:	9500      	str	r5, [sp, #0]
 8003c18:	f001 fab1 	bl	800517e <xTaskCreateStatic>
 8003c1c:	9005      	str	r0, [sp, #20]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003c1e:	9805      	ldr	r0, [sp, #20]
}
 8003c20:	b007      	add	sp, #28
 8003c22:	bdf0      	pop	{r4, r5, r6, r7, pc}
    stack = configMINIMAL_STACK_SIZE;
 8003c24:	2280      	movs	r2, #128	@ 0x80
 8003c26:	e7ea      	b.n	8003bfe <osThreadNew+0x32>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003c28:	f1bc 0f00 	cmp.w	ip, #0
 8003c2c:	d1f7      	bne.n	8003c1e <osThreadNew+0x52>
 8003c2e:	6924      	ldr	r4, [r4, #16]
 8003c30:	2c00      	cmp	r4, #0
 8003c32:	d1f4      	bne.n	8003c1e <osThreadNew+0x52>
 8003c34:	460c      	mov	r4, r1
 8003c36:	e001      	b.n	8003c3c <osThreadNew+0x70>
    prio  = (UBaseType_t)osPriorityNormal;
 8003c38:	2518      	movs	r5, #24
    stack = configMINIMAL_STACK_SIZE;
 8003c3a:	2280      	movs	r2, #128	@ 0x80
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003c3c:	a905      	add	r1, sp, #20
 8003c3e:	e9cd 5100 	strd	r5, r1, [sp]
 8003c42:	b292      	uxth	r2, r2
 8003c44:	4621      	mov	r1, r4
 8003c46:	f001 fad2 	bl	80051ee <xTaskCreate>
 8003c4a:	2801      	cmp	r0, #1
            hTask = NULL;
 8003c4c:	bf1c      	itt	ne
 8003c4e:	2300      	movne	r3, #0
 8003c50:	9305      	strne	r3, [sp, #20]
 8003c52:	e7e4      	b.n	8003c1e <osThreadNew+0x52>

08003c54 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003c54:	b508      	push	{r3, lr}
 8003c56:	f3ef 8205 	mrs	r2, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8003c5a:	b922      	cbnz	r2, 8003c66 <osDelay+0x12>
    stat = osErrorISR;
  }
  else {
    stat = osOK;

    if (ticks != 0U) {
 8003c5c:	b108      	cbz	r0, 8003c62 <osDelay+0xe>
      vTaskDelay(ticks);
 8003c5e:	f001 fc0d 	bl	800547c <vTaskDelay>
    stat = osOK;
 8003c62:	2000      	movs	r0, #0
    }
  }

  return (stat);
}
 8003c64:	bd08      	pop	{r3, pc}
    stat = osErrorISR;
 8003c66:	f06f 0005 	mvn.w	r0, #5
  return (stat);
 8003c6a:	e7fb      	b.n	8003c64 <osDelay+0x10>

08003c6c <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8003c6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003c6e:	4604      	mov	r4, r0
 8003c70:	460e      	mov	r6, r1
 8003c72:	4615      	mov	r5, r2
 8003c74:	f3ef 8205 	mrs	r2, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8003c78:	b942      	cbnz	r2, 8003c8c <osSemaphoreNew+0x20>
 8003c7a:	b138      	cbz	r0, 8003c8c <osSemaphoreNew+0x20>
 8003c7c:	4288      	cmp	r0, r1
 8003c7e:	d305      	bcc.n	8003c8c <osSemaphoreNew+0x20>
    mem = -1;

    if (attr != NULL) {
 8003c80:	b155      	cbz	r5, 8003c98 <osSemaphoreNew+0x2c>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8003c82:	e9d5 3702 	ldrd	r3, r7, [r5, #8]
 8003c86:	b12b      	cbz	r3, 8003c94 <osSemaphoreNew+0x28>
 8003c88:	2f4f      	cmp	r7, #79	@ 0x4f
 8003c8a:	d822      	bhi.n	8003cd2 <osSemaphoreNew+0x66>
  hSemaphore = NULL;
 8003c8c:	2400      	movs	r4, #0
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
 8003c8e:	4620      	mov	r0, r4
 8003c90:	b003      	add	sp, #12
 8003c92:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8003c94:	2f00      	cmp	r7, #0
 8003c96:	d1f9      	bne.n	8003c8c <osSemaphoreNew+0x20>
      if (max_count == 1U) {
 8003c98:	2c01      	cmp	r4, #1
 8003c9a:	d00c      	beq.n	8003cb6 <osSemaphoreNew+0x4a>
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8003c9c:	4620      	mov	r0, r4
 8003c9e:	4631      	mov	r1, r6
 8003ca0:	f000 fd80 	bl	80047a4 <xQueueCreateCountingSemaphore>
      if (hSemaphore != NULL) {
 8003ca4:	4604      	mov	r4, r0
 8003ca6:	2800      	cmp	r0, #0
 8003ca8:	d0f0      	beq.n	8003c8c <osSemaphoreNew+0x20>
        if (attr != NULL) {
 8003caa:	b985      	cbnz	r5, 8003cce <osSemaphoreNew+0x62>
        vQueueAddToRegistry (hSemaphore, name);
 8003cac:	4629      	mov	r1, r5
 8003cae:	4620      	mov	r0, r4
 8003cb0:	f001 f89e 	bl	8004df0 <vQueueAddToRegistry>
  return ((osSemaphoreId_t)hSemaphore);
 8003cb4:	e7eb      	b.n	8003c8e <osSemaphoreNew+0x22>
            hSemaphore = xSemaphoreCreateBinary();
 8003cb6:	2203      	movs	r2, #3
 8003cb8:	2100      	movs	r1, #0
 8003cba:	2001      	movs	r0, #1
 8003cbc:	f000 fd29 	bl	8004712 <xQueueGenericCreate>
 8003cc0:	e00e      	b.n	8003ce0 <osSemaphoreNew+0x74>
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8003cc2:	461a      	mov	r2, r3
 8003cc4:	f000 fd4c 	bl	8004760 <xQueueCreateCountingSemaphoreStatic>
      if (hSemaphore != NULL) {
 8003cc8:	4604      	mov	r4, r0
 8003cca:	2800      	cmp	r0, #0
 8003ccc:	d0de      	beq.n	8003c8c <osSemaphoreNew+0x20>
          name = attr->name;
 8003cce:	682d      	ldr	r5, [r5, #0]
 8003cd0:	e7ec      	b.n	8003cac <osSemaphoreNew+0x40>
      if (max_count == 1U) {
 8003cd2:	2801      	cmp	r0, #1
 8003cd4:	d1f5      	bne.n	8003cc2 <osSemaphoreNew+0x56>
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8003cd6:	2103      	movs	r1, #3
 8003cd8:	9100      	str	r1, [sp, #0]
 8003cda:	4611      	mov	r1, r2
 8003cdc:	f000 fccb 	bl	8004676 <xQueueGenericCreateStatic>
            hSemaphore = xSemaphoreCreateBinary();
 8003ce0:	4604      	mov	r4, r0
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8003ce2:	2800      	cmp	r0, #0
 8003ce4:	d0d2      	beq.n	8003c8c <osSemaphoreNew+0x20>
 8003ce6:	2e00      	cmp	r6, #0
 8003ce8:	d0df      	beq.n	8003caa <osSemaphoreNew+0x3e>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8003cea:	2300      	movs	r3, #0
 8003cec:	461a      	mov	r2, r3
 8003cee:	4619      	mov	r1, r3
 8003cf0:	f000 fd76 	bl	80047e0 <xQueueGenericSend>
 8003cf4:	2801      	cmp	r0, #1
 8003cf6:	d0d8      	beq.n	8003caa <osSemaphoreNew+0x3e>
            vSemaphoreDelete (hSemaphore);
 8003cf8:	4620      	mov	r0, r4
 8003cfa:	f001 f8a3 	bl	8004e44 <vQueueDelete>
      if (hSemaphore != NULL) {
 8003cfe:	e7c5      	b.n	8003c8c <osSemaphoreNew+0x20>

08003d00 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8003d00:	b513      	push	{r0, r1, r4, lr}
 8003d02:	460c      	mov	r4, r1
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 8003d04:	b328      	cbz	r0, 8003d52 <osSemaphoreAcquire+0x52>
 8003d06:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 8003d0a:	b1cb      	cbz	r3, 8003d40 <osSemaphoreAcquire+0x40>
    if (timeout != 0U) {
 8003d0c:	bb09      	cbnz	r1, 8003d52 <osSemaphoreAcquire+0x52>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8003d0e:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 8003d10:	9101      	str	r1, [sp, #4]
      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8003d12:	f001 f820 	bl	8004d56 <xQueueReceiveFromISR>
 8003d16:	2801      	cmp	r0, #1
 8003d18:	d003      	beq.n	8003d22 <osSemaphoreAcquire+0x22>
        stat = osErrorResource;
 8003d1a:	f06f 0002 	mvn.w	r0, #2
      }
    }
  }

  return (stat);
}
 8003d1e:	b002      	add	sp, #8
 8003d20:	bd10      	pop	{r4, pc}
        portYIELD_FROM_ISR (yield);
 8003d22:	9b01      	ldr	r3, [sp, #4]
 8003d24:	b90b      	cbnz	r3, 8003d2a <osSemaphoreAcquire+0x2a>
  stat = osOK;
 8003d26:	2000      	movs	r0, #0
 8003d28:	e7f9      	b.n	8003d1e <osSemaphoreAcquire+0x1e>
        portYIELD_FROM_ISR (yield);
 8003d2a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8003d2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003d32:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8003d36:	f3bf 8f4f 	dsb	sy
 8003d3a:	f3bf 8f6f 	isb	sy
 8003d3e:	e7f2      	b.n	8003d26 <osSemaphoreAcquire+0x26>
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8003d40:	f000 ff4c 	bl	8004bdc <xQueueSemaphoreTake>
 8003d44:	2801      	cmp	r0, #1
 8003d46:	d0ee      	beq.n	8003d26 <osSemaphoreAcquire+0x26>
      if (timeout != 0U) {
 8003d48:	2c00      	cmp	r4, #0
 8003d4a:	d0e6      	beq.n	8003d1a <osSemaphoreAcquire+0x1a>
        stat = osErrorTimeout;
 8003d4c:	f06f 0001 	mvn.w	r0, #1
 8003d50:	e7e5      	b.n	8003d1e <osSemaphoreAcquire+0x1e>
    stat = osErrorParameter;
 8003d52:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 8003d56:	e7e2      	b.n	8003d1e <osSemaphoreAcquire+0x1e>

08003d58 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8003d58:	b507      	push	{r0, r1, r2, lr}
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 8003d5a:	b318      	cbz	r0, 8003da4 <osSemaphoreRelease+0x4c>
 8003d5c:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 8003d60:	b1cb      	cbz	r3, 8003d96 <osSemaphoreRelease+0x3e>
    yield = pdFALSE;
 8003d62:	2300      	movs	r3, #0

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8003d64:	a901      	add	r1, sp, #4
    yield = pdFALSE;
 8003d66:	9301      	str	r3, [sp, #4]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8003d68:	f000 fe49 	bl	80049fe <xQueueGiveFromISR>
 8003d6c:	2801      	cmp	r0, #1
 8003d6e:	d004      	beq.n	8003d7a <osSemaphoreRelease+0x22>
      portYIELD_FROM_ISR (yield);
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
      stat = osErrorResource;
 8003d70:	f06f 0002 	mvn.w	r0, #2
    }
  }

  return (stat);
}
 8003d74:	b003      	add	sp, #12
 8003d76:	f85d fb04 	ldr.w	pc, [sp], #4
      portYIELD_FROM_ISR (yield);
 8003d7a:	9b01      	ldr	r3, [sp, #4]
 8003d7c:	b14b      	cbz	r3, 8003d92 <osSemaphoreRelease+0x3a>
 8003d7e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8003d82:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003d86:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8003d8a:	f3bf 8f4f 	dsb	sy
 8003d8e:	f3bf 8f6f 	isb	sy
  stat = osOK;
 8003d92:	2000      	movs	r0, #0
 8003d94:	e7ee      	b.n	8003d74 <osSemaphoreRelease+0x1c>
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8003d96:	461a      	mov	r2, r3
 8003d98:	4619      	mov	r1, r3
 8003d9a:	f000 fd21 	bl	80047e0 <xQueueGenericSend>
 8003d9e:	2801      	cmp	r0, #1
 8003da0:	d0f7      	beq.n	8003d92 <osSemaphoreRelease+0x3a>
 8003da2:	e7e5      	b.n	8003d70 <osSemaphoreRelease+0x18>
    stat = osErrorParameter;
 8003da4:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 8003da8:	e7e4      	b.n	8003d74 <osSemaphoreRelease+0x1c>

08003daa <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8003daa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003dac:	4605      	mov	r5, r0
 8003dae:	460e      	mov	r6, r1
 8003db0:	4614      	mov	r4, r2
 8003db2:	f3ef 8705 	mrs	r7, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8003db6:	b11f      	cbz	r7, 8003dc0 <osMessageQueueNew+0x16>
  hQueue = NULL;
 8003db8:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 8003dba:	4628      	mov	r0, r5
 8003dbc:	b003      	add	sp, #12
 8003dbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8003dc0:	2800      	cmp	r0, #0
 8003dc2:	d0f9      	beq.n	8003db8 <osMessageQueueNew+0xe>
 8003dc4:	2900      	cmp	r1, #0
 8003dc6:	d0f7      	beq.n	8003db8 <osMessageQueueNew+0xe>
    if (attr != NULL) {
 8003dc8:	b1da      	cbz	r2, 8003e02 <osMessageQueueNew+0x58>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003dca:	e9d2 3202 	ldrd	r3, r2, [r2, #8]
 8003dce:	b183      	cbz	r3, 8003df2 <osMessageQueueNew+0x48>
 8003dd0:	2a4f      	cmp	r2, #79	@ 0x4f
 8003dd2:	d9f1      	bls.n	8003db8 <osMessageQueueNew+0xe>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003dd4:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003dd6:	2a00      	cmp	r2, #0
 8003dd8:	d0ee      	beq.n	8003db8 <osMessageQueueNew+0xe>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003dda:	6966      	ldr	r6, [r4, #20]
 8003ddc:	434d      	muls	r5, r1
 8003dde:	42ae      	cmp	r6, r5
 8003de0:	d3ea      	bcc.n	8003db8 <osMessageQueueNew+0xe>
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8003de2:	9700      	str	r7, [sp, #0]
 8003de4:	f000 fc47 	bl	8004676 <xQueueGenericCreateStatic>
    if (hQueue != NULL) {
 8003de8:	4605      	mov	r5, r0
 8003dea:	2800      	cmp	r0, #0
 8003dec:	d0e4      	beq.n	8003db8 <osMessageQueueNew+0xe>
        name = attr->name;
 8003dee:	6824      	ldr	r4, [r4, #0]
 8003df0:	e011      	b.n	8003e16 <osMessageQueueNew+0x6c>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003df2:	2a00      	cmp	r2, #0
 8003df4:	d1e0      	bne.n	8003db8 <osMessageQueueNew+0xe>
 8003df6:	6923      	ldr	r3, [r4, #16]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d1dd      	bne.n	8003db8 <osMessageQueueNew+0xe>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8003dfc:	6963      	ldr	r3, [r4, #20]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d1da      	bne.n	8003db8 <osMessageQueueNew+0xe>
          hQueue = xQueueCreate (msg_count, msg_size);
 8003e02:	4628      	mov	r0, r5
 8003e04:	2200      	movs	r2, #0
 8003e06:	4631      	mov	r1, r6
 8003e08:	f000 fc83 	bl	8004712 <xQueueGenericCreate>
    if (hQueue != NULL) {
 8003e0c:	4605      	mov	r5, r0
 8003e0e:	2800      	cmp	r0, #0
 8003e10:	d0d2      	beq.n	8003db8 <osMessageQueueNew+0xe>
      if (attr != NULL) {
 8003e12:	2c00      	cmp	r4, #0
 8003e14:	d1eb      	bne.n	8003dee <osMessageQueueNew+0x44>
      vQueueAddToRegistry (hQueue, name);
 8003e16:	4621      	mov	r1, r4
 8003e18:	4628      	mov	r0, r5
 8003e1a:	f000 ffe9 	bl	8004df0 <vQueueAddToRegistry>
  return ((osMessageQueueId_t)hQueue);
 8003e1e:	e7cc      	b.n	8003dba <osMessageQueueNew+0x10>

08003e20 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8003e20:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003e22:	461c      	mov	r4, r3
 8003e24:	f3ef 8605 	mrs	r6, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 8003e28:	b1de      	cbz	r6, 8003e62 <osMessageQueuePut+0x42>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003e2a:	b338      	cbz	r0, 8003e7c <osMessageQueuePut+0x5c>
 8003e2c:	b331      	cbz	r1, 8003e7c <osMessageQueuePut+0x5c>
 8003e2e:	bb2b      	cbnz	r3, 8003e7c <osMessageQueuePut+0x5c>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8003e30:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 8003e32:	9301      	str	r3, [sp, #4]
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8003e34:	f000 fd86 	bl	8004944 <xQueueGenericSendFromISR>
 8003e38:	2801      	cmp	r0, #1
 8003e3a:	d003      	beq.n	8003e44 <osMessageQueuePut+0x24>
        stat = osErrorResource;
 8003e3c:	f06f 0002 	mvn.w	r0, #2
      }
    }
  }

  return (stat);
}
 8003e40:	b002      	add	sp, #8
 8003e42:	bd70      	pop	{r4, r5, r6, pc}
        portYIELD_FROM_ISR (yield);
 8003e44:	9b01      	ldr	r3, [sp, #4]
 8003e46:	b90b      	cbnz	r3, 8003e4c <osMessageQueuePut+0x2c>
  stat = osOK;
 8003e48:	2000      	movs	r0, #0
 8003e4a:	e7f9      	b.n	8003e40 <osMessageQueuePut+0x20>
        portYIELD_FROM_ISR (yield);
 8003e4c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8003e50:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003e54:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8003e58:	f3bf 8f4f 	dsb	sy
 8003e5c:	f3bf 8f6f 	isb	sy
 8003e60:	e7f2      	b.n	8003e48 <osMessageQueuePut+0x28>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8003e62:	b158      	cbz	r0, 8003e7c <osMessageQueuePut+0x5c>
 8003e64:	b151      	cbz	r1, 8003e7c <osMessageQueuePut+0x5c>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8003e66:	4633      	mov	r3, r6
 8003e68:	4622      	mov	r2, r4
 8003e6a:	f000 fcb9 	bl	80047e0 <xQueueGenericSend>
 8003e6e:	2801      	cmp	r0, #1
 8003e70:	d0ea      	beq.n	8003e48 <osMessageQueuePut+0x28>
        if (timeout != 0U) {
 8003e72:	2c00      	cmp	r4, #0
 8003e74:	d0e2      	beq.n	8003e3c <osMessageQueuePut+0x1c>
          stat = osErrorTimeout;
 8003e76:	f06f 0001 	mvn.w	r0, #1
 8003e7a:	e7e1      	b.n	8003e40 <osMessageQueuePut+0x20>
      stat = osErrorParameter;
 8003e7c:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 8003e80:	e7de      	b.n	8003e40 <osMessageQueuePut+0x20>

08003e82 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8003e82:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003e84:	461c      	mov	r4, r3
 8003e86:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 8003e8a:	b1db      	cbz	r3, 8003ec4 <osMessageQueueGet+0x42>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003e8c:	b330      	cbz	r0, 8003edc <osMessageQueueGet+0x5a>
 8003e8e:	b329      	cbz	r1, 8003edc <osMessageQueueGet+0x5a>
 8003e90:	bb24      	cbnz	r4, 8003edc <osMessageQueueGet+0x5a>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8003e92:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 8003e94:	9401      	str	r4, [sp, #4]
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8003e96:	f000 ff5e 	bl	8004d56 <xQueueReceiveFromISR>
 8003e9a:	2801      	cmp	r0, #1
 8003e9c:	d003      	beq.n	8003ea6 <osMessageQueueGet+0x24>
        stat = osErrorResource;
 8003e9e:	f06f 0002 	mvn.w	r0, #2
      }
    }
  }

  return (stat);
}
 8003ea2:	b003      	add	sp, #12
 8003ea4:	bd30      	pop	{r4, r5, pc}
        portYIELD_FROM_ISR (yield);
 8003ea6:	9b01      	ldr	r3, [sp, #4]
 8003ea8:	b90b      	cbnz	r3, 8003eae <osMessageQueueGet+0x2c>
  stat = osOK;
 8003eaa:	2000      	movs	r0, #0
 8003eac:	e7f9      	b.n	8003ea2 <osMessageQueueGet+0x20>
        portYIELD_FROM_ISR (yield);
 8003eae:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8003eb2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003eb6:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8003eba:	f3bf 8f4f 	dsb	sy
 8003ebe:	f3bf 8f6f 	isb	sy
 8003ec2:	e7f2      	b.n	8003eaa <osMessageQueueGet+0x28>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8003ec4:	b150      	cbz	r0, 8003edc <osMessageQueueGet+0x5a>
 8003ec6:	b149      	cbz	r1, 8003edc <osMessageQueueGet+0x5a>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8003ec8:	4622      	mov	r2, r4
 8003eca:	f000 fde9 	bl	8004aa0 <xQueueReceive>
 8003ece:	2801      	cmp	r0, #1
 8003ed0:	d0eb      	beq.n	8003eaa <osMessageQueueGet+0x28>
        if (timeout != 0U) {
 8003ed2:	2c00      	cmp	r4, #0
 8003ed4:	d0e3      	beq.n	8003e9e <osMessageQueueGet+0x1c>
          stat = osErrorTimeout;
 8003ed6:	f06f 0001 	mvn.w	r0, #1
 8003eda:	e7e2      	b.n	8003ea2 <osMessageQueueGet+0x20>
      stat = osErrorParameter;
 8003edc:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 8003ee0:	e7df      	b.n	8003ea2 <osMessageQueueGet+0x20>
	...

08003ee4 <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003ee4:	4b03      	ldr	r3, [pc, #12]	@ (8003ef4 <vApplicationGetIdleTaskMemory+0x10>)
 8003ee6:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003ee8:	4b03      	ldr	r3, [pc, #12]	@ (8003ef8 <vApplicationGetIdleTaskMemory+0x14>)
 8003eea:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003eec:	2380      	movs	r3, #128	@ 0x80
 8003eee:	6013      	str	r3, [r2, #0]
}
 8003ef0:	4770      	bx	lr
 8003ef2:	bf00      	nop
 8003ef4:	20000a78 	.word	0x20000a78
 8003ef8:	20000878 	.word	0x20000878

08003efc <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003efc:	4b03      	ldr	r3, [pc, #12]	@ (8003f0c <vApplicationGetTimerTaskMemory+0x10>)
 8003efe:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003f00:	4b03      	ldr	r3, [pc, #12]	@ (8003f10 <vApplicationGetTimerTaskMemory+0x14>)
 8003f02:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003f04:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003f08:	6013      	str	r3, [r2, #0]
}
 8003f0a:	4770      	bx	lr
 8003f0c:	20000818 	.word	0x20000818
 8003f10:	20000418 	.word	0x20000418

08003f14 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003f14:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003f16:	4b10      	ldr	r3, [pc, #64]	@ (8003f58 <prvInsertBlockIntoFreeList+0x44>)
 8003f18:	461a      	mov	r2, r3
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4283      	cmp	r3, r0
 8003f1e:	d3fb      	bcc.n	8003f18 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003f20:	6854      	ldr	r4, [r2, #4]
 8003f22:	1911      	adds	r1, r2, r4
 8003f24:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003f26:	bf01      	itttt	eq
 8003f28:	6841      	ldreq	r1, [r0, #4]
		pxBlockToInsert = pxIterator;
 8003f2a:	4610      	moveq	r0, r2
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003f2c:	1909      	addeq	r1, r1, r4
 8003f2e:	6051      	streq	r1, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003f30:	6844      	ldr	r4, [r0, #4]
 8003f32:	1901      	adds	r1, r0, r4
 8003f34:	428b      	cmp	r3, r1
 8003f36:	d10c      	bne.n	8003f52 <prvInsertBlockIntoFreeList+0x3e>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003f38:	4908      	ldr	r1, [pc, #32]	@ (8003f5c <prvInsertBlockIntoFreeList+0x48>)
 8003f3a:	6809      	ldr	r1, [r1, #0]
 8003f3c:	428b      	cmp	r3, r1
 8003f3e:	d003      	beq.n	8003f48 <prvInsertBlockIntoFreeList+0x34>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003f40:	6859      	ldr	r1, [r3, #4]
 8003f42:	4421      	add	r1, r4
 8003f44:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003f46:	6819      	ldr	r1, [r3, #0]
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003f48:	6001      	str	r1, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003f4a:	4290      	cmp	r0, r2
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003f4c:	bf18      	it	ne
 8003f4e:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003f50:	bd10      	pop	{r4, pc}
 8003f52:	4619      	mov	r1, r3
 8003f54:	e7f8      	b.n	8003f48 <prvInsertBlockIntoFreeList+0x34>
 8003f56:	bf00      	nop
 8003f58:	20000af4 	.word	0x20000af4
 8003f5c:	20000af0 	.word	0x20000af0

08003f60 <pvPortMalloc>:
{
 8003f60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f64:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8003f66:	f001 f971 	bl	800524c <vTaskSuspendAll>
		if( pxEnd == NULL )
 8003f6a:	4942      	ldr	r1, [pc, #264]	@ (8004074 <pvPortMalloc+0x114>)
 8003f6c:	4d42      	ldr	r5, [pc, #264]	@ (8004078 <pvPortMalloc+0x118>)
 8003f6e:	680b      	ldr	r3, [r1, #0]
 8003f70:	bb0b      	cbnz	r3, 8003fb6 <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 8003f72:	4a42      	ldr	r2, [pc, #264]	@ (800407c <pvPortMalloc+0x11c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003f74:	0756      	lsls	r6, r2, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003f76:	bf1f      	itttt	ne
 8003f78:	1dd0      	addne	r0, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003f7a:	f020 0007 	bicne.w	r0, r0, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003f7e:	f502 4200 	addne.w	r2, r2, #32768	@ 0x8000
 8003f82:	1a13      	subne	r3, r2, r0
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003f84:	bf0c      	ite	eq
 8003f86:	f44f 4300 	moveq.w	r3, #32768	@ 0x8000
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003f8a:	4602      	movne	r2, r0
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003f8c:	4413      	add	r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003f8e:	4e3c      	ldr	r6, [pc, #240]	@ (8004080 <pvPortMalloc+0x120>)
	uxAddress -= xHeapStructSize;
 8003f90:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003f92:	f023 0307 	bic.w	r3, r3, #7
	xStart.xBlockSize = ( size_t ) 0;
 8003f96:	2000      	movs	r0, #0
 8003f98:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003f9a:	6032      	str	r2, [r6, #0]
	pxEnd->pxNextFreeBlock = NULL;
 8003f9c:	e9c3 0000 	strd	r0, r0, [r3]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003fa0:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003fa2:	e9c2 3000 	strd	r3, r0, [r2]
	pxEnd = ( void * ) uxAddress;
 8003fa6:	600b      	str	r3, [r1, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003fa8:	4b36      	ldr	r3, [pc, #216]	@ (8004084 <pvPortMalloc+0x124>)
 8003faa:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003fac:	4b36      	ldr	r3, [pc, #216]	@ (8004088 <pvPortMalloc+0x128>)
 8003fae:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003fb0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8003fb4:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003fb6:	682e      	ldr	r6, [r5, #0]
 8003fb8:	4226      	tst	r6, r4
 8003fba:	d155      	bne.n	8004068 <pvPortMalloc+0x108>
			if( xWantedSize > 0 )
 8003fbc:	2c00      	cmp	r4, #0
 8003fbe:	d046      	beq.n	800404e <pvPortMalloc+0xee>
				xWantedSize += xHeapStructSize;
 8003fc0:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003fc4:	0760      	lsls	r0, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003fc6:	bf1c      	itt	ne
 8003fc8:	f023 0307 	bicne.w	r3, r3, #7
 8003fcc:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d04a      	beq.n	8004068 <pvPortMalloc+0x108>
 8003fd2:	4f2d      	ldr	r7, [pc, #180]	@ (8004088 <pvPortMalloc+0x128>)
 8003fd4:	683c      	ldr	r4, [r7, #0]
 8003fd6:	429c      	cmp	r4, r3
 8003fd8:	d346      	bcc.n	8004068 <pvPortMalloc+0x108>
				pxBlock = xStart.pxNextFreeBlock;
 8003fda:	4a29      	ldr	r2, [pc, #164]	@ (8004080 <pvPortMalloc+0x120>)
 8003fdc:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003fde:	6868      	ldr	r0, [r5, #4]
 8003fe0:	4298      	cmp	r0, r3
 8003fe2:	d204      	bcs.n	8003fee <pvPortMalloc+0x8e>
 8003fe4:	f8d5 c000 	ldr.w	ip, [r5]
 8003fe8:	f1bc 0f00 	cmp.w	ip, #0
 8003fec:	d115      	bne.n	800401a <pvPortMalloc+0xba>
				if( pxBlock != pxEnd )
 8003fee:	6809      	ldr	r1, [r1, #0]
 8003ff0:	42a9      	cmp	r1, r5
 8003ff2:	d039      	beq.n	8004068 <pvPortMalloc+0x108>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003ff4:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003ff6:	f8d2 8000 	ldr.w	r8, [r2]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003ffa:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003ffc:	1ac2      	subs	r2, r0, r3
 8003ffe:	2a10      	cmp	r2, #16
 8004000:	d912      	bls.n	8004028 <pvPortMalloc+0xc8>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004002:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004004:	0741      	lsls	r1, r0, #29
 8004006:	d00b      	beq.n	8004020 <pvPortMalloc+0xc0>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004008:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800400c:	f383 8811 	msr	BASEPRI, r3
 8004010:	f3bf 8f6f 	isb	sy
 8004014:	f3bf 8f4f 	dsb	sy
 8004018:	e7fe      	b.n	8004018 <pvPortMalloc+0xb8>
					pxPreviousBlock = pxBlock;
 800401a:	462a      	mov	r2, r5
					pxBlock = pxBlock->pxNextFreeBlock;
 800401c:	4665      	mov	r5, ip
 800401e:	e7de      	b.n	8003fde <pvPortMalloc+0x7e>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004020:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004022:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004024:	f7ff ff76 	bl	8003f14 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004028:	686a      	ldr	r2, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800402a:	4916      	ldr	r1, [pc, #88]	@ (8004084 <pvPortMalloc+0x124>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800402c:	1aa4      	subs	r4, r4, r2
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800402e:	4316      	orrs	r6, r2
					xNumberOfSuccessfulAllocations++;
 8004030:	4a16      	ldr	r2, [pc, #88]	@ (800408c <pvPortMalloc+0x12c>)
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004032:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004034:	603c      	str	r4, [r7, #0]
					pxBlock->pxNextFreeBlock = NULL;
 8004036:	2300      	movs	r3, #0
 8004038:	602b      	str	r3, [r5, #0]
					xNumberOfSuccessfulAllocations++;
 800403a:	6813      	ldr	r3, [r2, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800403c:	606e      	str	r6, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800403e:	4284      	cmp	r4, r0
					xNumberOfSuccessfulAllocations++;
 8004040:	f103 0301 	add.w	r3, r3, #1
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004044:	bf38      	it	cc
 8004046:	600c      	strcc	r4, [r1, #0]
					xNumberOfSuccessfulAllocations++;
 8004048:	6013      	str	r3, [r2, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800404a:	f108 0408 	add.w	r4, r8, #8
	( void ) xTaskResumeAll();
 800404e:	f001 f9a1 	bl	8005394 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004052:	0763      	lsls	r3, r4, #29
 8004054:	d00a      	beq.n	800406c <pvPortMalloc+0x10c>
 8004056:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800405a:	f383 8811 	msr	BASEPRI, r3
 800405e:	f3bf 8f6f 	isb	sy
 8004062:	f3bf 8f4f 	dsb	sy
 8004066:	e7fe      	b.n	8004066 <pvPortMalloc+0x106>
void *pvReturn = NULL;
 8004068:	2400      	movs	r4, #0
 800406a:	e7f0      	b.n	800404e <pvPortMalloc+0xee>
}
 800406c:	4620      	mov	r0, r4
 800406e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004072:	bf00      	nop
 8004074:	20000af0 	.word	0x20000af0
 8004078:	20000adc 	.word	0x20000adc
 800407c:	20000afc 	.word	0x20000afc
 8004080:	20000af4 	.word	0x20000af4
 8004084:	20000ae8 	.word	0x20000ae8
 8004088:	20000aec 	.word	0x20000aec
 800408c:	20000ae4 	.word	0x20000ae4

08004090 <vPortFree>:
{
 8004090:	b510      	push	{r4, lr}
	if( pv != NULL )
 8004092:	4604      	mov	r4, r0
 8004094:	b390      	cbz	r0, 80040fc <vPortFree+0x6c>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004096:	4a1a      	ldr	r2, [pc, #104]	@ (8004100 <vPortFree+0x70>)
 8004098:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800409c:	6812      	ldr	r2, [r2, #0]
 800409e:	4213      	tst	r3, r2
 80040a0:	d108      	bne.n	80040b4 <vPortFree+0x24>
 80040a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040a6:	f383 8811 	msr	BASEPRI, r3
 80040aa:	f3bf 8f6f 	isb	sy
 80040ae:	f3bf 8f4f 	dsb	sy
 80040b2:	e7fe      	b.n	80040b2 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80040b4:	f850 1c08 	ldr.w	r1, [r0, #-8]
 80040b8:	b141      	cbz	r1, 80040cc <vPortFree+0x3c>
 80040ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040be:	f383 8811 	msr	BASEPRI, r3
 80040c2:	f3bf 8f6f 	isb	sy
 80040c6:	f3bf 8f4f 	dsb	sy
 80040ca:	e7fe      	b.n	80040ca <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80040cc:	ea23 0302 	bic.w	r3, r3, r2
 80040d0:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 80040d4:	f001 f8ba 	bl	800524c <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 80040d8:	4a0a      	ldr	r2, [pc, #40]	@ (8004104 <vPortFree+0x74>)
 80040da:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80040de:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80040e0:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 80040e4:	440b      	add	r3, r1
 80040e6:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80040e8:	f7ff ff14 	bl	8003f14 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80040ec:	4a06      	ldr	r2, [pc, #24]	@ (8004108 <vPortFree+0x78>)
 80040ee:	6813      	ldr	r3, [r2, #0]
}
 80040f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
					xNumberOfSuccessfulFrees++;
 80040f4:	3301      	adds	r3, #1
 80040f6:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 80040f8:	f001 b94c 	b.w	8005394 <xTaskResumeAll>
}
 80040fc:	bd10      	pop	{r4, pc}
 80040fe:	bf00      	nop
 8004100:	20000adc 	.word	0x20000adc
 8004104:	20000aec 	.word	0x20000aec
 8004108:	20000ae0 	.word	0x20000ae0

0800410c <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800410c:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004110:	f04f 32ff 	mov.w	r2, #4294967295

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004114:	e9c0 2302 	strd	r2, r3, [r0, #8]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004118:	6043      	str	r3, [r0, #4]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800411a:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800411c:	2300      	movs	r3, #0
 800411e:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004120:	4770      	bx	lr

08004122 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004122:	2300      	movs	r3, #0
 8004124:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004126:	4770      	bx	lr

08004128 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8004128:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800412a:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800412c:	689a      	ldr	r2, [r3, #8]
 800412e:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004130:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004132:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8004134:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 8004136:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8004138:	3301      	adds	r3, #1
 800413a:	6003      	str	r3, [r0, #0]
}
 800413c:	4770      	bx	lr

0800413e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800413e:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004140:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004142:	1c63      	adds	r3, r4, #1
 8004144:	d10a      	bne.n	800415c <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004146:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004148:	685a      	ldr	r2, [r3, #4]
 800414a:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800414c:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800414e:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8004150:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8004152:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 8004154:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8004156:	3301      	adds	r3, #1
 8004158:	6003      	str	r3, [r0, #0]
}
 800415a:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800415c:	f100 0208 	add.w	r2, r0, #8
 8004160:	4613      	mov	r3, r2
 8004162:	6852      	ldr	r2, [r2, #4]
 8004164:	6815      	ldr	r5, [r2, #0]
 8004166:	42a5      	cmp	r5, r4
 8004168:	d9fa      	bls.n	8004160 <vListInsert+0x22>
 800416a:	e7ed      	b.n	8004148 <vListInsert+0xa>

0800416c <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800416c:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
List_t * const pxList = pxItemToRemove->pxContainer;
 8004170:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004172:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004174:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004176:	6859      	ldr	r1, [r3, #4]
 8004178:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800417a:	bf08      	it	eq
 800417c:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800417e:	2200      	movs	r2, #0
 8004180:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	3a01      	subs	r2, #1
 8004186:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004188:	6818      	ldr	r0, [r3, #0]
}
 800418a:	4770      	bx	lr

0800418c <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800418c:	4808      	ldr	r0, [pc, #32]	@ (80041b0 <prvPortStartFirstTask+0x24>)
 800418e:	6800      	ldr	r0, [r0, #0]
 8004190:	6800      	ldr	r0, [r0, #0]
 8004192:	f380 8808 	msr	MSP, r0
 8004196:	f04f 0000 	mov.w	r0, #0
 800419a:	f380 8814 	msr	CONTROL, r0
 800419e:	b662      	cpsie	i
 80041a0:	b661      	cpsie	f
 80041a2:	f3bf 8f4f 	dsb	sy
 80041a6:	f3bf 8f6f 	isb	sy
 80041aa:	df00      	svc	0
 80041ac:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80041ae:	0000      	.short	0x0000
 80041b0:	e000ed08 	.word	0xe000ed08

080041b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80041b4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80041c4 <vPortEnableVFP+0x10>
 80041b8:	6801      	ldr	r1, [r0, #0]
 80041ba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80041be:	6001      	str	r1, [r0, #0]
 80041c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80041c2:	0000      	.short	0x0000
 80041c4:	e000ed88 	.word	0xe000ed88

080041c8 <prvTaskExitError>:
{
 80041c8:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 80041ca:	2300      	movs	r3, #0
 80041cc:	9301      	str	r3, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 80041ce:	4b0d      	ldr	r3, [pc, #52]	@ (8004204 <prvTaskExitError+0x3c>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	3301      	adds	r3, #1
 80041d4:	d008      	beq.n	80041e8 <prvTaskExitError+0x20>
 80041d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041da:	f383 8811 	msr	BASEPRI, r3
 80041de:	f3bf 8f6f 	isb	sy
 80041e2:	f3bf 8f4f 	dsb	sy
 80041e6:	e7fe      	b.n	80041e6 <prvTaskExitError+0x1e>
 80041e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041ec:	f383 8811 	msr	BASEPRI, r3
 80041f0:	f3bf 8f6f 	isb	sy
 80041f4:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 80041f8:	9b01      	ldr	r3, [sp, #4]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d0fc      	beq.n	80041f8 <prvTaskExitError+0x30>
}
 80041fe:	b002      	add	sp, #8
 8004200:	4770      	bx	lr
 8004202:	bf00      	nop
 8004204:	20000010 	.word	0x20000010

08004208 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004208:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800420c:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004210:	4b07      	ldr	r3, [pc, #28]	@ (8004230 <pxPortInitialiseStack+0x28>)
 8004212:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004216:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800421a:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800421e:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004222:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004226:	f840 3c24 	str.w	r3, [r0, #-36]
}
 800422a:	3844      	subs	r0, #68	@ 0x44
 800422c:	4770      	bx	lr
 800422e:	bf00      	nop
 8004230:	080041c9 	.word	0x080041c9
	...

08004240 <SVC_Handler>:
	__asm volatile (
 8004240:	4b07      	ldr	r3, [pc, #28]	@ (8004260 <pxCurrentTCBConst2>)
 8004242:	6819      	ldr	r1, [r3, #0]
 8004244:	6808      	ldr	r0, [r1, #0]
 8004246:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800424a:	f380 8809 	msr	PSP, r0
 800424e:	f3bf 8f6f 	isb	sy
 8004252:	f04f 0000 	mov.w	r0, #0
 8004256:	f380 8811 	msr	BASEPRI, r0
 800425a:	4770      	bx	lr
 800425c:	f3af 8000 	nop.w

08004260 <pxCurrentTCBConst2>:
 8004260:	2000903c 	.word	0x2000903c

08004264 <vPortEnterCritical>:
 8004264:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004268:	f383 8811 	msr	BASEPRI, r3
 800426c:	f3bf 8f6f 	isb	sy
 8004270:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8004274:	4a0a      	ldr	r2, [pc, #40]	@ (80042a0 <vPortEnterCritical+0x3c>)
 8004276:	6813      	ldr	r3, [r2, #0]
 8004278:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800427a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800427c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800427e:	d10e      	bne.n	800429e <vPortEnterCritical+0x3a>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004280:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8004284:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 8004288:	b2db      	uxtb	r3, r3
 800428a:	b143      	cbz	r3, 800429e <vPortEnterCritical+0x3a>
 800428c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004290:	f383 8811 	msr	BASEPRI, r3
 8004294:	f3bf 8f6f 	isb	sy
 8004298:	f3bf 8f4f 	dsb	sy
 800429c:	e7fe      	b.n	800429c <vPortEnterCritical+0x38>
}
 800429e:	4770      	bx	lr
 80042a0:	20000010 	.word	0x20000010

080042a4 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 80042a4:	4a08      	ldr	r2, [pc, #32]	@ (80042c8 <vPortExitCritical+0x24>)
 80042a6:	6813      	ldr	r3, [r2, #0]
 80042a8:	b943      	cbnz	r3, 80042bc <vPortExitCritical+0x18>
 80042aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042ae:	f383 8811 	msr	BASEPRI, r3
 80042b2:	f3bf 8f6f 	isb	sy
 80042b6:	f3bf 8f4f 	dsb	sy
 80042ba:	e7fe      	b.n	80042ba <vPortExitCritical+0x16>
	uxCriticalNesting--;
 80042bc:	3b01      	subs	r3, #1
 80042be:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80042c0:	b90b      	cbnz	r3, 80042c6 <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80042c2:	f383 8811 	msr	BASEPRI, r3
}
 80042c6:	4770      	bx	lr
 80042c8:	20000010 	.word	0x20000010
 80042cc:	00000000 	.word	0x00000000

080042d0 <PendSV_Handler>:
	__asm volatile
 80042d0:	f3ef 8009 	mrs	r0, PSP
 80042d4:	f3bf 8f6f 	isb	sy
 80042d8:	4b15      	ldr	r3, [pc, #84]	@ (8004330 <pxCurrentTCBConst>)
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	f01e 0f10 	tst.w	lr, #16
 80042e0:	bf08      	it	eq
 80042e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80042e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042ea:	6010      	str	r0, [r2, #0]
 80042ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80042f0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80042f4:	f380 8811 	msr	BASEPRI, r0
 80042f8:	f3bf 8f4f 	dsb	sy
 80042fc:	f3bf 8f6f 	isb	sy
 8004300:	f001 f94a 	bl	8005598 <vTaskSwitchContext>
 8004304:	f04f 0000 	mov.w	r0, #0
 8004308:	f380 8811 	msr	BASEPRI, r0
 800430c:	bc09      	pop	{r0, r3}
 800430e:	6819      	ldr	r1, [r3, #0]
 8004310:	6808      	ldr	r0, [r1, #0]
 8004312:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004316:	f01e 0f10 	tst.w	lr, #16
 800431a:	bf08      	it	eq
 800431c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004320:	f380 8809 	msr	PSP, r0
 8004324:	f3bf 8f6f 	isb	sy
 8004328:	4770      	bx	lr
 800432a:	bf00      	nop
 800432c:	f3af 8000 	nop.w

08004330 <pxCurrentTCBConst>:
 8004330:	2000903c 	.word	0x2000903c

08004334 <xPortSysTickHandler>:
{
 8004334:	b508      	push	{r3, lr}
	__asm volatile
 8004336:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800433a:	f383 8811 	msr	BASEPRI, r3
 800433e:	f3bf 8f6f 	isb	sy
 8004342:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8004346:	f000 ff8f 	bl	8005268 <xTaskIncrementTick>
 800434a:	b128      	cbz	r0, 8004358 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800434c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8004350:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004354:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 8004358:	2300      	movs	r3, #0
 800435a:	f383 8811 	msr	BASEPRI, r3
}
 800435e:	bd08      	pop	{r3, pc}

08004360 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004360:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 8004364:	2300      	movs	r3, #0
 8004366:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004368:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800436a:	4b05      	ldr	r3, [pc, #20]	@ (8004380 <vPortSetupTimerInterrupt+0x20>)
 800436c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	fbb3 f3f1 	udiv	r3, r3, r1
 8004376:	3b01      	subs	r3, #1
 8004378:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800437a:	2307      	movs	r3, #7
 800437c:	6113      	str	r3, [r2, #16]
}
 800437e:	4770      	bx	lr
 8004380:	20000004 	.word	0x20000004

08004384 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004384:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
{
 8004388:	b537      	push	{r0, r1, r2, r4, r5, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800438a:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	@ 0xd00
 800438e:	4a38      	ldr	r2, [pc, #224]	@ (8004470 <xPortStartScheduler+0xec>)
 8004390:	4291      	cmp	r1, r2
 8004392:	d108      	bne.n	80043a6 <xPortStartScheduler+0x22>
	__asm volatile
 8004394:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004398:	f383 8811 	msr	BASEPRI, r3
 800439c:	f3bf 8f6f 	isb	sy
 80043a0:	f3bf 8f4f 	dsb	sy
 80043a4:	e7fe      	b.n	80043a4 <xPortStartScheduler+0x20>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80043a6:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 80043aa:	4b32      	ldr	r3, [pc, #200]	@ (8004474 <xPortStartScheduler+0xf0>)
 80043ac:	429a      	cmp	r2, r3
 80043ae:	d108      	bne.n	80043c2 <xPortStartScheduler+0x3e>
 80043b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043b4:	f383 8811 	msr	BASEPRI, r3
 80043b8:	f3bf 8f6f 	isb	sy
 80043bc:	f3bf 8f4f 	dsb	sy
 80043c0:	e7fe      	b.n	80043c0 <xPortStartScheduler+0x3c>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80043c2:	4b2d      	ldr	r3, [pc, #180]	@ (8004478 <xPortStartScheduler+0xf4>)
 80043c4:	781a      	ldrb	r2, [r3, #0]
 80043c6:	b2d2      	uxtb	r2, r2
 80043c8:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80043ca:	22ff      	movs	r2, #255	@ 0xff
 80043cc:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80043ce:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80043d0:	4a2a      	ldr	r2, [pc, #168]	@ (800447c <xPortStartScheduler+0xf8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80043d2:	b2db      	uxtb	r3, r3
 80043d4:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80043d8:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80043dc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80043e0:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80043e2:	4a27      	ldr	r2, [pc, #156]	@ (8004480 <xPortStartScheduler+0xfc>)
 80043e4:	2307      	movs	r3, #7
 80043e6:	6013      	str	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80043e8:	f89d 1003 	ldrb.w	r1, [sp, #3]
			ulMaxPRIGROUPValue--;
 80043ec:	6813      	ldr	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80043ee:	0609      	lsls	r1, r1, #24
 80043f0:	d40a      	bmi.n	8004408 <xPortStartScheduler+0x84>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80043f2:	2b03      	cmp	r3, #3
 80043f4:	d011      	beq.n	800441a <xPortStartScheduler+0x96>
 80043f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043fa:	f383 8811 	msr	BASEPRI, r3
 80043fe:	f3bf 8f6f 	isb	sy
 8004402:	f3bf 8f4f 	dsb	sy
 8004406:	e7fe      	b.n	8004406 <xPortStartScheduler+0x82>
			ulMaxPRIGROUPValue--;
 8004408:	3b01      	subs	r3, #1
 800440a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800440c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8004410:	005b      	lsls	r3, r3, #1
 8004412:	b2db      	uxtb	r3, r3
 8004414:	f88d 3003 	strb.w	r3, [sp, #3]
 8004418:	e7e6      	b.n	80043e8 <xPortStartScheduler+0x64>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800441a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800441e:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004420:	9b01      	ldr	r3, [sp, #4]
 8004422:	4a15      	ldr	r2, [pc, #84]	@ (8004478 <xPortStartScheduler+0xf4>)
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004424:	f04f 24e0 	mov.w	r4, #3758153728	@ 0xe000e000
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004428:	b2db      	uxtb	r3, r3
 800442a:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800442c:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 8004430:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004434:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004438:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 800443c:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004440:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	vPortSetupTimerInterrupt();
 8004444:	f7ff ff8c 	bl	8004360 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8004448:	4b0e      	ldr	r3, [pc, #56]	@ (8004484 <xPortStartScheduler+0x100>)
 800444a:	2500      	movs	r5, #0
 800444c:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 800444e:	f7ff feb1 	bl	80041b4 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004452:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	@ 0xf34
 8004456:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800445a:	f8c4 3f34 	str.w	r3, [r4, #3892]	@ 0xf34
	prvPortStartFirstTask();
 800445e:	f7ff fe95 	bl	800418c <prvPortStartFirstTask>
	vTaskSwitchContext();
 8004462:	f001 f899 	bl	8005598 <vTaskSwitchContext>
	prvTaskExitError();
 8004466:	f7ff feaf 	bl	80041c8 <prvTaskExitError>
}
 800446a:	4628      	mov	r0, r5
 800446c:	b003      	add	sp, #12
 800446e:	bd30      	pop	{r4, r5, pc}
 8004470:	410fc271 	.word	0x410fc271
 8004474:	410fc270 	.word	0x410fc270
 8004478:	e000e400 	.word	0xe000e400
 800447c:	20008b00 	.word	0x20008b00
 8004480:	20008afc 	.word	0x20008afc
 8004484:	20000010 	.word	0x20000010

08004488 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004488:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800448c:	2b0f      	cmp	r3, #15
 800448e:	d90e      	bls.n	80044ae <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004490:	4a11      	ldr	r2, [pc, #68]	@ (80044d8 <vPortValidateInterruptPriority+0x50>)
 8004492:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004494:	4a11      	ldr	r2, [pc, #68]	@ (80044dc <vPortValidateInterruptPriority+0x54>)
 8004496:	7812      	ldrb	r2, [r2, #0]
 8004498:	429a      	cmp	r2, r3
 800449a:	d908      	bls.n	80044ae <vPortValidateInterruptPriority+0x26>
 800449c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044a0:	f383 8811 	msr	BASEPRI, r3
 80044a4:	f3bf 8f6f 	isb	sy
 80044a8:	f3bf 8f4f 	dsb	sy
 80044ac:	e7fe      	b.n	80044ac <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80044ae:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80044b2:	4a0b      	ldr	r2, [pc, #44]	@ (80044e0 <vPortValidateInterruptPriority+0x58>)
 80044b4:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	@ 0xd0c
 80044b8:	6812      	ldr	r2, [r2, #0]
 80044ba:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80044be:	4293      	cmp	r3, r2
 80044c0:	d908      	bls.n	80044d4 <vPortValidateInterruptPriority+0x4c>
 80044c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044c6:	f383 8811 	msr	BASEPRI, r3
 80044ca:	f3bf 8f6f 	isb	sy
 80044ce:	f3bf 8f4f 	dsb	sy
 80044d2:	e7fe      	b.n	80044d2 <vPortValidateInterruptPriority+0x4a>
	}
 80044d4:	4770      	bx	lr
 80044d6:	bf00      	nop
 80044d8:	e000e3f0 	.word	0xe000e3f0
 80044dc:	20008b00 	.word	0x20008b00
 80044e0:	20008afc 	.word	0x20008afc

080044e4 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80044e4:	b510      	push	{r4, lr}
 80044e6:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80044e8:	f7ff febc 	bl	8004264 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80044ec:	6ba4      	ldr	r4, [r4, #56]	@ 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 80044ee:	f7ff fed9 	bl	80042a4 <vPortExitCritical>

	return xReturn;
}
 80044f2:	fab4 f084 	clz	r0, r4
 80044f6:	0940      	lsrs	r0, r0, #5
 80044f8:	bd10      	pop	{r4, pc}

080044fa <prvCopyDataToQueue>:
{
 80044fa:	b570      	push	{r4, r5, r6, lr}
 80044fc:	4616      	mov	r6, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80044fe:	6c02      	ldr	r2, [r0, #64]	@ 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004500:	6b85      	ldr	r5, [r0, #56]	@ 0x38
{
 8004502:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004504:	b942      	cbnz	r2, 8004518 <prvCopyDataToQueue+0x1e>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004506:	6806      	ldr	r6, [r0, #0]
 8004508:	b99e      	cbnz	r6, 8004532 <prvCopyDataToQueue+0x38>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800450a:	6880      	ldr	r0, [r0, #8]
 800450c:	f001 f99c 	bl	8005848 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004510:	60a6      	str	r6, [r4, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004512:	3501      	adds	r5, #1
 8004514:	63a5      	str	r5, [r4, #56]	@ 0x38
}
 8004516:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8004518:	b96e      	cbnz	r6, 8004536 <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800451a:	6840      	ldr	r0, [r0, #4]
 800451c:	f007 f8eb 	bl	800b6f6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004520:	6863      	ldr	r3, [r4, #4]
 8004522:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8004524:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004526:	68a2      	ldr	r2, [r4, #8]
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004528:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800452a:	4293      	cmp	r3, r2
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800452c:	bf24      	itt	cs
 800452e:	6823      	ldrcs	r3, [r4, #0]
 8004530:	6063      	strcs	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 8004532:	2000      	movs	r0, #0
 8004534:	e7ed      	b.n	8004512 <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004536:	68c0      	ldr	r0, [r0, #12]
 8004538:	f007 f8dd 	bl	800b6f6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800453c:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800453e:	68e3      	ldr	r3, [r4, #12]
 8004540:	4251      	negs	r1, r2
 8004542:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004544:	6822      	ldr	r2, [r4, #0]
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004546:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004548:	4293      	cmp	r3, r2
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800454a:	bf3e      	ittt	cc
 800454c:	68a3      	ldrcc	r3, [r4, #8]
 800454e:	185b      	addcc	r3, r3, r1
 8004550:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8004552:	2e02      	cmp	r6, #2
 8004554:	d1ed      	bne.n	8004532 <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004556:	b10d      	cbz	r5, 800455c <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 8004558:	3d01      	subs	r5, #1
 800455a:	e7ea      	b.n	8004532 <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 800455c:	4628      	mov	r0, r5
 800455e:	e7d8      	b.n	8004512 <prvCopyDataToQueue+0x18>

08004560 <prvCopyDataFromQueue>:
{
 8004560:	4603      	mov	r3, r0
 8004562:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004564:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
{
 8004566:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004568:	b16a      	cbz	r2, 8004586 <prvCopyDataFromQueue+0x26>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800456a:	68dc      	ldr	r4, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800456c:	6899      	ldr	r1, [r3, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800456e:	4414      	add	r4, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004570:	428c      	cmp	r4, r1
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004572:	bf28      	it	cs
 8004574:	6819      	ldrcs	r1, [r3, #0]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004576:	60dc      	str	r4, [r3, #12]
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004578:	bf28      	it	cs
 800457a:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800457c:	68d9      	ldr	r1, [r3, #12]
}
 800457e:	f85d 4b04 	ldr.w	r4, [sp], #4
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004582:	f007 b8b8 	b.w	800b6f6 <memcpy>
}
 8004586:	f85d 4b04 	ldr.w	r4, [sp], #4
 800458a:	4770      	bx	lr

0800458c <prvUnlockQueue>:
{
 800458c:	b570      	push	{r4, r5, r6, lr}
 800458e:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8004590:	f7ff fe68 	bl	8004264 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8004594:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004598:	f104 0624 	add.w	r6, r4, #36	@ 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 800459c:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800459e:	2d00      	cmp	r5, #0
 80045a0:	dd01      	ble.n	80045a6 <prvUnlockQueue+0x1a>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80045a2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80045a4:	b9b3      	cbnz	r3, 80045d4 <prvUnlockQueue+0x48>
		pxQueue->cTxLock = queueUNLOCKED;
 80045a6:	23ff      	movs	r3, #255	@ 0xff
 80045a8:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
	taskEXIT_CRITICAL();
 80045ac:	f7ff fe7a 	bl	80042a4 <vPortExitCritical>
	taskENTER_CRITICAL();
 80045b0:	f7ff fe58 	bl	8004264 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 80045b4:	f894 5044 	ldrb.w	r5, [r4, #68]	@ 0x44
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80045b8:	f104 0610 	add.w	r6, r4, #16
		int8_t cRxLock = pxQueue->cRxLock;
 80045bc:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80045be:	2d00      	cmp	r5, #0
 80045c0:	dd01      	ble.n	80045c6 <prvUnlockQueue+0x3a>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80045c2:	6923      	ldr	r3, [r4, #16]
 80045c4:	b97b      	cbnz	r3, 80045e6 <prvUnlockQueue+0x5a>
		pxQueue->cRxLock = queueUNLOCKED;
 80045c6:	23ff      	movs	r3, #255	@ 0xff
 80045c8:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
}
 80045cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 80045d0:	f7ff be68 	b.w	80042a4 <vPortExitCritical>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80045d4:	4630      	mov	r0, r6
 80045d6:	f001 f85b 	bl	8005690 <xTaskRemoveFromEventList>
 80045da:	b108      	cbz	r0, 80045e0 <prvUnlockQueue+0x54>
						vTaskMissedYield();
 80045dc:	f001 f8e0 	bl	80057a0 <vTaskMissedYield>
			--cTxLock;
 80045e0:	3d01      	subs	r5, #1
 80045e2:	b26d      	sxtb	r5, r5
 80045e4:	e7db      	b.n	800459e <prvUnlockQueue+0x12>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80045e6:	4630      	mov	r0, r6
 80045e8:	f001 f852 	bl	8005690 <xTaskRemoveFromEventList>
 80045ec:	b108      	cbz	r0, 80045f2 <prvUnlockQueue+0x66>
					vTaskMissedYield();
 80045ee:	f001 f8d7 	bl	80057a0 <vTaskMissedYield>
				--cRxLock;
 80045f2:	3d01      	subs	r5, #1
 80045f4:	b26d      	sxtb	r5, r5
 80045f6:	e7e2      	b.n	80045be <prvUnlockQueue+0x32>

080045f8 <xQueueGenericReset>:
{
 80045f8:	b538      	push	{r3, r4, r5, lr}
 80045fa:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 80045fc:	4604      	mov	r4, r0
 80045fe:	b940      	cbnz	r0, 8004612 <xQueueGenericReset+0x1a>
 8004600:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004604:	f383 8811 	msr	BASEPRI, r3
 8004608:	f3bf 8f6f 	isb	sy
 800460c:	f3bf 8f4f 	dsb	sy
 8004610:	e7fe      	b.n	8004610 <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 8004612:	f7ff fe27 	bl	8004264 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004616:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	@ 0x3c
 800461a:	6822      	ldr	r2, [r4, #0]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800461c:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800461e:	434b      	muls	r3, r1
 8004620:	18d0      	adds	r0, r2, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004622:	1a5b      	subs	r3, r3, r1
 8004624:	441a      	add	r2, r3
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004626:	60a0      	str	r0, [r4, #8]
		pxQueue->cRxLock = queueUNLOCKED;
 8004628:	23ff      	movs	r3, #255	@ 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800462a:	2000      	movs	r0, #0
 800462c:	63a0      	str	r0, [r4, #56]	@ 0x38
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800462e:	60e2      	str	r2, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004630:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004634:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
		if( xNewQueue == pdFALSE )
 8004638:	b9a5      	cbnz	r5, 8004664 <xQueueGenericReset+0x6c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800463a:	6923      	ldr	r3, [r4, #16]
 800463c:	b173      	cbz	r3, 800465c <xQueueGenericReset+0x64>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800463e:	f104 0010 	add.w	r0, r4, #16
 8004642:	f001 f825 	bl	8005690 <xTaskRemoveFromEventList>
 8004646:	b148      	cbz	r0, 800465c <xQueueGenericReset+0x64>
					queueYIELD_IF_USING_PREEMPTION();
 8004648:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800464c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004650:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8004654:	f3bf 8f4f 	dsb	sy
 8004658:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 800465c:	f7ff fe22 	bl	80042a4 <vPortExitCritical>
}
 8004660:	2001      	movs	r0, #1
 8004662:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004664:	f104 0010 	add.w	r0, r4, #16
 8004668:	f7ff fd50 	bl	800410c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800466c:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8004670:	f7ff fd4c 	bl	800410c <vListInitialise>
 8004674:	e7f2      	b.n	800465c <xQueueGenericReset+0x64>

08004676 <xQueueGenericCreateStatic>:
	{
 8004676:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004678:	460d      	mov	r5, r1
 800467a:	461c      	mov	r4, r3
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800467c:	b940      	cbnz	r0, 8004690 <xQueueGenericCreateStatic+0x1a>
 800467e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004682:	f383 8811 	msr	BASEPRI, r3
 8004686:	f3bf 8f6f 	isb	sy
 800468a:	f3bf 8f4f 	dsb	sy
 800468e:	e7fe      	b.n	800468e <xQueueGenericCreateStatic+0x18>
		configASSERT( pxStaticQueue != NULL );
 8004690:	b943      	cbnz	r3, 80046a4 <xQueueGenericCreateStatic+0x2e>
 8004692:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004696:	f383 8811 	msr	BASEPRI, r3
 800469a:	f3bf 8f6f 	isb	sy
 800469e:	f3bf 8f4f 	dsb	sy
 80046a2:	e7fe      	b.n	80046a2 <xQueueGenericCreateStatic+0x2c>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80046a4:	b14a      	cbz	r2, 80046ba <xQueueGenericCreateStatic+0x44>
 80046a6:	b991      	cbnz	r1, 80046ce <xQueueGenericCreateStatic+0x58>
 80046a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046ac:	f383 8811 	msr	BASEPRI, r3
 80046b0:	f3bf 8f6f 	isb	sy
 80046b4:	f3bf 8f4f 	dsb	sy
 80046b8:	e7fe      	b.n	80046b8 <xQueueGenericCreateStatic+0x42>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80046ba:	b141      	cbz	r1, 80046ce <xQueueGenericCreateStatic+0x58>
 80046bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046c0:	f383 8811 	msr	BASEPRI, r3
 80046c4:	f3bf 8f6f 	isb	sy
 80046c8:	f3bf 8f4f 	dsb	sy
 80046cc:	e7fe      	b.n	80046cc <xQueueGenericCreateStatic+0x56>
			volatile size_t xSize = sizeof( StaticQueue_t );
 80046ce:	2350      	movs	r3, #80	@ 0x50
 80046d0:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 80046d2:	9b01      	ldr	r3, [sp, #4]
 80046d4:	2b50      	cmp	r3, #80	@ 0x50
 80046d6:	d008      	beq.n	80046ea <xQueueGenericCreateStatic+0x74>
 80046d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046dc:	f383 8811 	msr	BASEPRI, r3
 80046e0:	f3bf 8f6f 	isb	sy
 80046e4:	f3bf 8f4f 	dsb	sy
 80046e8:	e7fe      	b.n	80046e8 <xQueueGenericCreateStatic+0x72>
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80046ea:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80046ec:	2d00      	cmp	r5, #0
 80046ee:	bf08      	it	eq
 80046f0:	4622      	moveq	r2, r4
	pxNewQueue->uxItemSize = uxItemSize;
 80046f2:	e9c4 050f 	strd	r0, r5, [r4, #60]	@ 0x3c
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80046f6:	f884 1046 	strb.w	r1, [r4, #70]	@ 0x46
 80046fa:	6022      	str	r2, [r4, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80046fc:	4620      	mov	r0, r4
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80046fe:	9b01      	ldr	r3, [sp, #4]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004700:	f7ff ff7a 	bl	80045f8 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8004704:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8004708:	f884 304c 	strb.w	r3, [r4, #76]	@ 0x4c
	}
 800470c:	4620      	mov	r0, r4
 800470e:	b003      	add	sp, #12
 8004710:	bd30      	pop	{r4, r5, pc}

08004712 <xQueueGenericCreate>:
	{
 8004712:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004714:	460d      	mov	r5, r1
 8004716:	4617      	mov	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004718:	4606      	mov	r6, r0
 800471a:	b940      	cbnz	r0, 800472e <xQueueGenericCreate+0x1c>
 800471c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004720:	f383 8811 	msr	BASEPRI, r3
 8004724:	f3bf 8f6f 	isb	sy
 8004728:	f3bf 8f4f 	dsb	sy
 800472c:	e7fe      	b.n	800472c <xQueueGenericCreate+0x1a>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800472e:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004730:	3050      	adds	r0, #80	@ 0x50
 8004732:	f7ff fc15 	bl	8003f60 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8004736:	4604      	mov	r4, r0
 8004738:	b170      	cbz	r0, 8004758 <xQueueGenericCreate+0x46>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800473a:	2300      	movs	r3, #0
 800473c:	f880 3046 	strb.w	r3, [r0, #70]	@ 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 8004740:	b165      	cbz	r5, 800475c <xQueueGenericCreate+0x4a>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004742:	f100 0350 	add.w	r3, r0, #80	@ 0x50
	pxNewQueue->uxItemSize = uxItemSize;
 8004746:	e9c4 650f 	strd	r6, r5, [r4, #60]	@ 0x3c
 800474a:	6023      	str	r3, [r4, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800474c:	2101      	movs	r1, #1
 800474e:	4620      	mov	r0, r4
 8004750:	f7ff ff52 	bl	80045f8 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8004754:	f884 704c 	strb.w	r7, [r4, #76]	@ 0x4c
	}
 8004758:	4620      	mov	r0, r4
 800475a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800475c:	4603      	mov	r3, r0
 800475e:	e7f2      	b.n	8004746 <xQueueGenericCreate+0x34>

08004760 <xQueueCreateCountingSemaphoreStatic>:
	{
 8004760:	b513      	push	{r0, r1, r4, lr}
 8004762:	4613      	mov	r3, r2
 8004764:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 8004766:	b940      	cbnz	r0, 800477a <xQueueCreateCountingSemaphoreStatic+0x1a>
 8004768:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800476c:	f383 8811 	msr	BASEPRI, r3
 8004770:	f3bf 8f6f 	isb	sy
 8004774:	f3bf 8f4f 	dsb	sy
 8004778:	e7fe      	b.n	8004778 <xQueueCreateCountingSemaphoreStatic+0x18>
		configASSERT( uxInitialCount <= uxMaxCount );
 800477a:	4288      	cmp	r0, r1
 800477c:	d208      	bcs.n	8004790 <xQueueCreateCountingSemaphoreStatic+0x30>
 800477e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004782:	f383 8811 	msr	BASEPRI, r3
 8004786:	f3bf 8f6f 	isb	sy
 800478a:	f3bf 8f4f 	dsb	sy
 800478e:	e7fe      	b.n	800478e <xQueueCreateCountingSemaphoreStatic+0x2e>
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8004790:	2202      	movs	r2, #2
 8004792:	9200      	str	r2, [sp, #0]
 8004794:	2200      	movs	r2, #0
 8004796:	4611      	mov	r1, r2
 8004798:	f7ff ff6d 	bl	8004676 <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 800479c:	b100      	cbz	r0, 80047a0 <xQueueCreateCountingSemaphoreStatic+0x40>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800479e:	6384      	str	r4, [r0, #56]	@ 0x38
	}
 80047a0:	b002      	add	sp, #8
 80047a2:	bd10      	pop	{r4, pc}

080047a4 <xQueueCreateCountingSemaphore>:
	{
 80047a4:	b510      	push	{r4, lr}
 80047a6:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 80047a8:	b940      	cbnz	r0, 80047bc <xQueueCreateCountingSemaphore+0x18>
 80047aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047ae:	f383 8811 	msr	BASEPRI, r3
 80047b2:	f3bf 8f6f 	isb	sy
 80047b6:	f3bf 8f4f 	dsb	sy
 80047ba:	e7fe      	b.n	80047ba <xQueueCreateCountingSemaphore+0x16>
		configASSERT( uxInitialCount <= uxMaxCount );
 80047bc:	4288      	cmp	r0, r1
 80047be:	d208      	bcs.n	80047d2 <xQueueCreateCountingSemaphore+0x2e>
 80047c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047c4:	f383 8811 	msr	BASEPRI, r3
 80047c8:	f3bf 8f6f 	isb	sy
 80047cc:	f3bf 8f4f 	dsb	sy
 80047d0:	e7fe      	b.n	80047d0 <xQueueCreateCountingSemaphore+0x2c>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80047d2:	2202      	movs	r2, #2
 80047d4:	2100      	movs	r1, #0
 80047d6:	f7ff ff9c 	bl	8004712 <xQueueGenericCreate>
		if( xHandle != NULL )
 80047da:	b100      	cbz	r0, 80047de <xQueueCreateCountingSemaphore+0x3a>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80047dc:	6384      	str	r4, [r0, #56]	@ 0x38
	}
 80047de:	bd10      	pop	{r4, pc}

080047e0 <xQueueGenericSend>:
{
 80047e0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80047e4:	460f      	mov	r7, r1
 80047e6:	9201      	str	r2, [sp, #4]
 80047e8:	461e      	mov	r6, r3
	configASSERT( pxQueue );
 80047ea:	4604      	mov	r4, r0
 80047ec:	b940      	cbnz	r0, 8004800 <xQueueGenericSend+0x20>
 80047ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047f2:	f383 8811 	msr	BASEPRI, r3
 80047f6:	f3bf 8f6f 	isb	sy
 80047fa:	f3bf 8f4f 	dsb	sy
 80047fe:	e7fe      	b.n	80047fe <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004800:	b951      	cbnz	r1, 8004818 <xQueueGenericSend+0x38>
 8004802:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8004804:	b143      	cbz	r3, 8004818 <xQueueGenericSend+0x38>
 8004806:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800480a:	f383 8811 	msr	BASEPRI, r3
 800480e:	f3bf 8f6f 	isb	sy
 8004812:	f3bf 8f4f 	dsb	sy
 8004816:	e7fe      	b.n	8004816 <xQueueGenericSend+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004818:	2e02      	cmp	r6, #2
 800481a:	d10b      	bne.n	8004834 <xQueueGenericSend+0x54>
 800481c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800481e:	2b01      	cmp	r3, #1
 8004820:	d008      	beq.n	8004834 <xQueueGenericSend+0x54>
 8004822:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004826:	f383 8811 	msr	BASEPRI, r3
 800482a:	f3bf 8f6f 	isb	sy
 800482e:	f3bf 8f4f 	dsb	sy
 8004832:	e7fe      	b.n	8004832 <xQueueGenericSend+0x52>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004834:	f000 ffba 	bl	80057ac <xTaskGetSchedulerState>
 8004838:	4605      	mov	r5, r0
 800483a:	b320      	cbz	r0, 8004886 <xQueueGenericSend+0xa6>
 800483c:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 800483e:	f04f 0800 	mov.w	r8, #0
		taskENTER_CRITICAL();
 8004842:	f7ff fd0f 	bl	8004264 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004846:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8004848:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800484a:	429a      	cmp	r2, r3
 800484c:	d227      	bcs.n	800489e <xQueueGenericSend+0xbe>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800484e:	4632      	mov	r2, r6
 8004850:	4639      	mov	r1, r7
 8004852:	4620      	mov	r0, r4
 8004854:	f7ff fe51 	bl	80044fa <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004858:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800485a:	b11b      	cbz	r3, 8004864 <xQueueGenericSend+0x84>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800485c:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8004860:	f000 ff16 	bl	8005690 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 8004864:	b148      	cbz	r0, 800487a <xQueueGenericSend+0x9a>
						queueYIELD_IF_USING_PREEMPTION();
 8004866:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800486a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800486e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8004872:	f3bf 8f4f 	dsb	sy
 8004876:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800487a:	f7ff fd13 	bl	80042a4 <vPortExitCritical>
				return pdPASS;
 800487e:	2001      	movs	r0, #1
}
 8004880:	b004      	add	sp, #16
 8004882:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004886:	9b01      	ldr	r3, [sp, #4]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d0d8      	beq.n	800483e <xQueueGenericSend+0x5e>
 800488c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004890:	f383 8811 	msr	BASEPRI, r3
 8004894:	f3bf 8f6f 	isb	sy
 8004898:	f3bf 8f4f 	dsb	sy
 800489c:	e7fe      	b.n	800489c <xQueueGenericSend+0xbc>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800489e:	2e02      	cmp	r6, #2
 80048a0:	d0d5      	beq.n	800484e <xQueueGenericSend+0x6e>
				if( xTicksToWait == ( TickType_t ) 0 )
 80048a2:	9b01      	ldr	r3, [sp, #4]
 80048a4:	b91b      	cbnz	r3, 80048ae <xQueueGenericSend+0xce>
					taskEXIT_CRITICAL();
 80048a6:	f7ff fcfd 	bl	80042a4 <vPortExitCritical>
					return errQUEUE_FULL;
 80048aa:	2000      	movs	r0, #0
 80048ac:	e7e8      	b.n	8004880 <xQueueGenericSend+0xa0>
				else if( xEntryTimeSet == pdFALSE )
 80048ae:	b915      	cbnz	r5, 80048b6 <xQueueGenericSend+0xd6>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80048b0:	a802      	add	r0, sp, #8
 80048b2:	f000 ff2d 	bl	8005710 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 80048b6:	f7ff fcf5 	bl	80042a4 <vPortExitCritical>
		vTaskSuspendAll();
 80048ba:	f000 fcc7 	bl	800524c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80048be:	f7ff fcd1 	bl	8004264 <vPortEnterCritical>
 80048c2:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80048c6:	2bff      	cmp	r3, #255	@ 0xff
 80048c8:	bf08      	it	eq
 80048ca:	f884 8044 	strbeq.w	r8, [r4, #68]	@ 0x44
 80048ce:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80048d2:	2bff      	cmp	r3, #255	@ 0xff
 80048d4:	bf08      	it	eq
 80048d6:	f884 8045 	strbeq.w	r8, [r4, #69]	@ 0x45
 80048da:	f7ff fce3 	bl	80042a4 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80048de:	a901      	add	r1, sp, #4
 80048e0:	a802      	add	r0, sp, #8
 80048e2:	f000 ff21 	bl	8005728 <xTaskCheckForTimeOut>
 80048e6:	bb38      	cbnz	r0, 8004938 <xQueueGenericSend+0x158>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80048e8:	f7ff fcbc 	bl	8004264 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80048ec:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80048ee:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d10e      	bne.n	8004912 <xQueueGenericSend+0x132>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 80048f4:	f7ff fcd6 	bl	80042a4 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80048f8:	9901      	ldr	r1, [sp, #4]
 80048fa:	f104 0010 	add.w	r0, r4, #16
 80048fe:	f000 fe8f 	bl	8005620 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004902:	4620      	mov	r0, r4
 8004904:	f7ff fe42 	bl	800458c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004908:	f000 fd44 	bl	8005394 <xTaskResumeAll>
 800490c:	b148      	cbz	r0, 8004922 <xQueueGenericSend+0x142>
 800490e:	2501      	movs	r5, #1
 8004910:	e797      	b.n	8004842 <xQueueGenericSend+0x62>
	taskEXIT_CRITICAL();
 8004912:	f7ff fcc7 	bl	80042a4 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8004916:	4620      	mov	r0, r4
 8004918:	f7ff fe38 	bl	800458c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800491c:	f000 fd3a 	bl	8005394 <xTaskResumeAll>
 8004920:	e7f5      	b.n	800490e <xQueueGenericSend+0x12e>
					portYIELD_WITHIN_API();
 8004922:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8004926:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800492a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800492e:	f3bf 8f4f 	dsb	sy
 8004932:	f3bf 8f6f 	isb	sy
 8004936:	e7ea      	b.n	800490e <xQueueGenericSend+0x12e>
			prvUnlockQueue( pxQueue );
 8004938:	4620      	mov	r0, r4
 800493a:	f7ff fe27 	bl	800458c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800493e:	f000 fd29 	bl	8005394 <xTaskResumeAll>
			return errQUEUE_FULL;
 8004942:	e7b2      	b.n	80048aa <xQueueGenericSend+0xca>

08004944 <xQueueGenericSendFromISR>:
{
 8004944:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004948:	4689      	mov	r9, r1
 800494a:	4617      	mov	r7, r2
 800494c:	461e      	mov	r6, r3
	configASSERT( pxQueue );
 800494e:	4604      	mov	r4, r0
 8004950:	b940      	cbnz	r0, 8004964 <xQueueGenericSendFromISR+0x20>
 8004952:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004956:	f383 8811 	msr	BASEPRI, r3
 800495a:	f3bf 8f6f 	isb	sy
 800495e:	f3bf 8f4f 	dsb	sy
 8004962:	e7fe      	b.n	8004962 <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004964:	b951      	cbnz	r1, 800497c <xQueueGenericSendFromISR+0x38>
 8004966:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8004968:	b143      	cbz	r3, 800497c <xQueueGenericSendFromISR+0x38>
 800496a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800496e:	f383 8811 	msr	BASEPRI, r3
 8004972:	f3bf 8f6f 	isb	sy
 8004976:	f3bf 8f4f 	dsb	sy
 800497a:	e7fe      	b.n	800497a <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800497c:	2e02      	cmp	r6, #2
 800497e:	d10b      	bne.n	8004998 <xQueueGenericSendFromISR+0x54>
 8004980:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8004982:	2b01      	cmp	r3, #1
 8004984:	d008      	beq.n	8004998 <xQueueGenericSendFromISR+0x54>
 8004986:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800498a:	f383 8811 	msr	BASEPRI, r3
 800498e:	f3bf 8f6f 	isb	sy
 8004992:	f3bf 8f4f 	dsb	sy
 8004996:	e7fe      	b.n	8004996 <xQueueGenericSendFromISR+0x52>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004998:	f7ff fd76 	bl	8004488 <vPortValidateInterruptPriority>
	__asm volatile
 800499c:	f3ef 8811 	mrs	r8, BASEPRI
 80049a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049a4:	f383 8811 	msr	BASEPRI, r3
 80049a8:	f3bf 8f6f 	isb	sy
 80049ac:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80049b0:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80049b2:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80049b4:	429a      	cmp	r2, r3
 80049b6:	d301      	bcc.n	80049bc <xQueueGenericSendFromISR+0x78>
 80049b8:	2e02      	cmp	r6, #2
 80049ba:	d11e      	bne.n	80049fa <xQueueGenericSendFromISR+0xb6>
			const int8_t cTxLock = pxQueue->cTxLock;
 80049bc:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80049c0:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			const int8_t cTxLock = pxQueue->cTxLock;
 80049c2:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80049c4:	4632      	mov	r2, r6
 80049c6:	4649      	mov	r1, r9
 80049c8:	4620      	mov	r0, r4
 80049ca:	f7ff fd96 	bl	80044fa <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 80049ce:	1c6b      	adds	r3, r5, #1
 80049d0:	d10e      	bne.n	80049f0 <xQueueGenericSendFromISR+0xac>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80049d2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80049d4:	b13b      	cbz	r3, 80049e6 <xQueueGenericSendFromISR+0xa2>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80049d6:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80049da:	f000 fe59 	bl	8005690 <xTaskRemoveFromEventList>
 80049de:	b110      	cbz	r0, 80049e6 <xQueueGenericSendFromISR+0xa2>
							if( pxHigherPriorityTaskWoken != NULL )
 80049e0:	b10f      	cbz	r7, 80049e6 <xQueueGenericSendFromISR+0xa2>
								*pxHigherPriorityTaskWoken = pdTRUE;
 80049e2:	2301      	movs	r3, #1
 80049e4:	603b      	str	r3, [r7, #0]
			xReturn = pdPASS;
 80049e6:	2001      	movs	r0, #1
	__asm volatile
 80049e8:	f388 8811 	msr	BASEPRI, r8
}
 80049ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80049f0:	3501      	adds	r5, #1
 80049f2:	b26d      	sxtb	r5, r5
 80049f4:	f884 5045 	strb.w	r5, [r4, #69]	@ 0x45
 80049f8:	e7f5      	b.n	80049e6 <xQueueGenericSendFromISR+0xa2>
			xReturn = errQUEUE_FULL;
 80049fa:	2000      	movs	r0, #0
 80049fc:	e7f4      	b.n	80049e8 <xQueueGenericSendFromISR+0xa4>

080049fe <xQueueGiveFromISR>:
{
 80049fe:	b570      	push	{r4, r5, r6, lr}
 8004a00:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8004a02:	4604      	mov	r4, r0
 8004a04:	b940      	cbnz	r0, 8004a18 <xQueueGiveFromISR+0x1a>
	__asm volatile
 8004a06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a0a:	f383 8811 	msr	BASEPRI, r3
 8004a0e:	f3bf 8f6f 	isb	sy
 8004a12:	f3bf 8f4f 	dsb	sy
 8004a16:	e7fe      	b.n	8004a16 <xQueueGiveFromISR+0x18>
	configASSERT( pxQueue->uxItemSize == 0 );
 8004a18:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8004a1a:	b143      	cbz	r3, 8004a2e <xQueueGiveFromISR+0x30>
 8004a1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a20:	f383 8811 	msr	BASEPRI, r3
 8004a24:	f3bf 8f6f 	isb	sy
 8004a28:	f3bf 8f4f 	dsb	sy
 8004a2c:	e7fe      	b.n	8004a2c <xQueueGiveFromISR+0x2e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8004a2e:	6803      	ldr	r3, [r0, #0]
 8004a30:	b953      	cbnz	r3, 8004a48 <xQueueGiveFromISR+0x4a>
 8004a32:	6883      	ldr	r3, [r0, #8]
 8004a34:	b143      	cbz	r3, 8004a48 <xQueueGiveFromISR+0x4a>
 8004a36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a3a:	f383 8811 	msr	BASEPRI, r3
 8004a3e:	f3bf 8f6f 	isb	sy
 8004a42:	f3bf 8f4f 	dsb	sy
 8004a46:	e7fe      	b.n	8004a46 <xQueueGiveFromISR+0x48>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004a48:	f7ff fd1e 	bl	8004488 <vPortValidateInterruptPriority>
	__asm volatile
 8004a4c:	f3ef 8611 	mrs	r6, BASEPRI
 8004a50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a54:	f383 8811 	msr	BASEPRI, r3
 8004a58:	f3bf 8f6f 	isb	sy
 8004a5c:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004a60:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 8004a62:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d919      	bls.n	8004a9c <xQueueGiveFromISR+0x9e>
			const int8_t cTxLock = pxQueue->cTxLock;
 8004a68:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004a6c:	3201      	adds	r2, #1
			if( cTxLock == queueUNLOCKED )
 8004a6e:	29ff      	cmp	r1, #255	@ 0xff
			const int8_t cTxLock = pxQueue->cTxLock;
 8004a70:	b24b      	sxtb	r3, r1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004a72:	63a2      	str	r2, [r4, #56]	@ 0x38
			if( cTxLock == queueUNLOCKED )
 8004a74:	d10d      	bne.n	8004a92 <xQueueGiveFromISR+0x94>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004a76:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8004a78:	b13b      	cbz	r3, 8004a8a <xQueueGiveFromISR+0x8c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004a7a:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8004a7e:	f000 fe07 	bl	8005690 <xTaskRemoveFromEventList>
 8004a82:	b110      	cbz	r0, 8004a8a <xQueueGiveFromISR+0x8c>
							if( pxHigherPriorityTaskWoken != NULL )
 8004a84:	b10d      	cbz	r5, 8004a8a <xQueueGiveFromISR+0x8c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004a86:	2301      	movs	r3, #1
 8004a88:	602b      	str	r3, [r5, #0]
			xReturn = pdPASS;
 8004a8a:	2001      	movs	r0, #1
	__asm volatile
 8004a8c:	f386 8811 	msr	BASEPRI, r6
}
 8004a90:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004a92:	3301      	adds	r3, #1
 8004a94:	b25b      	sxtb	r3, r3
 8004a96:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8004a9a:	e7f6      	b.n	8004a8a <xQueueGiveFromISR+0x8c>
			xReturn = errQUEUE_FULL;
 8004a9c:	2000      	movs	r0, #0
 8004a9e:	e7f5      	b.n	8004a8c <xQueueGiveFromISR+0x8e>

08004aa0 <xQueueReceive>:
{
 8004aa0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8004aa4:	460e      	mov	r6, r1
 8004aa6:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8004aa8:	4604      	mov	r4, r0
 8004aaa:	b940      	cbnz	r0, 8004abe <xQueueReceive+0x1e>
	__asm volatile
 8004aac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ab0:	f383 8811 	msr	BASEPRI, r3
 8004ab4:	f3bf 8f6f 	isb	sy
 8004ab8:	f3bf 8f4f 	dsb	sy
 8004abc:	e7fe      	b.n	8004abc <xQueueReceive+0x1c>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004abe:	b951      	cbnz	r1, 8004ad6 <xQueueReceive+0x36>
 8004ac0:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8004ac2:	b143      	cbz	r3, 8004ad6 <xQueueReceive+0x36>
 8004ac4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ac8:	f383 8811 	msr	BASEPRI, r3
 8004acc:	f3bf 8f6f 	isb	sy
 8004ad0:	f3bf 8f4f 	dsb	sy
 8004ad4:	e7fe      	b.n	8004ad4 <xQueueReceive+0x34>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004ad6:	f000 fe69 	bl	80057ac <xTaskGetSchedulerState>
 8004ada:	4605      	mov	r5, r0
 8004adc:	b318      	cbz	r0, 8004b26 <xQueueReceive+0x86>
 8004ade:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 8004ae0:	f04f 0800 	mov.w	r8, #0
		taskENTER_CRITICAL();
 8004ae4:	f7ff fbbe 	bl	8004264 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004ae8:	6ba7      	ldr	r7, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004aea:	b347      	cbz	r7, 8004b3e <xQueueReceive+0x9e>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004aec:	4631      	mov	r1, r6
 8004aee:	4620      	mov	r0, r4
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004af0:	3f01      	subs	r7, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004af2:	f7ff fd35 	bl	8004560 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004af6:	63a7      	str	r7, [r4, #56]	@ 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004af8:	6923      	ldr	r3, [r4, #16]
 8004afa:	b173      	cbz	r3, 8004b1a <xQueueReceive+0x7a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004afc:	f104 0010 	add.w	r0, r4, #16
 8004b00:	f000 fdc6 	bl	8005690 <xTaskRemoveFromEventList>
 8004b04:	b148      	cbz	r0, 8004b1a <xQueueReceive+0x7a>
						queueYIELD_IF_USING_PREEMPTION();
 8004b06:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8004b0a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b0e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8004b12:	f3bf 8f4f 	dsb	sy
 8004b16:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8004b1a:	f7ff fbc3 	bl	80042a4 <vPortExitCritical>
				return pdPASS;
 8004b1e:	2001      	movs	r0, #1
}
 8004b20:	b004      	add	sp, #16
 8004b22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004b26:	9b01      	ldr	r3, [sp, #4]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d0d9      	beq.n	8004ae0 <xQueueReceive+0x40>
 8004b2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b30:	f383 8811 	msr	BASEPRI, r3
 8004b34:	f3bf 8f6f 	isb	sy
 8004b38:	f3bf 8f4f 	dsb	sy
 8004b3c:	e7fe      	b.n	8004b3c <xQueueReceive+0x9c>
				if( xTicksToWait == ( TickType_t ) 0 )
 8004b3e:	9b01      	ldr	r3, [sp, #4]
 8004b40:	b91b      	cbnz	r3, 8004b4a <xQueueReceive+0xaa>
					taskEXIT_CRITICAL();
 8004b42:	f7ff fbaf 	bl	80042a4 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8004b46:	2000      	movs	r0, #0
 8004b48:	e7ea      	b.n	8004b20 <xQueueReceive+0x80>
				else if( xEntryTimeSet == pdFALSE )
 8004b4a:	b915      	cbnz	r5, 8004b52 <xQueueReceive+0xb2>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004b4c:	a802      	add	r0, sp, #8
 8004b4e:	f000 fddf 	bl	8005710 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8004b52:	f7ff fba7 	bl	80042a4 <vPortExitCritical>
		vTaskSuspendAll();
 8004b56:	f000 fb79 	bl	800524c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004b5a:	f7ff fb83 	bl	8004264 <vPortEnterCritical>
 8004b5e:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8004b62:	2bff      	cmp	r3, #255	@ 0xff
 8004b64:	bf08      	it	eq
 8004b66:	f884 8044 	strbeq.w	r8, [r4, #68]	@ 0x44
 8004b6a:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8004b6e:	2bff      	cmp	r3, #255	@ 0xff
 8004b70:	bf08      	it	eq
 8004b72:	f884 8045 	strbeq.w	r8, [r4, #69]	@ 0x45
 8004b76:	f7ff fb95 	bl	80042a4 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004b7a:	a901      	add	r1, sp, #4
 8004b7c:	a802      	add	r0, sp, #8
 8004b7e:	f000 fdd3 	bl	8005728 <xTaskCheckForTimeOut>
 8004b82:	bb00      	cbnz	r0, 8004bc6 <xQueueReceive+0x126>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004b84:	4620      	mov	r0, r4
 8004b86:	f7ff fcad 	bl	80044e4 <prvIsQueueEmpty>
 8004b8a:	b1b0      	cbz	r0, 8004bba <xQueueReceive+0x11a>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004b8c:	9901      	ldr	r1, [sp, #4]
 8004b8e:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8004b92:	f000 fd45 	bl	8005620 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004b96:	4620      	mov	r0, r4
 8004b98:	f7ff fcf8 	bl	800458c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004b9c:	f000 fbfa 	bl	8005394 <xTaskResumeAll>
 8004ba0:	b948      	cbnz	r0, 8004bb6 <xQueueReceive+0x116>
					portYIELD_WITHIN_API();
 8004ba2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8004ba6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004baa:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8004bae:	f3bf 8f4f 	dsb	sy
 8004bb2:	f3bf 8f6f 	isb	sy
 8004bb6:	2501      	movs	r5, #1
 8004bb8:	e794      	b.n	8004ae4 <xQueueReceive+0x44>
				prvUnlockQueue( pxQueue );
 8004bba:	4620      	mov	r0, r4
 8004bbc:	f7ff fce6 	bl	800458c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004bc0:	f000 fbe8 	bl	8005394 <xTaskResumeAll>
 8004bc4:	e7f7      	b.n	8004bb6 <xQueueReceive+0x116>
			prvUnlockQueue( pxQueue );
 8004bc6:	4620      	mov	r0, r4
 8004bc8:	f7ff fce0 	bl	800458c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004bcc:	f000 fbe2 	bl	8005394 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004bd0:	4620      	mov	r0, r4
 8004bd2:	f7ff fc87 	bl	80044e4 <prvIsQueueEmpty>
 8004bd6:	2800      	cmp	r0, #0
 8004bd8:	d0ed      	beq.n	8004bb6 <xQueueReceive+0x116>
 8004bda:	e7b4      	b.n	8004b46 <xQueueReceive+0xa6>

08004bdc <xQueueSemaphoreTake>:
{
 8004bdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004bde:	b085      	sub	sp, #20
	configASSERT( ( pxQueue ) );
 8004be0:	4604      	mov	r4, r0
{
 8004be2:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 8004be4:	b940      	cbnz	r0, 8004bf8 <xQueueSemaphoreTake+0x1c>
 8004be6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bea:	f383 8811 	msr	BASEPRI, r3
 8004bee:	f3bf 8f6f 	isb	sy
 8004bf2:	f3bf 8f4f 	dsb	sy
 8004bf6:	e7fe      	b.n	8004bf6 <xQueueSemaphoreTake+0x1a>
	configASSERT( pxQueue->uxItemSize == 0 );
 8004bf8:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 8004bfa:	b145      	cbz	r5, 8004c0e <xQueueSemaphoreTake+0x32>
 8004bfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c00:	f383 8811 	msr	BASEPRI, r3
 8004c04:	f3bf 8f6f 	isb	sy
 8004c08:	f3bf 8f4f 	dsb	sy
 8004c0c:	e7fe      	b.n	8004c0c <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004c0e:	f000 fdcd 	bl	80057ac <xTaskGetSchedulerState>
 8004c12:	4606      	mov	r6, r0
 8004c14:	b320      	cbz	r0, 8004c60 <xQueueSemaphoreTake+0x84>
 8004c16:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 8004c18:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
 8004c1a:	f7ff fb23 	bl	8004264 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004c1e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004c20:	b353      	cbz	r3, 8004c78 <xQueueSemaphoreTake+0x9c>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004c22:	3b01      	subs	r3, #1
 8004c24:	63a3      	str	r3, [r4, #56]	@ 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004c26:	6823      	ldr	r3, [r4, #0]
 8004c28:	b913      	cbnz	r3, 8004c30 <xQueueSemaphoreTake+0x54>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8004c2a:	f000 fe9d 	bl	8005968 <pvTaskIncrementMutexHeldCount>
 8004c2e:	60a0      	str	r0, [r4, #8]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004c30:	6923      	ldr	r3, [r4, #16]
 8004c32:	b173      	cbz	r3, 8004c52 <xQueueSemaphoreTake+0x76>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004c34:	f104 0010 	add.w	r0, r4, #16
 8004c38:	f000 fd2a 	bl	8005690 <xTaskRemoveFromEventList>
 8004c3c:	b148      	cbz	r0, 8004c52 <xQueueSemaphoreTake+0x76>
						queueYIELD_IF_USING_PREEMPTION();
 8004c3e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8004c42:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004c46:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8004c4a:	f3bf 8f4f 	dsb	sy
 8004c4e:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8004c52:	f7ff fb27 	bl	80042a4 <vPortExitCritical>
				return pdPASS;
 8004c56:	2001      	movs	r0, #1
}
 8004c58:	b005      	add	sp, #20
 8004c5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c5c:	4635      	mov	r5, r6
 8004c5e:	e7db      	b.n	8004c18 <xQueueSemaphoreTake+0x3c>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004c60:	9b01      	ldr	r3, [sp, #4]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d0fa      	beq.n	8004c5c <xQueueSemaphoreTake+0x80>
 8004c66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c6a:	f383 8811 	msr	BASEPRI, r3
 8004c6e:	f3bf 8f6f 	isb	sy
 8004c72:	f3bf 8f4f 	dsb	sy
 8004c76:	e7fe      	b.n	8004c76 <xQueueSemaphoreTake+0x9a>
				if( xTicksToWait == ( TickType_t ) 0 )
 8004c78:	9b01      	ldr	r3, [sp, #4]
 8004c7a:	b953      	cbnz	r3, 8004c92 <xQueueSemaphoreTake+0xb6>
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004c7c:	2d00      	cmp	r5, #0
 8004c7e:	d066      	beq.n	8004d4e <xQueueSemaphoreTake+0x172>
 8004c80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c84:	f383 8811 	msr	BASEPRI, r3
 8004c88:	f3bf 8f6f 	isb	sy
 8004c8c:	f3bf 8f4f 	dsb	sy
 8004c90:	e7fe      	b.n	8004c90 <xQueueSemaphoreTake+0xb4>
				else if( xEntryTimeSet == pdFALSE )
 8004c92:	b916      	cbnz	r6, 8004c9a <xQueueSemaphoreTake+0xbe>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004c94:	a802      	add	r0, sp, #8
 8004c96:	f000 fd3b 	bl	8005710 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8004c9a:	f7ff fb03 	bl	80042a4 <vPortExitCritical>
		vTaskSuspendAll();
 8004c9e:	f000 fad5 	bl	800524c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004ca2:	f7ff fadf 	bl	8004264 <vPortEnterCritical>
 8004ca6:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8004caa:	2bff      	cmp	r3, #255	@ 0xff
 8004cac:	bf08      	it	eq
 8004cae:	f884 7044 	strbeq.w	r7, [r4, #68]	@ 0x44
 8004cb2:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8004cb6:	2bff      	cmp	r3, #255	@ 0xff
 8004cb8:	bf08      	it	eq
 8004cba:	f884 7045 	strbeq.w	r7, [r4, #69]	@ 0x45
 8004cbe:	f7ff faf1 	bl	80042a4 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004cc2:	a901      	add	r1, sp, #4
 8004cc4:	a802      	add	r0, sp, #8
 8004cc6:	f000 fd2f 	bl	8005728 <xTaskCheckForTimeOut>
 8004cca:	bb50      	cbnz	r0, 8004d22 <xQueueSemaphoreTake+0x146>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004ccc:	4620      	mov	r0, r4
 8004cce:	f7ff fc09 	bl	80044e4 <prvIsQueueEmpty>
 8004cd2:	b300      	cbz	r0, 8004d16 <xQueueSemaphoreTake+0x13a>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004cd4:	6823      	ldr	r3, [r4, #0]
 8004cd6:	b93b      	cbnz	r3, 8004ce8 <xQueueSemaphoreTake+0x10c>
						taskENTER_CRITICAL();
 8004cd8:	f7ff fac4 	bl	8004264 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004cdc:	68a0      	ldr	r0, [r4, #8]
 8004cde:	f000 fd75 	bl	80057cc <xTaskPriorityInherit>
 8004ce2:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 8004ce4:	f7ff fade 	bl	80042a4 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004ce8:	9901      	ldr	r1, [sp, #4]
 8004cea:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8004cee:	f000 fc97 	bl	8005620 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004cf2:	4620      	mov	r0, r4
 8004cf4:	f7ff fc4a 	bl	800458c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004cf8:	f000 fb4c 	bl	8005394 <xTaskResumeAll>
 8004cfc:	b948      	cbnz	r0, 8004d12 <xQueueSemaphoreTake+0x136>
					portYIELD_WITHIN_API();
 8004cfe:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8004d02:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d06:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8004d0a:	f3bf 8f4f 	dsb	sy
 8004d0e:	f3bf 8f6f 	isb	sy
 8004d12:	2601      	movs	r6, #1
 8004d14:	e781      	b.n	8004c1a <xQueueSemaphoreTake+0x3e>
				prvUnlockQueue( pxQueue );
 8004d16:	4620      	mov	r0, r4
 8004d18:	f7ff fc38 	bl	800458c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004d1c:	f000 fb3a 	bl	8005394 <xTaskResumeAll>
 8004d20:	e7f7      	b.n	8004d12 <xQueueSemaphoreTake+0x136>
			prvUnlockQueue( pxQueue );
 8004d22:	4620      	mov	r0, r4
 8004d24:	f7ff fc32 	bl	800458c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004d28:	f000 fb34 	bl	8005394 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004d2c:	4620      	mov	r0, r4
 8004d2e:	f7ff fbd9 	bl	80044e4 <prvIsQueueEmpty>
 8004d32:	2800      	cmp	r0, #0
 8004d34:	d0ed      	beq.n	8004d12 <xQueueSemaphoreTake+0x136>
					if( xInheritanceOccurred != pdFALSE )
 8004d36:	b165      	cbz	r5, 8004d52 <xQueueSemaphoreTake+0x176>
						taskENTER_CRITICAL();
 8004d38:	f7ff fa94 	bl	8004264 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8004d3c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8004d3e:	b119      	cbz	r1, 8004d48 <xQueueSemaphoreTake+0x16c>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004d40:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8004d42:	6819      	ldr	r1, [r3, #0]
 8004d44:	f1c1 0138 	rsb	r1, r1, #56	@ 0x38
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004d48:	68a0      	ldr	r0, [r4, #8]
 8004d4a:	f000 fdbf 	bl	80058cc <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 8004d4e:	f7ff faa9 	bl	80042a4 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8004d52:	2000      	movs	r0, #0
 8004d54:	e780      	b.n	8004c58 <xQueueSemaphoreTake+0x7c>

08004d56 <xQueueReceiveFromISR>:
{
 8004d56:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d5a:	4689      	mov	r9, r1
 8004d5c:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 8004d5e:	4604      	mov	r4, r0
 8004d60:	b940      	cbnz	r0, 8004d74 <xQueueReceiveFromISR+0x1e>
 8004d62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d66:	f383 8811 	msr	BASEPRI, r3
 8004d6a:	f3bf 8f6f 	isb	sy
 8004d6e:	f3bf 8f4f 	dsb	sy
 8004d72:	e7fe      	b.n	8004d72 <xQueueReceiveFromISR+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004d74:	b951      	cbnz	r1, 8004d8c <xQueueReceiveFromISR+0x36>
 8004d76:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8004d78:	b143      	cbz	r3, 8004d8c <xQueueReceiveFromISR+0x36>
 8004d7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d7e:	f383 8811 	msr	BASEPRI, r3
 8004d82:	f3bf 8f6f 	isb	sy
 8004d86:	f3bf 8f4f 	dsb	sy
 8004d8a:	e7fe      	b.n	8004d8a <xQueueReceiveFromISR+0x34>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004d8c:	f7ff fb7c 	bl	8004488 <vPortValidateInterruptPriority>
	__asm volatile
 8004d90:	f3ef 8711 	mrs	r7, BASEPRI
 8004d94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d98:	f383 8811 	msr	BASEPRI, r3
 8004d9c:	f3bf 8f6f 	isb	sy
 8004da0:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004da4:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004da6:	b30d      	cbz	r5, 8004dec <xQueueReceiveFromISR+0x96>
			const int8_t cRxLock = pxQueue->cRxLock;
 8004da8:	f894 6044 	ldrb.w	r6, [r4, #68]	@ 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004dac:	4649      	mov	r1, r9
			const int8_t cRxLock = pxQueue->cRxLock;
 8004dae:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004db0:	4620      	mov	r0, r4
 8004db2:	f7ff fbd5 	bl	8004560 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004db6:	3d01      	subs	r5, #1
			if( cRxLock == queueUNLOCKED )
 8004db8:	1c73      	adds	r3, r6, #1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004dba:	63a5      	str	r5, [r4, #56]	@ 0x38
			if( cRxLock == queueUNLOCKED )
 8004dbc:	d111      	bne.n	8004de2 <xQueueReceiveFromISR+0x8c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004dbe:	6923      	ldr	r3, [r4, #16]
 8004dc0:	b153      	cbz	r3, 8004dd8 <xQueueReceiveFromISR+0x82>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004dc2:	f104 0010 	add.w	r0, r4, #16
 8004dc6:	f000 fc63 	bl	8005690 <xTaskRemoveFromEventList>
 8004dca:	b128      	cbz	r0, 8004dd8 <xQueueReceiveFromISR+0x82>
						if( pxHigherPriorityTaskWoken != NULL )
 8004dcc:	f1b8 0f00 	cmp.w	r8, #0
 8004dd0:	d002      	beq.n	8004dd8 <xQueueReceiveFromISR+0x82>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	f8c8 3000 	str.w	r3, [r8]
			xReturn = pdPASS;
 8004dd8:	2001      	movs	r0, #1
	__asm volatile
 8004dda:	f387 8811 	msr	BASEPRI, r7
}
 8004dde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004de2:	3601      	adds	r6, #1
 8004de4:	b276      	sxtb	r6, r6
 8004de6:	f884 6044 	strb.w	r6, [r4, #68]	@ 0x44
 8004dea:	e7f5      	b.n	8004dd8 <xQueueReceiveFromISR+0x82>
			xReturn = pdFAIL;
 8004dec:	4628      	mov	r0, r5
 8004dee:	e7f4      	b.n	8004dda <xQueueReceiveFromISR+0x84>

08004df0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004df0:	b530      	push	{r4, r5, lr}

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004df2:	4a07      	ldr	r2, [pc, #28]	@ (8004e10 <vQueueAddToRegistry+0x20>)
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004df4:	2300      	movs	r3, #0
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004df6:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
 8004dfa:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
 8004dfe:	b91d      	cbnz	r5, 8004e08 <vQueueAddToRegistry+0x18>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004e00:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004e04:	6060      	str	r0, [r4, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004e06:	bd30      	pop	{r4, r5, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004e08:	3301      	adds	r3, #1
 8004e0a:	2b08      	cmp	r3, #8
 8004e0c:	d1f3      	bne.n	8004df6 <vQueueAddToRegistry+0x6>
 8004e0e:	e7fa      	b.n	8004e06 <vQueueAddToRegistry+0x16>
 8004e10:	20008b04 	.word	0x20008b04

08004e14 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8004e14:	b510      	push	{r4, lr}

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8004e16:	4a09      	ldr	r2, [pc, #36]	@ (8004e3c <vQueueUnregisterQueue+0x28>)
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004e18:	2300      	movs	r3, #0
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8004e1a:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8004e1e:	4281      	cmp	r1, r0
 8004e20:	ea4f 04c3 	mov.w	r4, r3, lsl #3
 8004e24:	d106      	bne.n	8004e34 <vQueueUnregisterQueue+0x20>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8004e26:	4a06      	ldr	r2, [pc, #24]	@ (8004e40 <vQueueUnregisterQueue+0x2c>)
 8004e28:	2100      	movs	r1, #0
 8004e2a:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8004e2e:	4422      	add	r2, r4
 8004e30:	6051      	str	r1, [r2, #4]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8004e32:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004e34:	3301      	adds	r3, #1
 8004e36:	2b08      	cmp	r3, #8
 8004e38:	d1ef      	bne.n	8004e1a <vQueueUnregisterQueue+0x6>
 8004e3a:	e7fa      	b.n	8004e32 <vQueueUnregisterQueue+0x1e>
 8004e3c:	20008b08 	.word	0x20008b08
 8004e40:	20008b04 	.word	0x20008b04

08004e44 <vQueueDelete>:
{
 8004e44:	b510      	push	{r4, lr}
	configASSERT( pxQueue );
 8004e46:	b940      	cbnz	r0, 8004e5a <vQueueDelete+0x16>
	__asm volatile
 8004e48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e4c:	f383 8811 	msr	BASEPRI, r3
 8004e50:	f3bf 8f6f 	isb	sy
 8004e54:	f3bf 8f4f 	dsb	sy
 8004e58:	e7fe      	b.n	8004e58 <vQueueDelete+0x14>
		vQueueUnregisterQueue( pxQueue );
 8004e5a:	f7ff ffdb 	bl	8004e14 <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004e5e:	f890 3046 	ldrb.w	r3, [r0, #70]	@ 0x46
 8004e62:	b91b      	cbnz	r3, 8004e6c <vQueueDelete+0x28>
}
 8004e64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			vPortFree( pxQueue );
 8004e68:	f7ff b912 	b.w	8004090 <vPortFree>
}
 8004e6c:	bd10      	pop	{r4, pc}

08004e6e <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004e6e:	b570      	push	{r4, r5, r6, lr}
 8004e70:	4604      	mov	r4, r0
 8004e72:	460d      	mov	r5, r1
 8004e74:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004e76:	f7ff f9f5 	bl	8004264 <vPortEnterCritical>
 8004e7a:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8004e7e:	2bff      	cmp	r3, #255	@ 0xff
 8004e80:	bf04      	itt	eq
 8004e82:	2300      	moveq	r3, #0
 8004e84:	f884 3044 	strbeq.w	r3, [r4, #68]	@ 0x44
 8004e88:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8004e8c:	2bff      	cmp	r3, #255	@ 0xff
 8004e8e:	bf04      	itt	eq
 8004e90:	2300      	moveq	r3, #0
 8004e92:	f884 3045 	strbeq.w	r3, [r4, #69]	@ 0x45
 8004e96:	f7ff fa05 	bl	80042a4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004e9a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8004e9c:	b92b      	cbnz	r3, 8004eaa <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004e9e:	4632      	mov	r2, r6
 8004ea0:	4629      	mov	r1, r5
 8004ea2:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8004ea6:	f000 fbd5 	bl	8005654 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004eaa:	4620      	mov	r0, r4
	}
 8004eac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 8004eb0:	f7ff bb6c 	b.w	800458c <prvUnlockQueue>

08004eb4 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004eb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004eb8:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004eba:	f7ff f9d3 	bl	8004264 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004ebe:	4b30      	ldr	r3, [pc, #192]	@ (8004f80 <prvAddNewTaskToReadyList+0xcc>)
		if( pxCurrentTCB == NULL )
 8004ec0:	4e30      	ldr	r6, [pc, #192]	@ (8004f84 <prvAddNewTaskToReadyList+0xd0>)
		uxCurrentNumberOfTasks++;
 8004ec2:	681a      	ldr	r2, [r3, #0]
 8004ec4:	4f30      	ldr	r7, [pc, #192]	@ (8004f88 <prvAddNewTaskToReadyList+0xd4>)
 8004ec6:	3201      	adds	r2, #1
 8004ec8:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8004eca:	6835      	ldr	r5, [r6, #0]
 8004ecc:	2d00      	cmp	r5, #0
 8004ece:	d14b      	bne.n	8004f68 <prvAddNewTaskToReadyList+0xb4>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004ed0:	6034      	str	r4, [r6, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	2b01      	cmp	r3, #1
 8004ed6:	d11f      	bne.n	8004f18 <prvAddNewTaskToReadyList+0x64>
 8004ed8:	46b8      	mov	r8, r7
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004eda:	4640      	mov	r0, r8
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004edc:	3501      	adds	r5, #1
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004ede:	f7ff f915 	bl	800410c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004ee2:	2d38      	cmp	r5, #56	@ 0x38
 8004ee4:	f108 0814 	add.w	r8, r8, #20
 8004ee8:	d1f7      	bne.n	8004eda <prvAddNewTaskToReadyList+0x26>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004eea:	f8df 80c4 	ldr.w	r8, [pc, #196]	@ 8004fb0 <prvAddNewTaskToReadyList+0xfc>
	vListInitialise( &xDelayedTaskList2 );
 8004eee:	4d27      	ldr	r5, [pc, #156]	@ (8004f8c <prvAddNewTaskToReadyList+0xd8>)
	vListInitialise( &xDelayedTaskList1 );
 8004ef0:	4640      	mov	r0, r8
 8004ef2:	f7ff f90b 	bl	800410c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004ef6:	4628      	mov	r0, r5
 8004ef8:	f7ff f908 	bl	800410c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004efc:	4824      	ldr	r0, [pc, #144]	@ (8004f90 <prvAddNewTaskToReadyList+0xdc>)
 8004efe:	f7ff f905 	bl	800410c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004f02:	4824      	ldr	r0, [pc, #144]	@ (8004f94 <prvAddNewTaskToReadyList+0xe0>)
 8004f04:	f7ff f902 	bl	800410c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004f08:	4823      	ldr	r0, [pc, #140]	@ (8004f98 <prvAddNewTaskToReadyList+0xe4>)
 8004f0a:	f7ff f8ff 	bl	800410c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004f0e:	4b23      	ldr	r3, [pc, #140]	@ (8004f9c <prvAddNewTaskToReadyList+0xe8>)
 8004f10:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004f14:	4b22      	ldr	r3, [pc, #136]	@ (8004fa0 <prvAddNewTaskToReadyList+0xec>)
 8004f16:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 8004f18:	4a22      	ldr	r2, [pc, #136]	@ (8004fa4 <prvAddNewTaskToReadyList+0xf0>)
 8004f1a:	6813      	ldr	r3, [r2, #0]
 8004f1c:	3301      	adds	r3, #1
 8004f1e:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8004f20:	4a21      	ldr	r2, [pc, #132]	@ (8004fa8 <prvAddNewTaskToReadyList+0xf4>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004f22:	6463      	str	r3, [r4, #68]	@ 0x44
		prvAddTaskToReadyList( pxNewTCB );
 8004f24:	6811      	ldr	r1, [r2, #0]
 8004f26:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8004f28:	2014      	movs	r0, #20
 8004f2a:	428b      	cmp	r3, r1
 8004f2c:	fb00 7003 	mla	r0, r0, r3, r7
 8004f30:	f104 0104 	add.w	r1, r4, #4
 8004f34:	bf88      	it	hi
 8004f36:	6013      	strhi	r3, [r2, #0]
 8004f38:	f7ff f8f6 	bl	8004128 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8004f3c:	f7ff f9b2 	bl	80042a4 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8004f40:	4b1a      	ldr	r3, [pc, #104]	@ (8004fac <prvAddNewTaskToReadyList+0xf8>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	b173      	cbz	r3, 8004f64 <prvAddNewTaskToReadyList+0xb0>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004f46:	6833      	ldr	r3, [r6, #0]
 8004f48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f4a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8004f4c:	429a      	cmp	r2, r3
 8004f4e:	d209      	bcs.n	8004f64 <prvAddNewTaskToReadyList+0xb0>
			taskYIELD_IF_USING_PREEMPTION();
 8004f50:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8004f54:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f58:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8004f5c:	f3bf 8f4f 	dsb	sy
 8004f60:	f3bf 8f6f 	isb	sy
}
 8004f64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 8004f68:	4b10      	ldr	r3, [pc, #64]	@ (8004fac <prvAddNewTaskToReadyList+0xf8>)
 8004f6a:	681a      	ldr	r2, [r3, #0]
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004f6c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
			if( xSchedulerRunning == pdFALSE )
 8004f6e:	2a00      	cmp	r2, #0
 8004f70:	d1d2      	bne.n	8004f18 <prvAddNewTaskToReadyList+0x64>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004f72:	6832      	ldr	r2, [r6, #0]
 8004f74:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004f76:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8004f78:	bf98      	it	ls
 8004f7a:	6034      	strls	r4, [r6, #0]
 8004f7c:	e7cc      	b.n	8004f18 <prvAddNewTaskToReadyList+0x64>
 8004f7e:	bf00      	nop
 8004f80:	20008b68 	.word	0x20008b68
 8004f84:	2000903c 	.word	0x2000903c
 8004f88:	20008bdc 	.word	0x20008bdc
 8004f8c:	20008bb4 	.word	0x20008bb4
 8004f90:	20008b98 	.word	0x20008b98
 8004f94:	20008b84 	.word	0x20008b84
 8004f98:	20008b6c 	.word	0x20008b6c
 8004f9c:	20008bb0 	.word	0x20008bb0
 8004fa0:	20008bac 	.word	0x20008bac
 8004fa4:	20008b4c 	.word	0x20008b4c
 8004fa8:	20008b60 	.word	0x20008b60
 8004fac:	20008b5c 	.word	0x20008b5c
 8004fb0:	20008bc8 	.word	0x20008bc8

08004fb4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004fb6:	4b15      	ldr	r3, [pc, #84]	@ (800500c <prvAddCurrentTaskToDelayedList+0x58>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004fb8:	4d15      	ldr	r5, [pc, #84]	@ (8005010 <prvAddCurrentTaskToDelayedList+0x5c>)
const TickType_t xConstTickCount = xTickCount;
 8004fba:	681c      	ldr	r4, [r3, #0]
{
 8004fbc:	4606      	mov	r6, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004fbe:	6828      	ldr	r0, [r5, #0]
 8004fc0:	3004      	adds	r0, #4
{
 8004fc2:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004fc4:	f7ff f8d2 	bl	800416c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004fc8:	1c73      	adds	r3, r6, #1
 8004fca:	d107      	bne.n	8004fdc <prvAddCurrentTaskToDelayedList+0x28>
 8004fcc:	b137      	cbz	r7, 8004fdc <prvAddCurrentTaskToDelayedList+0x28>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004fce:	6829      	ldr	r1, [r5, #0]
 8004fd0:	4810      	ldr	r0, [pc, #64]	@ (8005014 <prvAddCurrentTaskToDelayedList+0x60>)

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004fd2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004fd6:	3104      	adds	r1, #4
 8004fd8:	f7ff b8a6 	b.w	8004128 <vListInsertEnd>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004fdc:	682b      	ldr	r3, [r5, #0]
 8004fde:	19a4      	adds	r4, r4, r6
 8004fe0:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004fe2:	d307      	bcc.n	8004ff4 <prvAddCurrentTaskToDelayedList+0x40>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004fe4:	4b0c      	ldr	r3, [pc, #48]	@ (8005018 <prvAddCurrentTaskToDelayedList+0x64>)
 8004fe6:	6818      	ldr	r0, [r3, #0]
 8004fe8:	6829      	ldr	r1, [r5, #0]
}
 8004fea:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004fee:	3104      	adds	r1, #4
 8004ff0:	f7ff b8a5 	b.w	800413e <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004ff4:	4b09      	ldr	r3, [pc, #36]	@ (800501c <prvAddCurrentTaskToDelayedList+0x68>)
 8004ff6:	6818      	ldr	r0, [r3, #0]
 8004ff8:	6829      	ldr	r1, [r5, #0]
 8004ffa:	3104      	adds	r1, #4
 8004ffc:	f7ff f89f 	bl	800413e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005000:	4b07      	ldr	r3, [pc, #28]	@ (8005020 <prvAddCurrentTaskToDelayedList+0x6c>)
 8005002:	681a      	ldr	r2, [r3, #0]
 8005004:	42a2      	cmp	r2, r4
					xNextTaskUnblockTime = xTimeToWake;
 8005006:	bf88      	it	hi
 8005008:	601c      	strhi	r4, [r3, #0]
}
 800500a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800500c:	20008b64 	.word	0x20008b64
 8005010:	2000903c 	.word	0x2000903c
 8005014:	20008b6c 	.word	0x20008b6c
 8005018:	20008bac 	.word	0x20008bac
 800501c:	20008bb0 	.word	0x20008bb0
 8005020:	20008b48 	.word	0x20008b48

08005024 <prvResetNextTaskUnblockTime>:
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005024:	4a06      	ldr	r2, [pc, #24]	@ (8005040 <prvResetNextTaskUnblockTime+0x1c>)
 8005026:	6813      	ldr	r3, [r2, #0]
 8005028:	6819      	ldr	r1, [r3, #0]
 800502a:	4b06      	ldr	r3, [pc, #24]	@ (8005044 <prvResetNextTaskUnblockTime+0x20>)
 800502c:	b919      	cbnz	r1, 8005036 <prvResetNextTaskUnblockTime+0x12>
		xNextTaskUnblockTime = portMAX_DELAY;
 800502e:	f04f 32ff 	mov.w	r2, #4294967295
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005032:	601a      	str	r2, [r3, #0]
}
 8005034:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005036:	6812      	ldr	r2, [r2, #0]
 8005038:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800503a:	68d2      	ldr	r2, [r2, #12]
 800503c:	6852      	ldr	r2, [r2, #4]
 800503e:	e7f8      	b.n	8005032 <prvResetNextTaskUnblockTime+0xe>
 8005040:	20008bb0 	.word	0x20008bb0
 8005044:	20008b48 	.word	0x20008b48

08005048 <prvDeleteTCB>:
	{
 8005048:	b510      	push	{r4, lr}
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800504a:	f890 305d 	ldrb.w	r3, [r0, #93]	@ 0x5d
	{
 800504e:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005050:	b93b      	cbnz	r3, 8005062 <prvDeleteTCB+0x1a>
				vPortFree( pxTCB->pxStack );
 8005052:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8005054:	f7ff f81c 	bl	8004090 <vPortFree>
				vPortFree( pxTCB );
 8005058:	4620      	mov	r0, r4
	}
 800505a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 800505e:	f7ff b817 	b.w	8004090 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005062:	2b01      	cmp	r3, #1
 8005064:	d0f9      	beq.n	800505a <prvDeleteTCB+0x12>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005066:	2b02      	cmp	r3, #2
 8005068:	d008      	beq.n	800507c <prvDeleteTCB+0x34>
 800506a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800506e:	f383 8811 	msr	BASEPRI, r3
 8005072:	f3bf 8f6f 	isb	sy
 8005076:	f3bf 8f4f 	dsb	sy
 800507a:	e7fe      	b.n	800507a <prvDeleteTCB+0x32>
	}
 800507c:	bd10      	pop	{r4, pc}
	...

08005080 <prvIdleTask>:
{
 8005080:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005082:	4c14      	ldr	r4, [pc, #80]	@ (80050d4 <prvIdleTask+0x54>)
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005084:	4f14      	ldr	r7, [pc, #80]	@ (80050d8 <prvIdleTask+0x58>)
				--uxCurrentNumberOfTasks;
 8005086:	4d15      	ldr	r5, [pc, #84]	@ (80050dc <prvIdleTask+0x5c>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005088:	6823      	ldr	r3, [r4, #0]
 800508a:	b983      	cbnz	r3, 80050ae <prvIdleTask+0x2e>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800508c:	4b14      	ldr	r3, [pc, #80]	@ (80050e0 <prvIdleTask+0x60>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	2b01      	cmp	r3, #1
 8005092:	d909      	bls.n	80050a8 <prvIdleTask+0x28>
				taskYIELD();
 8005094:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8005098:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800509c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80050a0:	f3bf 8f4f 	dsb	sy
 80050a4:	f3bf 8f6f 	isb	sy
			vApplicationIdleHook();
 80050a8:	f7fb ff4e 	bl	8000f48 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 80050ac:	e7eb      	b.n	8005086 <prvIdleTask+0x6>
			taskENTER_CRITICAL();
 80050ae:	f7ff f8d9 	bl	8004264 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80050b6:	1d30      	adds	r0, r6, #4
 80050b8:	f7ff f858 	bl	800416c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80050bc:	682b      	ldr	r3, [r5, #0]
 80050be:	3b01      	subs	r3, #1
 80050c0:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 80050c2:	6823      	ldr	r3, [r4, #0]
 80050c4:	3b01      	subs	r3, #1
 80050c6:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 80050c8:	f7ff f8ec 	bl	80042a4 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 80050cc:	4630      	mov	r0, r6
 80050ce:	f7ff ffbb 	bl	8005048 <prvDeleteTCB>
 80050d2:	e7d9      	b.n	8005088 <prvIdleTask+0x8>
 80050d4:	20008b80 	.word	0x20008b80
 80050d8:	20008b84 	.word	0x20008b84
 80050dc:	20008b68 	.word	0x20008b68
 80050e0:	20008bdc 	.word	0x20008bdc

080050e4 <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80050e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050e8:	e9dd 9409 	ldrd	r9, r4, [sp, #36]	@ 0x24
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80050ec:	0096      	lsls	r6, r2, #2
 80050ee:	4632      	mov	r2, r6
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80050f0:	4607      	mov	r7, r0
 80050f2:	460d      	mov	r5, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80050f4:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80050f6:	21a5      	movs	r1, #165	@ 0xa5
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80050f8:	4698      	mov	r8, r3
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80050fa:	f006 fa2c 	bl	800b556 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80050fe:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8005100:	3e04      	subs	r6, #4
 8005102:	441e      	add	r6, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005104:	f026 0607 	bic.w	r6, r6, #7
	if( pcName != NULL )
 8005108:	b3b5      	cbz	r5, 8005178 <prvInitialiseNewTask.constprop.0+0x94>
 800510a:	1e6b      	subs	r3, r5, #1
 800510c:	f104 0233 	add.w	r2, r4, #51	@ 0x33
 8005110:	350f      	adds	r5, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005112:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8005116:	f802 1f01 	strb.w	r1, [r2, #1]!
			if( pcName[ x ] == ( char ) 0x00 )
 800511a:	b109      	cbz	r1, 8005120 <prvInitialiseNewTask.constprop.0+0x3c>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800511c:	42ab      	cmp	r3, r5
 800511e:	d1f8      	bne.n	8005112 <prvInitialiseNewTask.constprop.0+0x2e>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005120:	2300      	movs	r3, #0
 8005122:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005126:	9d08      	ldr	r5, [sp, #32]
 8005128:	2d37      	cmp	r5, #55	@ 0x37
 800512a:	bf28      	it	cs
 800512c:	2537      	movcs	r5, #55	@ 0x37
		pxNewTCB->uxMutexesHeld = 0;
 800512e:	f04f 0a00 	mov.w	sl, #0
	pxNewTCB->uxPriority = uxPriority;
 8005132:	62e5      	str	r5, [r4, #44]	@ 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8005134:	64e5      	str	r5, [r4, #76]	@ 0x4c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005136:	1d20      	adds	r0, r4, #4
		pxNewTCB->uxMutexesHeld = 0;
 8005138:	f8c4 a050 	str.w	sl, [r4, #80]	@ 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800513c:	f7fe fff1 	bl	8004122 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005140:	f1c5 0538 	rsb	r5, r5, #56	@ 0x38
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005144:	f104 0018 	add.w	r0, r4, #24
 8005148:	f7fe ffeb 	bl	8004122 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 800514c:	f8c4 a058 	str.w	sl, [r4, #88]	@ 0x58
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005150:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005152:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005154:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->pxTaskTag = NULL;
 8005156:	f8c4 a054 	str.w	sl, [r4, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800515a:	f884 a05c 	strb.w	sl, [r4, #92]	@ 0x5c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800515e:	4642      	mov	r2, r8
 8005160:	4639      	mov	r1, r7
 8005162:	4630      	mov	r0, r6
 8005164:	f7ff f850 	bl	8004208 <pxPortInitialiseStack>
 8005168:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 800516a:	f1b9 0f00 	cmp.w	r9, #0
 800516e:	d001      	beq.n	8005174 <prvInitialiseNewTask.constprop.0+0x90>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005170:	f8c9 4000 	str.w	r4, [r9]
}
 8005174:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005178:	f884 5034 	strb.w	r5, [r4, #52]	@ 0x34
 800517c:	e7d3      	b.n	8005126 <prvInitialiseNewTask.constprop.0+0x42>

0800517e <xTaskCreateStatic>:
	{
 800517e:	b570      	push	{r4, r5, r6, lr}
 8005180:	b086      	sub	sp, #24
 8005182:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	@ 0x2c
		configASSERT( puxStackBuffer != NULL );
 8005186:	b945      	cbnz	r5, 800519a <xTaskCreateStatic+0x1c>
 8005188:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800518c:	f383 8811 	msr	BASEPRI, r3
 8005190:	f3bf 8f6f 	isb	sy
 8005194:	f3bf 8f4f 	dsb	sy
 8005198:	e7fe      	b.n	8005198 <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 800519a:	b944      	cbnz	r4, 80051ae <xTaskCreateStatic+0x30>
 800519c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051a0:	f383 8811 	msr	BASEPRI, r3
 80051a4:	f3bf 8f6f 	isb	sy
 80051a8:	f3bf 8f4f 	dsb	sy
 80051ac:	e7fe      	b.n	80051ac <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 80051ae:	2660      	movs	r6, #96	@ 0x60
 80051b0:	9605      	str	r6, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 80051b2:	9e05      	ldr	r6, [sp, #20]
 80051b4:	2e60      	cmp	r6, #96	@ 0x60
 80051b6:	d008      	beq.n	80051ca <xTaskCreateStatic+0x4c>
 80051b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051bc:	f383 8811 	msr	BASEPRI, r3
 80051c0:	f3bf 8f6f 	isb	sy
 80051c4:	f3bf 8f4f 	dsb	sy
 80051c8:	e7fe      	b.n	80051c8 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80051ca:	6325      	str	r5, [r4, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80051cc:	2502      	movs	r5, #2
 80051ce:	f884 505d 	strb.w	r5, [r4, #93]	@ 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80051d2:	ad04      	add	r5, sp, #16
 80051d4:	9501      	str	r5, [sp, #4]
 80051d6:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 80051d8:	9402      	str	r4, [sp, #8]
 80051da:	9500      	str	r5, [sp, #0]
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80051dc:	9e05      	ldr	r6, [sp, #20]
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80051de:	f7ff ff81 	bl	80050e4 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 80051e2:	4620      	mov	r0, r4
 80051e4:	f7ff fe66 	bl	8004eb4 <prvAddNewTaskToReadyList>
	}
 80051e8:	9804      	ldr	r0, [sp, #16]
 80051ea:	b006      	add	sp, #24
 80051ec:	bd70      	pop	{r4, r5, r6, pc}

080051ee <xTaskCreate>:
	{
 80051ee:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80051f2:	4607      	mov	r7, r0
 80051f4:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80051f6:	0090      	lsls	r0, r2, #2
	{
 80051f8:	4688      	mov	r8, r1
 80051fa:	4616      	mov	r6, r2
 80051fc:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80051fe:	f7fe feaf 	bl	8003f60 <pvPortMalloc>
			if( pxStack != NULL )
 8005202:	4605      	mov	r5, r0
 8005204:	b920      	cbnz	r0, 8005210 <xTaskCreate+0x22>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005206:	f04f 30ff 	mov.w	r0, #4294967295
	}
 800520a:	b005      	add	sp, #20
 800520c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005210:	2060      	movs	r0, #96	@ 0x60
 8005212:	f7fe fea5 	bl	8003f60 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8005216:	4604      	mov	r4, r0
 8005218:	b198      	cbz	r0, 8005242 <xTaskCreate+0x54>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800521a:	2300      	movs	r3, #0
 800521c:	f880 305d 	strb.w	r3, [r0, #93]	@ 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005220:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
					pxNewTCB->pxStack = pxStack;
 8005222:	6305      	str	r5, [r0, #48]	@ 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005224:	9301      	str	r3, [sp, #4]
 8005226:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005228:	9002      	str	r0, [sp, #8]
 800522a:	9300      	str	r3, [sp, #0]
 800522c:	4632      	mov	r2, r6
 800522e:	464b      	mov	r3, r9
 8005230:	4641      	mov	r1, r8
 8005232:	4638      	mov	r0, r7
 8005234:	f7ff ff56 	bl	80050e4 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005238:	4620      	mov	r0, r4
 800523a:	f7ff fe3b 	bl	8004eb4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800523e:	2001      	movs	r0, #1
 8005240:	e7e3      	b.n	800520a <xTaskCreate+0x1c>
					vPortFree( pxStack );
 8005242:	4628      	mov	r0, r5
 8005244:	f7fe ff24 	bl	8004090 <vPortFree>
		if( pxNewTCB != NULL )
 8005248:	e7dd      	b.n	8005206 <xTaskCreate+0x18>
	...

0800524c <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800524c:	4a02      	ldr	r2, [pc, #8]	@ (8005258 <vTaskSuspendAll+0xc>)
 800524e:	6813      	ldr	r3, [r2, #0]
 8005250:	3301      	adds	r3, #1
 8005252:	6013      	str	r3, [r2, #0]
}
 8005254:	4770      	bx	lr
 8005256:	bf00      	nop
 8005258:	20008b44 	.word	0x20008b44

0800525c <xTaskGetTickCount>:
		xTicks = xTickCount;
 800525c:	4b01      	ldr	r3, [pc, #4]	@ (8005264 <xTaskGetTickCount+0x8>)
 800525e:	6818      	ldr	r0, [r3, #0]
}
 8005260:	4770      	bx	lr
 8005262:	bf00      	nop
 8005264:	20008b64 	.word	0x20008b64

08005268 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005268:	4b3f      	ldr	r3, [pc, #252]	@ (8005368 <xTaskIncrementTick+0x100>)
 800526a:	681b      	ldr	r3, [r3, #0]
{
 800526c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005270:	2b00      	cmp	r3, #0
 8005272:	d172      	bne.n	800535a <xTaskIncrementTick+0xf2>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005274:	4b3d      	ldr	r3, [pc, #244]	@ (800536c <xTaskIncrementTick+0x104>)
 8005276:	681c      	ldr	r4, [r3, #0]
 8005278:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 800527a:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800527c:	b9bc      	cbnz	r4, 80052ae <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 800527e:	4b3c      	ldr	r3, [pc, #240]	@ (8005370 <xTaskIncrementTick+0x108>)
 8005280:	681a      	ldr	r2, [r3, #0]
 8005282:	6812      	ldr	r2, [r2, #0]
 8005284:	b142      	cbz	r2, 8005298 <xTaskIncrementTick+0x30>
 8005286:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800528a:	f383 8811 	msr	BASEPRI, r3
 800528e:	f3bf 8f6f 	isb	sy
 8005292:	f3bf 8f4f 	dsb	sy
 8005296:	e7fe      	b.n	8005296 <xTaskIncrementTick+0x2e>
 8005298:	4a36      	ldr	r2, [pc, #216]	@ (8005374 <xTaskIncrementTick+0x10c>)
 800529a:	6819      	ldr	r1, [r3, #0]
 800529c:	6810      	ldr	r0, [r2, #0]
 800529e:	6018      	str	r0, [r3, #0]
 80052a0:	6011      	str	r1, [r2, #0]
 80052a2:	4a35      	ldr	r2, [pc, #212]	@ (8005378 <xTaskIncrementTick+0x110>)
 80052a4:	6813      	ldr	r3, [r2, #0]
 80052a6:	3301      	adds	r3, #1
 80052a8:	6013      	str	r3, [r2, #0]
 80052aa:	f7ff febb 	bl	8005024 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 80052ae:	4d33      	ldr	r5, [pc, #204]	@ (800537c <xTaskIncrementTick+0x114>)
 80052b0:	4e33      	ldr	r6, [pc, #204]	@ (8005380 <xTaskIncrementTick+0x118>)
 80052b2:	682b      	ldr	r3, [r5, #0]
 80052b4:	4f33      	ldr	r7, [pc, #204]	@ (8005384 <xTaskIncrementTick+0x11c>)
 80052b6:	429c      	cmp	r4, r3
BaseType_t xSwitchRequired = pdFALSE;
 80052b8:	f04f 0b00 	mov.w	fp, #0
		if( xConstTickCount >= xNextTaskUnblockTime )
 80052bc:	d212      	bcs.n	80052e4 <xTaskIncrementTick+0x7c>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80052be:	683a      	ldr	r2, [r7, #0]
 80052c0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80052c2:	2114      	movs	r1, #20
 80052c4:	434a      	muls	r2, r1
 80052c6:	58b2      	ldr	r2, [r6, r2]
				xSwitchRequired = pdTRUE;
 80052c8:	2a02      	cmp	r2, #2
			if( xYieldPending != pdFALSE )
 80052ca:	4a2f      	ldr	r2, [pc, #188]	@ (8005388 <xTaskIncrementTick+0x120>)
 80052cc:	6812      	ldr	r2, [r2, #0]
				xSwitchRequired = pdTRUE;
 80052ce:	bf28      	it	cs
 80052d0:	f04f 0b01 	movcs.w	fp, #1
				xSwitchRequired = pdTRUE;
 80052d4:	2a00      	cmp	r2, #0
 80052d6:	bf18      	it	ne
 80052d8:	f04f 0b01 	movne.w	fp, #1
}
 80052dc:	4658      	mov	r0, fp
 80052de:	b003      	add	sp, #12
 80052e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80052e4:	f8df 9088 	ldr.w	r9, [pc, #136]	@ 8005370 <xTaskIncrementTick+0x108>
					prvAddTaskToReadyList( pxTCB );
 80052e8:	f8df a0a4 	ldr.w	sl, [pc, #164]	@ 8005390 <xTaskIncrementTick+0x128>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80052ec:	f8d9 2000 	ldr.w	r2, [r9]
 80052f0:	6812      	ldr	r2, [r2, #0]
 80052f2:	b91a      	cbnz	r2, 80052fc <xTaskIncrementTick+0x94>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80052f4:	f04f 32ff 	mov.w	r2, #4294967295
 80052f8:	602a      	str	r2, [r5, #0]
					break;
 80052fa:	e7e0      	b.n	80052be <xTaskIncrementTick+0x56>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80052fc:	f8d9 2000 	ldr.w	r2, [r9]
 8005300:	68d2      	ldr	r2, [r2, #12]
 8005302:	f8d2 800c 	ldr.w	r8, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005306:	f8d8 1004 	ldr.w	r1, [r8, #4]
					if( xConstTickCount < xItemValue )
 800530a:	428c      	cmp	r4, r1
 800530c:	d201      	bcs.n	8005312 <xTaskIncrementTick+0xaa>
						xNextTaskUnblockTime = xItemValue;
 800530e:	6029      	str	r1, [r5, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005310:	e7d5      	b.n	80052be <xTaskIncrementTick+0x56>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005312:	f108 0304 	add.w	r3, r8, #4
 8005316:	4618      	mov	r0, r3
 8005318:	9301      	str	r3, [sp, #4]
 800531a:	f7fe ff27 	bl	800416c <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800531e:	f8d8 1028 	ldr.w	r1, [r8, #40]	@ 0x28
 8005322:	b119      	cbz	r1, 800532c <xTaskIncrementTick+0xc4>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005324:	f108 0018 	add.w	r0, r8, #24
 8005328:	f7fe ff20 	bl	800416c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800532c:	f8d8 002c 	ldr.w	r0, [r8, #44]	@ 0x2c
 8005330:	f8da 1000 	ldr.w	r1, [sl]
 8005334:	2314      	movs	r3, #20
 8005336:	4288      	cmp	r0, r1
 8005338:	bf88      	it	hi
 800533a:	f8ca 0000 	strhi.w	r0, [sl]
 800533e:	9901      	ldr	r1, [sp, #4]
 8005340:	fb03 6000 	mla	r0, r3, r0, r6
 8005344:	f7fe fef0 	bl	8004128 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005348:	6838      	ldr	r0, [r7, #0]
 800534a:	f8d8 102c 	ldr.w	r1, [r8, #44]	@ 0x2c
 800534e:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
							xSwitchRequired = pdTRUE;
 8005350:	4291      	cmp	r1, r2
 8005352:	bf28      	it	cs
 8005354:	f04f 0b01 	movcs.w	fp, #1
 8005358:	e7c8      	b.n	80052ec <xTaskIncrementTick+0x84>
		++xPendedTicks;
 800535a:	4a0c      	ldr	r2, [pc, #48]	@ (800538c <xTaskIncrementTick+0x124>)
 800535c:	6813      	ldr	r3, [r2, #0]
 800535e:	3301      	adds	r3, #1
 8005360:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8005362:	f04f 0b00 	mov.w	fp, #0
 8005366:	e7b9      	b.n	80052dc <xTaskIncrementTick+0x74>
 8005368:	20008b44 	.word	0x20008b44
 800536c:	20008b64 	.word	0x20008b64
 8005370:	20008bb0 	.word	0x20008bb0
 8005374:	20008bac 	.word	0x20008bac
 8005378:	20008b50 	.word	0x20008b50
 800537c:	20008b48 	.word	0x20008b48
 8005380:	20008bdc 	.word	0x20008bdc
 8005384:	2000903c 	.word	0x2000903c
 8005388:	20008b54 	.word	0x20008b54
 800538c:	20008b58 	.word	0x20008b58
 8005390:	20008b60 	.word	0x20008b60

08005394 <xTaskResumeAll>:
{
 8005394:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	configASSERT( uxSchedulerSuspended );
 8005398:	4c30      	ldr	r4, [pc, #192]	@ (800545c <xTaskResumeAll+0xc8>)
 800539a:	6823      	ldr	r3, [r4, #0]
 800539c:	b943      	cbnz	r3, 80053b0 <xTaskResumeAll+0x1c>
 800539e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053a2:	f383 8811 	msr	BASEPRI, r3
 80053a6:	f3bf 8f6f 	isb	sy
 80053aa:	f3bf 8f4f 	dsb	sy
 80053ae:	e7fe      	b.n	80053ae <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 80053b0:	f7fe ff58 	bl	8004264 <vPortEnterCritical>
		--uxSchedulerSuspended;
 80053b4:	6823      	ldr	r3, [r4, #0]
 80053b6:	3b01      	subs	r3, #1
 80053b8:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80053ba:	6824      	ldr	r4, [r4, #0]
 80053bc:	b12c      	cbz	r4, 80053ca <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 80053be:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80053c0:	f7fe ff70 	bl	80042a4 <vPortExitCritical>
}
 80053c4:	4620      	mov	r0, r4
 80053c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80053ca:	4b25      	ldr	r3, [pc, #148]	@ (8005460 <xTaskResumeAll+0xcc>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d0f5      	beq.n	80053be <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80053d2:	4d24      	ldr	r5, [pc, #144]	@ (8005464 <xTaskResumeAll+0xd0>)
					prvAddTaskToReadyList( pxTCB );
 80053d4:	4e24      	ldr	r6, [pc, #144]	@ (8005468 <xTaskResumeAll+0xd4>)
 80053d6:	f8df 80a0 	ldr.w	r8, [pc, #160]	@ 8005478 <xTaskResumeAll+0xe4>
 80053da:	e01d      	b.n	8005418 <xTaskResumeAll+0x84>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80053dc:	68eb      	ldr	r3, [r5, #12]
 80053de:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80053e0:	1d27      	adds	r7, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80053e2:	f104 0018 	add.w	r0, r4, #24
 80053e6:	f7fe fec1 	bl	800416c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80053ea:	4638      	mov	r0, r7
 80053ec:	f7fe febe 	bl	800416c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80053f0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80053f2:	6832      	ldr	r2, [r6, #0]
 80053f4:	2014      	movs	r0, #20
 80053f6:	4293      	cmp	r3, r2
 80053f8:	fb00 8003 	mla	r0, r0, r3, r8
 80053fc:	4639      	mov	r1, r7
 80053fe:	bf88      	it	hi
 8005400:	6033      	strhi	r3, [r6, #0]
 8005402:	f7fe fe91 	bl	8004128 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005406:	4b19      	ldr	r3, [pc, #100]	@ (800546c <xTaskResumeAll+0xd8>)
 8005408:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800540e:	429a      	cmp	r2, r3
 8005410:	d302      	bcc.n	8005418 <xTaskResumeAll+0x84>
						xYieldPending = pdTRUE;
 8005412:	4b17      	ldr	r3, [pc, #92]	@ (8005470 <xTaskResumeAll+0xdc>)
 8005414:	2201      	movs	r2, #1
 8005416:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005418:	682b      	ldr	r3, [r5, #0]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d1de      	bne.n	80053dc <xTaskResumeAll+0x48>
				if( pxTCB != NULL )
 800541e:	b10c      	cbz	r4, 8005424 <xTaskResumeAll+0x90>
					prvResetNextTaskUnblockTime();
 8005420:	f7ff fe00 	bl	8005024 <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005424:	4d13      	ldr	r5, [pc, #76]	@ (8005474 <xTaskResumeAll+0xe0>)
 8005426:	682c      	ldr	r4, [r5, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 8005428:	b144      	cbz	r4, 800543c <xTaskResumeAll+0xa8>
								xYieldPending = pdTRUE;
 800542a:	4e11      	ldr	r6, [pc, #68]	@ (8005470 <xTaskResumeAll+0xdc>)
 800542c:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 800542e:	f7ff ff1b 	bl	8005268 <xTaskIncrementTick>
 8005432:	b100      	cbz	r0, 8005436 <xTaskResumeAll+0xa2>
								xYieldPending = pdTRUE;
 8005434:	6037      	str	r7, [r6, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005436:	3c01      	subs	r4, #1
 8005438:	d1f9      	bne.n	800542e <xTaskResumeAll+0x9a>
						xPendedTicks = 0;
 800543a:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 800543c:	4b0c      	ldr	r3, [pc, #48]	@ (8005470 <xTaskResumeAll+0xdc>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d0bc      	beq.n	80053be <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 8005444:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8005448:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800544c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8005450:	f3bf 8f4f 	dsb	sy
 8005454:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8005458:	2401      	movs	r4, #1
 800545a:	e7b1      	b.n	80053c0 <xTaskResumeAll+0x2c>
 800545c:	20008b44 	.word	0x20008b44
 8005460:	20008b68 	.word	0x20008b68
 8005464:	20008b98 	.word	0x20008b98
 8005468:	20008b60 	.word	0x20008b60
 800546c:	2000903c 	.word	0x2000903c
 8005470:	20008b54 	.word	0x20008b54
 8005474:	20008b58 	.word	0x20008b58
 8005478:	20008bdc 	.word	0x20008bdc

0800547c <vTaskDelay>:
	{
 800547c:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800547e:	b950      	cbnz	r0, 8005496 <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 8005480:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8005484:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005488:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800548c:	f3bf 8f4f 	dsb	sy
 8005490:	f3bf 8f6f 	isb	sy
	}
 8005494:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8005496:	4b0a      	ldr	r3, [pc, #40]	@ (80054c0 <vTaskDelay+0x44>)
 8005498:	6819      	ldr	r1, [r3, #0]
 800549a:	b141      	cbz	r1, 80054ae <vTaskDelay+0x32>
 800549c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054a0:	f383 8811 	msr	BASEPRI, r3
 80054a4:	f3bf 8f6f 	isb	sy
 80054a8:	f3bf 8f4f 	dsb	sy
 80054ac:	e7fe      	b.n	80054ac <vTaskDelay+0x30>
			vTaskSuspendAll();
 80054ae:	f7ff fecd 	bl	800524c <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80054b2:	f7ff fd7f 	bl	8004fb4 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 80054b6:	f7ff ff6d 	bl	8005394 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 80054ba:	2800      	cmp	r0, #0
 80054bc:	d0e0      	beq.n	8005480 <vTaskDelay+0x4>
 80054be:	e7e9      	b.n	8005494 <vTaskDelay+0x18>
 80054c0:	20008b44 	.word	0x20008b44

080054c4 <vTaskSetApplicationTaskTag>:
	{
 80054c4:	b538      	push	{r3, r4, r5, lr}
 80054c6:	460d      	mov	r5, r1
		if( xTask == NULL )
 80054c8:	4604      	mov	r4, r0
 80054ca:	b908      	cbnz	r0, 80054d0 <vTaskSetApplicationTaskTag+0xc>
			xTCB = ( TCB_t * ) pxCurrentTCB;
 80054cc:	4b04      	ldr	r3, [pc, #16]	@ (80054e0 <vTaskSetApplicationTaskTag+0x1c>)
 80054ce:	681c      	ldr	r4, [r3, #0]
		taskENTER_CRITICAL();
 80054d0:	f7fe fec8 	bl	8004264 <vPortEnterCritical>
			xTCB->pxTaskTag = pxHookFunction;
 80054d4:	6565      	str	r5, [r4, #84]	@ 0x54
	}
 80054d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		taskEXIT_CRITICAL();
 80054da:	f7fe bee3 	b.w	80042a4 <vPortExitCritical>
 80054de:	bf00      	nop
 80054e0:	2000903c 	.word	0x2000903c

080054e4 <xTaskCallApplicationTaskHook>:
	{
 80054e4:	4603      	mov	r3, r0
 80054e6:	4608      	mov	r0, r1
		if( xTask == NULL )
 80054e8:	b90b      	cbnz	r3, 80054ee <xTaskCallApplicationTaskHook+0xa>
			xTCB = pxCurrentTCB;
 80054ea:	4b03      	ldr	r3, [pc, #12]	@ (80054f8 <xTaskCallApplicationTaskHook+0x14>)
 80054ec:	681b      	ldr	r3, [r3, #0]
		if( xTCB->pxTaskTag != NULL )
 80054ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054f0:	b103      	cbz	r3, 80054f4 <xTaskCallApplicationTaskHook+0x10>
			xReturn = xTCB->pxTaskTag( pvParameter );
 80054f2:	4718      	bx	r3
	}
 80054f4:	4618      	mov	r0, r3
 80054f6:	4770      	bx	lr
 80054f8:	2000903c 	.word	0x2000903c

080054fc <vTaskStartScheduler>:
{
 80054fc:	b510      	push	{r4, lr}
 80054fe:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005500:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005502:	aa07      	add	r2, sp, #28
 8005504:	a906      	add	r1, sp, #24
 8005506:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005508:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800550c:	f7fe fcea 	bl	8003ee4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005510:	9b05      	ldr	r3, [sp, #20]
 8005512:	9302      	str	r3, [sp, #8]
 8005514:	9b06      	ldr	r3, [sp, #24]
 8005516:	9a07      	ldr	r2, [sp, #28]
 8005518:	4919      	ldr	r1, [pc, #100]	@ (8005580 <vTaskStartScheduler+0x84>)
 800551a:	481a      	ldr	r0, [pc, #104]	@ (8005584 <vTaskStartScheduler+0x88>)
 800551c:	e9cd 4300 	strd	r4, r3, [sp]
 8005520:	4623      	mov	r3, r4
 8005522:	f7ff fe2c 	bl	800517e <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 8005526:	b340      	cbz	r0, 800557a <vTaskStartScheduler+0x7e>
			xReturn = xTimerCreateTimerTask();
 8005528:	f000 fa7c 	bl	8005a24 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 800552c:	2801      	cmp	r0, #1
 800552e:	d119      	bne.n	8005564 <vTaskStartScheduler+0x68>
 8005530:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005534:	f383 8811 	msr	BASEPRI, r3
 8005538:	f3bf 8f6f 	isb	sy
 800553c:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8005540:	4b11      	ldr	r3, [pc, #68]	@ (8005588 <vTaskStartScheduler+0x8c>)
 8005542:	f04f 32ff 	mov.w	r2, #4294967295
 8005546:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005548:	4b10      	ldr	r3, [pc, #64]	@ (800558c <vTaskStartScheduler+0x90>)
 800554a:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800554c:	4b10      	ldr	r3, [pc, #64]	@ (8005590 <vTaskStartScheduler+0x94>)
 800554e:	601c      	str	r4, [r3, #0]
		traceTASK_SWITCHED_IN();
 8005550:	4b10      	ldr	r3, [pc, #64]	@ (8005594 <vTaskStartScheduler+0x98>)
 8005552:	4621      	mov	r1, r4
 8005554:	6818      	ldr	r0, [r3, #0]
 8005556:	f7ff ffc5 	bl	80054e4 <xTaskCallApplicationTaskHook>
}
 800555a:	b008      	add	sp, #32
 800555c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 8005560:	f7fe bf10 	b.w	8004384 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005564:	3001      	adds	r0, #1
 8005566:	d108      	bne.n	800557a <vTaskStartScheduler+0x7e>
 8005568:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800556c:	f383 8811 	msr	BASEPRI, r3
 8005570:	f3bf 8f6f 	isb	sy
 8005574:	f3bf 8f4f 	dsb	sy
 8005578:	e7fe      	b.n	8005578 <vTaskStartScheduler+0x7c>
}
 800557a:	b008      	add	sp, #32
 800557c:	bd10      	pop	{r4, pc}
 800557e:	bf00      	nop
 8005580:	0800c7d7 	.word	0x0800c7d7
 8005584:	08005081 	.word	0x08005081
 8005588:	20008b48 	.word	0x20008b48
 800558c:	20008b5c 	.word	0x20008b5c
 8005590:	20008b64 	.word	0x20008b64
 8005594:	2000903c 	.word	0x2000903c

08005598 <vTaskSwitchContext>:
{
 8005598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800559a:	4b1c      	ldr	r3, [pc, #112]	@ (800560c <vTaskSwitchContext+0x74>)
 800559c:	681a      	ldr	r2, [r3, #0]
 800559e:	4b1c      	ldr	r3, [pc, #112]	@ (8005610 <vTaskSwitchContext+0x78>)
 80055a0:	b112      	cbz	r2, 80055a8 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 80055a2:	2201      	movs	r2, #1
 80055a4:	601a      	str	r2, [r3, #0]
}
 80055a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		traceTASK_SWITCHED_OUT();
 80055a8:	4c1a      	ldr	r4, [pc, #104]	@ (8005614 <vTaskSwitchContext+0x7c>)
		xYieldPending = pdFALSE;
 80055aa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80055ac:	4e1a      	ldr	r6, [pc, #104]	@ (8005618 <vTaskSwitchContext+0x80>)
		traceTASK_SWITCHED_OUT();
 80055ae:	6820      	ldr	r0, [r4, #0]
 80055b0:	2101      	movs	r1, #1
 80055b2:	f7ff ff97 	bl	80054e4 <xTaskCallApplicationTaskHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80055b6:	6832      	ldr	r2, [r6, #0]
 80055b8:	4918      	ldr	r1, [pc, #96]	@ (800561c <vTaskSwitchContext+0x84>)
 80055ba:	2714      	movs	r7, #20
 80055bc:	fb07 f302 	mul.w	r3, r7, r2
 80055c0:	18c8      	adds	r0, r1, r3
 80055c2:	58cd      	ldr	r5, [r1, r3]
 80055c4:	b1ad      	cbz	r5, 80055f2 <vTaskSwitchContext+0x5a>
 80055c6:	6845      	ldr	r5, [r0, #4]
 80055c8:	3308      	adds	r3, #8
 80055ca:	686d      	ldr	r5, [r5, #4]
 80055cc:	6045      	str	r5, [r0, #4]
 80055ce:	440b      	add	r3, r1
 80055d0:	429d      	cmp	r5, r3
 80055d2:	bf04      	itt	eq
 80055d4:	686b      	ldreq	r3, [r5, #4]
 80055d6:	6043      	streq	r3, [r0, #4]
 80055d8:	2314      	movs	r3, #20
 80055da:	fb03 1102 	mla	r1, r3, r2, r1
 80055de:	684b      	ldr	r3, [r1, #4]
 80055e0:	68db      	ldr	r3, [r3, #12]
 80055e2:	6023      	str	r3, [r4, #0]
 80055e4:	6032      	str	r2, [r6, #0]
		traceTASK_SWITCHED_IN();
 80055e6:	6820      	ldr	r0, [r4, #0]
 80055e8:	2100      	movs	r1, #0
}
 80055ea:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		traceTASK_SWITCHED_IN();
 80055ee:	f7ff bf79 	b.w	80054e4 <xTaskCallApplicationTaskHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80055f2:	b942      	cbnz	r2, 8005606 <vTaskSwitchContext+0x6e>
 80055f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055f8:	f383 8811 	msr	BASEPRI, r3
 80055fc:	f3bf 8f6f 	isb	sy
 8005600:	f3bf 8f4f 	dsb	sy
 8005604:	e7fe      	b.n	8005604 <vTaskSwitchContext+0x6c>
 8005606:	3a01      	subs	r2, #1
 8005608:	e7d8      	b.n	80055bc <vTaskSwitchContext+0x24>
 800560a:	bf00      	nop
 800560c:	20008b44 	.word	0x20008b44
 8005610:	20008b54 	.word	0x20008b54
 8005614:	2000903c 	.word	0x2000903c
 8005618:	20008b60 	.word	0x20008b60
 800561c:	20008bdc 	.word	0x20008bdc

08005620 <vTaskPlaceOnEventList>:
{
 8005620:	b510      	push	{r4, lr}
 8005622:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 8005624:	b940      	cbnz	r0, 8005638 <vTaskPlaceOnEventList+0x18>
 8005626:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800562a:	f383 8811 	msr	BASEPRI, r3
 800562e:	f3bf 8f6f 	isb	sy
 8005632:	f3bf 8f4f 	dsb	sy
 8005636:	e7fe      	b.n	8005636 <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005638:	4b05      	ldr	r3, [pc, #20]	@ (8005650 <vTaskPlaceOnEventList+0x30>)
 800563a:	6819      	ldr	r1, [r3, #0]
 800563c:	3118      	adds	r1, #24
 800563e:	f7fe fd7e 	bl	800413e <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005642:	4620      	mov	r0, r4
 8005644:	2101      	movs	r1, #1
}
 8005646:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800564a:	f7ff bcb3 	b.w	8004fb4 <prvAddCurrentTaskToDelayedList>
 800564e:	bf00      	nop
 8005650:	2000903c 	.word	0x2000903c

08005654 <vTaskPlaceOnEventListRestricted>:
	{
 8005654:	b538      	push	{r3, r4, r5, lr}
 8005656:	460d      	mov	r5, r1
 8005658:	4614      	mov	r4, r2
		configASSERT( pxEventList );
 800565a:	b940      	cbnz	r0, 800566e <vTaskPlaceOnEventListRestricted+0x1a>
 800565c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005660:	f383 8811 	msr	BASEPRI, r3
 8005664:	f3bf 8f6f 	isb	sy
 8005668:	f3bf 8f4f 	dsb	sy
 800566c:	e7fe      	b.n	800566c <vTaskPlaceOnEventListRestricted+0x18>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800566e:	4b07      	ldr	r3, [pc, #28]	@ (800568c <vTaskPlaceOnEventListRestricted+0x38>)
 8005670:	6819      	ldr	r1, [r3, #0]
 8005672:	3118      	adds	r1, #24
 8005674:	f7fe fd58 	bl	8004128 <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 8005678:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800567a:	4621      	mov	r1, r4
 800567c:	bf0c      	ite	eq
 800567e:	4628      	moveq	r0, r5
 8005680:	f04f 30ff 	movne.w	r0, #4294967295
	}
 8005684:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005688:	f7ff bc94 	b.w	8004fb4 <prvAddCurrentTaskToDelayedList>
 800568c:	2000903c 	.word	0x2000903c

08005690 <xTaskRemoveFromEventList>:
{
 8005690:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005692:	68c3      	ldr	r3, [r0, #12]
 8005694:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8005696:	b944      	cbnz	r4, 80056aa <xTaskRemoveFromEventList+0x1a>
 8005698:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800569c:	f383 8811 	msr	BASEPRI, r3
 80056a0:	f3bf 8f6f 	isb	sy
 80056a4:	f3bf 8f4f 	dsb	sy
 80056a8:	e7fe      	b.n	80056a8 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80056aa:	f104 0518 	add.w	r5, r4, #24
 80056ae:	4628      	mov	r0, r5
 80056b0:	f7fe fd5c 	bl	800416c <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80056b4:	4b10      	ldr	r3, [pc, #64]	@ (80056f8 <xTaskRemoveFromEventList+0x68>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	b9db      	cbnz	r3, 80056f2 <xTaskRemoveFromEventList+0x62>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80056ba:	1d25      	adds	r5, r4, #4
 80056bc:	4628      	mov	r0, r5
 80056be:	f7fe fd55 	bl	800416c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80056c2:	4a0e      	ldr	r2, [pc, #56]	@ (80056fc <xTaskRemoveFromEventList+0x6c>)
 80056c4:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80056c6:	6811      	ldr	r1, [r2, #0]
 80056c8:	428b      	cmp	r3, r1
 80056ca:	bf88      	it	hi
 80056cc:	6013      	strhi	r3, [r2, #0]
 80056ce:	4a0c      	ldr	r2, [pc, #48]	@ (8005700 <xTaskRemoveFromEventList+0x70>)
 80056d0:	2014      	movs	r0, #20
 80056d2:	4629      	mov	r1, r5
 80056d4:	fb00 2003 	mla	r0, r0, r3, r2
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80056d8:	f7fe fd26 	bl	8004128 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80056dc:	4b09      	ldr	r3, [pc, #36]	@ (8005704 <xTaskRemoveFromEventList+0x74>)
 80056de:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056e4:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 80056e6:	bf83      	ittte	hi
 80056e8:	4b07      	ldrhi	r3, [pc, #28]	@ (8005708 <xTaskRemoveFromEventList+0x78>)
 80056ea:	2001      	movhi	r0, #1
 80056ec:	6018      	strhi	r0, [r3, #0]
		xReturn = pdFALSE;
 80056ee:	2000      	movls	r0, #0
}
 80056f0:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80056f2:	4806      	ldr	r0, [pc, #24]	@ (800570c <xTaskRemoveFromEventList+0x7c>)
 80056f4:	4629      	mov	r1, r5
 80056f6:	e7ef      	b.n	80056d8 <xTaskRemoveFromEventList+0x48>
 80056f8:	20008b44 	.word	0x20008b44
 80056fc:	20008b60 	.word	0x20008b60
 8005700:	20008bdc 	.word	0x20008bdc
 8005704:	2000903c 	.word	0x2000903c
 8005708:	20008b54 	.word	0x20008b54
 800570c:	20008b98 	.word	0x20008b98

08005710 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005710:	4b03      	ldr	r3, [pc, #12]	@ (8005720 <vTaskInternalSetTimeOutState+0x10>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005716:	4b03      	ldr	r3, [pc, #12]	@ (8005724 <vTaskInternalSetTimeOutState+0x14>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	6043      	str	r3, [r0, #4]
}
 800571c:	4770      	bx	lr
 800571e:	bf00      	nop
 8005720:	20008b50 	.word	0x20008b50
 8005724:	20008b64 	.word	0x20008b64

08005728 <xTaskCheckForTimeOut>:
{
 8005728:	b570      	push	{r4, r5, r6, lr}
 800572a:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 800572c:	4605      	mov	r5, r0
 800572e:	b940      	cbnz	r0, 8005742 <xTaskCheckForTimeOut+0x1a>
 8005730:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005734:	f383 8811 	msr	BASEPRI, r3
 8005738:	f3bf 8f6f 	isb	sy
 800573c:	f3bf 8f4f 	dsb	sy
 8005740:	e7fe      	b.n	8005740 <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 8005742:	b941      	cbnz	r1, 8005756 <xTaskCheckForTimeOut+0x2e>
 8005744:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005748:	f383 8811 	msr	BASEPRI, r3
 800574c:	f3bf 8f6f 	isb	sy
 8005750:	f3bf 8f4f 	dsb	sy
 8005754:	e7fe      	b.n	8005754 <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 8005756:	f7fe fd85 	bl	8004264 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800575a:	4b0f      	ldr	r3, [pc, #60]	@ (8005798 <xTaskCheckForTimeOut+0x70>)
 800575c:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 800575e:	6823      	ldr	r3, [r4, #0]
 8005760:	1c5a      	adds	r2, r3, #1
 8005762:	d010      	beq.n	8005786 <xTaskCheckForTimeOut+0x5e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005764:	480d      	ldr	r0, [pc, #52]	@ (800579c <xTaskCheckForTimeOut+0x74>)
 8005766:	682e      	ldr	r6, [r5, #0]
 8005768:	6800      	ldr	r0, [r0, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800576a:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800576c:	4286      	cmp	r6, r0
 800576e:	d001      	beq.n	8005774 <xTaskCheckForTimeOut+0x4c>
 8005770:	428a      	cmp	r2, r1
 8005772:	d90f      	bls.n	8005794 <xTaskCheckForTimeOut+0x6c>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005774:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005776:	4283      	cmp	r3, r0
 8005778:	d90a      	bls.n	8005790 <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
 800577a:	1a5b      	subs	r3, r3, r1
 800577c:	4413      	add	r3, r2
 800577e:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005780:	4628      	mov	r0, r5
 8005782:	f7ff ffc5 	bl	8005710 <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 8005786:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8005788:	f7fe fd8c 	bl	80042a4 <vPortExitCritical>
}
 800578c:	4620      	mov	r0, r4
 800578e:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 8005790:	2300      	movs	r3, #0
 8005792:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8005794:	2401      	movs	r4, #1
 8005796:	e7f7      	b.n	8005788 <xTaskCheckForTimeOut+0x60>
 8005798:	20008b64 	.word	0x20008b64
 800579c:	20008b50 	.word	0x20008b50

080057a0 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 80057a0:	4b01      	ldr	r3, [pc, #4]	@ (80057a8 <vTaskMissedYield+0x8>)
 80057a2:	2201      	movs	r2, #1
 80057a4:	601a      	str	r2, [r3, #0]
}
 80057a6:	4770      	bx	lr
 80057a8:	20008b54 	.word	0x20008b54

080057ac <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 80057ac:	4b05      	ldr	r3, [pc, #20]	@ (80057c4 <xTaskGetSchedulerState+0x18>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	b133      	cbz	r3, 80057c0 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80057b2:	4b05      	ldr	r3, [pc, #20]	@ (80057c8 <xTaskGetSchedulerState+0x1c>)
 80057b4:	6818      	ldr	r0, [r3, #0]
 80057b6:	fab0 f080 	clz	r0, r0
 80057ba:	0940      	lsrs	r0, r0, #5
 80057bc:	0040      	lsls	r0, r0, #1
 80057be:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 80057c0:	2001      	movs	r0, #1
	}
 80057c2:	4770      	bx	lr
 80057c4:	20008b5c 	.word	0x20008b5c
 80057c8:	20008b44 	.word	0x20008b44

080057cc <xTaskPriorityInherit>:
	{
 80057cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 80057ce:	4604      	mov	r4, r0
 80057d0:	b338      	cbz	r0, 8005822 <xTaskPriorityInherit+0x56>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80057d2:	4d1a      	ldr	r5, [pc, #104]	@ (800583c <xTaskPriorityInherit+0x70>)
 80057d4:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80057d6:	682a      	ldr	r2, [r5, #0]
 80057d8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80057da:	4293      	cmp	r3, r2
 80057dc:	d226      	bcs.n	800582c <xTaskPriorityInherit+0x60>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80057de:	6982      	ldr	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80057e0:	4e17      	ldr	r6, [pc, #92]	@ (8005840 <xTaskPriorityInherit+0x74>)
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80057e2:	2a00      	cmp	r2, #0
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80057e4:	bfa1      	itttt	ge
 80057e6:	682a      	ldrge	r2, [r5, #0]
 80057e8:	6ad2      	ldrge	r2, [r2, #44]	@ 0x2c
 80057ea:	f1c2 0238 	rsbge	r2, r2, #56	@ 0x38
 80057ee:	6182      	strge	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80057f0:	2214      	movs	r2, #20
 80057f2:	fb02 6303 	mla	r3, r2, r3, r6
 80057f6:	6942      	ldr	r2, [r0, #20]
 80057f8:	429a      	cmp	r2, r3
 80057fa:	d113      	bne.n	8005824 <xTaskPriorityInherit+0x58>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80057fc:	1d07      	adds	r7, r0, #4
 80057fe:	4638      	mov	r0, r7
 8005800:	f7fe fcb4 	bl	800416c <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005804:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005806:	4a0f      	ldr	r2, [pc, #60]	@ (8005844 <xTaskPriorityInherit+0x78>)
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005808:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800580a:	6811      	ldr	r1, [r2, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800580c:	62e3      	str	r3, [r4, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800580e:	2014      	movs	r0, #20
 8005810:	428b      	cmp	r3, r1
 8005812:	fb00 6003 	mla	r0, r0, r3, r6
 8005816:	4639      	mov	r1, r7
 8005818:	bf88      	it	hi
 800581a:	6013      	strhi	r3, [r2, #0]
 800581c:	f7fe fc84 	bl	8004128 <vListInsertEnd>
				xReturn = pdTRUE;
 8005820:	2001      	movs	r0, #1
	}
 8005822:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005824:	682b      	ldr	r3, [r5, #0]
 8005826:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005828:	62c3      	str	r3, [r0, #44]	@ 0x2c
 800582a:	e7f9      	b.n	8005820 <xTaskPriorityInherit+0x54>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800582c:	682b      	ldr	r3, [r5, #0]
 800582e:	6cc0      	ldr	r0, [r0, #76]	@ 0x4c
 8005830:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005832:	4298      	cmp	r0, r3
 8005834:	bf2c      	ite	cs
 8005836:	2000      	movcs	r0, #0
 8005838:	2001      	movcc	r0, #1
 800583a:	e7f2      	b.n	8005822 <xTaskPriorityInherit+0x56>
 800583c:	2000903c 	.word	0x2000903c
 8005840:	20008bdc 	.word	0x20008bdc
 8005844:	20008b60 	.word	0x20008b60

08005848 <xTaskPriorityDisinherit>:
	{
 8005848:	b538      	push	{r3, r4, r5, lr}
		if( pxMutexHolder != NULL )
 800584a:	b908      	cbnz	r0, 8005850 <xTaskPriorityDisinherit+0x8>
	BaseType_t xReturn = pdFALSE;
 800584c:	2000      	movs	r0, #0
	}
 800584e:	bd38      	pop	{r3, r4, r5, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 8005850:	4b1b      	ldr	r3, [pc, #108]	@ (80058c0 <xTaskPriorityDisinherit+0x78>)
 8005852:	681c      	ldr	r4, [r3, #0]
 8005854:	4284      	cmp	r4, r0
 8005856:	d008      	beq.n	800586a <xTaskPriorityDisinherit+0x22>
 8005858:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800585c:	f383 8811 	msr	BASEPRI, r3
 8005860:	f3bf 8f6f 	isb	sy
 8005864:	f3bf 8f4f 	dsb	sy
 8005868:	e7fe      	b.n	8005868 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 800586a:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800586c:	b943      	cbnz	r3, 8005880 <xTaskPriorityDisinherit+0x38>
 800586e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005872:	f383 8811 	msr	BASEPRI, r3
 8005876:	f3bf 8f6f 	isb	sy
 800587a:	f3bf 8f4f 	dsb	sy
 800587e:	e7fe      	b.n	800587e <xTaskPriorityDisinherit+0x36>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005880:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8005882:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
			( pxTCB->uxMutexesHeld )--;
 8005884:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005886:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 8005888:	6523      	str	r3, [r4, #80]	@ 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800588a:	d0df      	beq.n	800584c <xTaskPriorityDisinherit+0x4>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800588c:	2b00      	cmp	r3, #0
 800588e:	d1dd      	bne.n	800584c <xTaskPriorityDisinherit+0x4>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005890:	1d25      	adds	r5, r4, #4
 8005892:	4628      	mov	r0, r5
 8005894:	f7fe fc6a 	bl	800416c <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005898:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800589a:	62e3      	str	r3, [r4, #44]	@ 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800589c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80058a0:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 80058a2:	4a08      	ldr	r2, [pc, #32]	@ (80058c4 <xTaskPriorityDisinherit+0x7c>)
 80058a4:	6811      	ldr	r1, [r2, #0]
 80058a6:	428b      	cmp	r3, r1
 80058a8:	bf88      	it	hi
 80058aa:	6013      	strhi	r3, [r2, #0]
 80058ac:	4a06      	ldr	r2, [pc, #24]	@ (80058c8 <xTaskPriorityDisinherit+0x80>)
 80058ae:	2014      	movs	r0, #20
 80058b0:	fb00 2003 	mla	r0, r0, r3, r2
 80058b4:	4629      	mov	r1, r5
 80058b6:	f7fe fc37 	bl	8004128 <vListInsertEnd>
					xReturn = pdTRUE;
 80058ba:	2001      	movs	r0, #1
		return xReturn;
 80058bc:	e7c7      	b.n	800584e <xTaskPriorityDisinherit+0x6>
 80058be:	bf00      	nop
 80058c0:	2000903c 	.word	0x2000903c
 80058c4:	20008b60 	.word	0x20008b60
 80058c8:	20008bdc 	.word	0x20008bdc

080058cc <vTaskPriorityDisinheritAfterTimeout>:
	{
 80058cc:	b570      	push	{r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 80058ce:	4604      	mov	r4, r0
 80058d0:	2800      	cmp	r0, #0
 80058d2:	d041      	beq.n	8005958 <vTaskPriorityDisinheritAfterTimeout+0x8c>
			configASSERT( pxTCB->uxMutexesHeld );
 80058d4:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 80058d6:	b942      	cbnz	r2, 80058ea <vTaskPriorityDisinheritAfterTimeout+0x1e>
 80058d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058dc:	f383 8811 	msr	BASEPRI, r3
 80058e0:	f3bf 8f6f 	isb	sy
 80058e4:	f3bf 8f4f 	dsb	sy
 80058e8:	e7fe      	b.n	80058e8 <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80058ea:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 80058ec:	4299      	cmp	r1, r3
 80058ee:	bf38      	it	cc
 80058f0:	4619      	movcc	r1, r3
			if( pxTCB->uxPriority != uxPriorityToUse )
 80058f2:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80058f4:	428b      	cmp	r3, r1
 80058f6:	d02f      	beq.n	8005958 <vTaskPriorityDisinheritAfterTimeout+0x8c>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80058f8:	2a01      	cmp	r2, #1
 80058fa:	d12d      	bne.n	8005958 <vTaskPriorityDisinheritAfterTimeout+0x8c>
					configASSERT( pxTCB != pxCurrentTCB );
 80058fc:	4a17      	ldr	r2, [pc, #92]	@ (800595c <vTaskPriorityDisinheritAfterTimeout+0x90>)
 80058fe:	6812      	ldr	r2, [r2, #0]
 8005900:	4282      	cmp	r2, r0
 8005902:	d108      	bne.n	8005916 <vTaskPriorityDisinheritAfterTimeout+0x4a>
 8005904:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005908:	f383 8811 	msr	BASEPRI, r3
 800590c:	f3bf 8f6f 	isb	sy
 8005910:	f3bf 8f4f 	dsb	sy
 8005914:	e7fe      	b.n	8005914 <vTaskPriorityDisinheritAfterTimeout+0x48>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005916:	6982      	ldr	r2, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005918:	4d11      	ldr	r5, [pc, #68]	@ (8005960 <vTaskPriorityDisinheritAfterTimeout+0x94>)
					pxTCB->uxPriority = uxPriorityToUse;
 800591a:	62c1      	str	r1, [r0, #44]	@ 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800591c:	2a00      	cmp	r2, #0
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800591e:	f04f 0214 	mov.w	r2, #20
 8005922:	fb02 5303 	mla	r3, r2, r3, r5
 8005926:	6942      	ldr	r2, [r0, #20]
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005928:	bfa4      	itt	ge
 800592a:	f1c1 0138 	rsbge	r1, r1, #56	@ 0x38
 800592e:	6181      	strge	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005930:	429a      	cmp	r2, r3
 8005932:	d111      	bne.n	8005958 <vTaskPriorityDisinheritAfterTimeout+0x8c>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005934:	1d06      	adds	r6, r0, #4
 8005936:	4630      	mov	r0, r6
 8005938:	f7fe fc18 	bl	800416c <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 800593c:	4a09      	ldr	r2, [pc, #36]	@ (8005964 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 800593e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8005940:	6811      	ldr	r1, [r2, #0]
 8005942:	2014      	movs	r0, #20
 8005944:	428b      	cmp	r3, r1
 8005946:	fb00 5003 	mla	r0, r0, r3, r5
 800594a:	4631      	mov	r1, r6
	}
 800594c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
						prvAddTaskToReadyList( pxTCB );
 8005950:	bf88      	it	hi
 8005952:	6013      	strhi	r3, [r2, #0]
 8005954:	f7fe bbe8 	b.w	8004128 <vListInsertEnd>
	}
 8005958:	bd70      	pop	{r4, r5, r6, pc}
 800595a:	bf00      	nop
 800595c:	2000903c 	.word	0x2000903c
 8005960:	20008bdc 	.word	0x20008bdc
 8005964:	20008b60 	.word	0x20008b60

08005968 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8005968:	4b04      	ldr	r3, [pc, #16]	@ (800597c <pvTaskIncrementMutexHeldCount+0x14>)
 800596a:	681a      	ldr	r2, [r3, #0]
 800596c:	b11a      	cbz	r2, 8005976 <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 800596e:	6819      	ldr	r1, [r3, #0]
 8005970:	6d0a      	ldr	r2, [r1, #80]	@ 0x50
 8005972:	3201      	adds	r2, #1
 8005974:	650a      	str	r2, [r1, #80]	@ 0x50
		return pxCurrentTCB;
 8005976:	6818      	ldr	r0, [r3, #0]
	}
 8005978:	4770      	bx	lr
 800597a:	bf00      	nop
 800597c:	2000903c 	.word	0x2000903c

08005980 <prvInsertTimerInActiveList>:
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );

	if( xNextExpiryTime <= xTimeNow )
 8005980:	4291      	cmp	r1, r2
{
 8005982:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005984:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005986:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 8005988:	d80a      	bhi.n	80059a0 <prvInsertTimerInActiveList+0x20>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800598a:	1ad2      	subs	r2, r2, r3
 800598c:	6983      	ldr	r3, [r0, #24]
 800598e:	429a      	cmp	r2, r3
 8005990:	d20d      	bcs.n	80059ae <prvInsertTimerInActiveList+0x2e>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005992:	4b08      	ldr	r3, [pc, #32]	@ (80059b4 <prvInsertTimerInActiveList+0x34>)
 8005994:	1d01      	adds	r1, r0, #4
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005996:	6818      	ldr	r0, [r3, #0]
 8005998:	f7fe fbd1 	bl	800413e <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800599c:	2000      	movs	r0, #0
		}
	}

	return xProcessTimerNow;
}
 800599e:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80059a0:	429a      	cmp	r2, r3
 80059a2:	d201      	bcs.n	80059a8 <prvInsertTimerInActiveList+0x28>
 80059a4:	4299      	cmp	r1, r3
 80059a6:	d202      	bcs.n	80059ae <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80059a8:	4b03      	ldr	r3, [pc, #12]	@ (80059b8 <prvInsertTimerInActiveList+0x38>)
 80059aa:	1d01      	adds	r1, r0, #4
 80059ac:	e7f3      	b.n	8005996 <prvInsertTimerInActiveList+0x16>
			xProcessTimerNow = pdTRUE;
 80059ae:	2001      	movs	r0, #1
	return xProcessTimerNow;
 80059b0:	e7f5      	b.n	800599e <prvInsertTimerInActiveList+0x1e>
 80059b2:	bf00      	nop
 80059b4:	2000913c 	.word	0x2000913c
 80059b8:	20009140 	.word	0x20009140

080059bc <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80059bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 80059be:	4c11      	ldr	r4, [pc, #68]	@ (8005a04 <prvCheckForValidListAndQueue+0x48>)
	taskENTER_CRITICAL();
 80059c0:	f7fe fc50 	bl	8004264 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 80059c4:	6825      	ldr	r5, [r4, #0]
 80059c6:	b9bd      	cbnz	r5, 80059f8 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
 80059c8:	4f0f      	ldr	r7, [pc, #60]	@ (8005a08 <prvCheckForValidListAndQueue+0x4c>)
			vListInitialise( &xActiveTimerList2 );
 80059ca:	4e10      	ldr	r6, [pc, #64]	@ (8005a0c <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList1 );
 80059cc:	4638      	mov	r0, r7
 80059ce:	f7fe fb9d 	bl	800410c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80059d2:	4630      	mov	r0, r6
 80059d4:	f7fe fb9a 	bl	800410c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80059d8:	4b0d      	ldr	r3, [pc, #52]	@ (8005a10 <prvCheckForValidListAndQueue+0x54>)
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80059da:	4a0e      	ldr	r2, [pc, #56]	@ (8005a14 <prvCheckForValidListAndQueue+0x58>)
			pxCurrentTimerList = &xActiveTimerList1;
 80059dc:	601f      	str	r7, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80059de:	4b0e      	ldr	r3, [pc, #56]	@ (8005a18 <prvCheckForValidListAndQueue+0x5c>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80059e0:	2110      	movs	r1, #16
			pxOverflowTimerList = &xActiveTimerList2;
 80059e2:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80059e4:	200a      	movs	r0, #10
 80059e6:	4b0d      	ldr	r3, [pc, #52]	@ (8005a1c <prvCheckForValidListAndQueue+0x60>)
 80059e8:	9500      	str	r5, [sp, #0]
 80059ea:	f7fe fe44 	bl	8004676 <xQueueGenericCreateStatic>
 80059ee:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80059f0:	b110      	cbz	r0, 80059f8 <prvCheckForValidListAndQueue+0x3c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80059f2:	490b      	ldr	r1, [pc, #44]	@ (8005a20 <prvCheckForValidListAndQueue+0x64>)
 80059f4:	f7ff f9fc 	bl	8004df0 <vQueueAddToRegistry>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 80059f8:	b003      	add	sp, #12
 80059fa:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 80059fe:	f7fe bc51 	b.w	80042a4 <vPortExitCritical>
 8005a02:	bf00      	nop
 8005a04:	20009138 	.word	0x20009138
 8005a08:	20009158 	.word	0x20009158
 8005a0c:	20009144 	.word	0x20009144
 8005a10:	20009140 	.word	0x20009140
 8005a14:	20009090 	.word	0x20009090
 8005a18:	2000913c 	.word	0x2000913c
 8005a1c:	20009040 	.word	0x20009040
 8005a20:	0800c7dc 	.word	0x0800c7dc

08005a24 <xTimerCreateTimerTask>:
{
 8005a24:	b510      	push	{r4, lr}
 8005a26:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 8005a28:	f7ff ffc8 	bl	80059bc <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 8005a2c:	4b12      	ldr	r3, [pc, #72]	@ (8005a78 <xTimerCreateTimerTask+0x54>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	b1b3      	cbz	r3, 8005a60 <xTimerCreateTimerTask+0x3c>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005a32:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005a34:	aa07      	add	r2, sp, #28
 8005a36:	a906      	add	r1, sp, #24
 8005a38:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005a3a:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005a3e:	f7fe fa5d 	bl	8003efc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005a42:	9b05      	ldr	r3, [sp, #20]
 8005a44:	9302      	str	r3, [sp, #8]
 8005a46:	9b06      	ldr	r3, [sp, #24]
 8005a48:	9301      	str	r3, [sp, #4]
 8005a4a:	2302      	movs	r3, #2
 8005a4c:	9300      	str	r3, [sp, #0]
 8005a4e:	9a07      	ldr	r2, [sp, #28]
 8005a50:	490a      	ldr	r1, [pc, #40]	@ (8005a7c <xTimerCreateTimerTask+0x58>)
 8005a52:	480b      	ldr	r0, [pc, #44]	@ (8005a80 <xTimerCreateTimerTask+0x5c>)
 8005a54:	4623      	mov	r3, r4
 8005a56:	f7ff fb92 	bl	800517e <xTaskCreateStatic>
 8005a5a:	4b0a      	ldr	r3, [pc, #40]	@ (8005a84 <xTimerCreateTimerTask+0x60>)
 8005a5c:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 8005a5e:	b940      	cbnz	r0, 8005a72 <xTimerCreateTimerTask+0x4e>
 8005a60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a64:	f383 8811 	msr	BASEPRI, r3
 8005a68:	f3bf 8f6f 	isb	sy
 8005a6c:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 8005a70:	e7fe      	b.n	8005a70 <xTimerCreateTimerTask+0x4c>
}
 8005a72:	2001      	movs	r0, #1
 8005a74:	b008      	add	sp, #32
 8005a76:	bd10      	pop	{r4, pc}
 8005a78:	20009138 	.word	0x20009138
 8005a7c:	0800c7e1 	.word	0x0800c7e1
 8005a80:	08005b85 	.word	0x08005b85
 8005a84:	20009134 	.word	0x20009134

08005a88 <xTimerGenericCommand>:
{
 8005a88:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8005a8a:	4616      	mov	r6, r2
	configASSERT( xTimer );
 8005a8c:	4604      	mov	r4, r0
{
 8005a8e:	461a      	mov	r2, r3
	configASSERT( xTimer );
 8005a90:	b940      	cbnz	r0, 8005aa4 <xTimerGenericCommand+0x1c>
 8005a92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a96:	f383 8811 	msr	BASEPRI, r3
 8005a9a:	f3bf 8f6f 	isb	sy
 8005a9e:	f3bf 8f4f 	dsb	sy
 8005aa2:	e7fe      	b.n	8005aa2 <xTimerGenericCommand+0x1a>
	if( xTimerQueue != NULL )
 8005aa4:	4d0d      	ldr	r5, [pc, #52]	@ (8005adc <xTimerGenericCommand+0x54>)
 8005aa6:	6828      	ldr	r0, [r5, #0]
 8005aa8:	b180      	cbz	r0, 8005acc <xTimerGenericCommand+0x44>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005aaa:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005aac:	e9cd 1600 	strd	r1, r6, [sp]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005ab0:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005ab2:	dc0d      	bgt.n	8005ad0 <xTimerGenericCommand+0x48>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005ab4:	f7ff fe7a 	bl	80057ac <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005ab8:	2300      	movs	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005aba:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005abc:	bf08      	it	eq
 8005abe:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005ac0:	6828      	ldr	r0, [r5, #0]
 8005ac2:	bf18      	it	ne
 8005ac4:	461a      	movne	r2, r3
 8005ac6:	4669      	mov	r1, sp
 8005ac8:	f7fe fe8a 	bl	80047e0 <xQueueGenericSend>
}
 8005acc:	b004      	add	sp, #16
 8005ace:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	4669      	mov	r1, sp
 8005ad4:	f7fe ff36 	bl	8004944 <xQueueGenericSendFromISR>
 8005ad8:	e7f8      	b.n	8005acc <xTimerGenericCommand+0x44>
 8005ada:	bf00      	nop
 8005adc:	20009138 	.word	0x20009138

08005ae0 <prvSampleTimeNow>:
{
 8005ae0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	if( xTimeNow < xLastTime )
 8005ae4:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 8005b80 <prvSampleTimeNow+0xa0>
{
 8005ae8:	4606      	mov	r6, r0
	xTimeNow = xTaskGetTickCount();
 8005aea:	f7ff fbb7 	bl	800525c <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8005aee:	f8d8 3000 	ldr.w	r3, [r8]
 8005af2:	4283      	cmp	r3, r0
	xTimeNow = xTaskGetTickCount();
 8005af4:	4605      	mov	r5, r0
	if( xTimeNow < xLastTime )
 8005af6:	d909      	bls.n	8005b0c <prvSampleTimeNow+0x2c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005af8:	4f1f      	ldr	r7, [pc, #124]	@ (8005b78 <prvSampleTimeNow+0x98>)
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	681a      	ldr	r2, [r3, #0]
 8005afe:	b96a      	cbnz	r2, 8005b1c <prvSampleTimeNow+0x3c>
	pxCurrentTimerList = pxOverflowTimerList;
 8005b00:	4a1e      	ldr	r2, [pc, #120]	@ (8005b7c <prvSampleTimeNow+0x9c>)
 8005b02:	6811      	ldr	r1, [r2, #0]
 8005b04:	6039      	str	r1, [r7, #0]
	pxOverflowTimerList = pxTemp;
 8005b06:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
 8005b08:	2301      	movs	r3, #1
 8005b0a:	e000      	b.n	8005b0e <prvSampleTimeNow+0x2e>
 8005b0c:	2300      	movs	r3, #0
}
 8005b0e:	4628      	mov	r0, r5
		*pxTimerListsWereSwitched = pdTRUE;
 8005b10:	6033      	str	r3, [r6, #0]
	xLastTime = xTimeNow;
 8005b12:	f8c8 5000 	str.w	r5, [r8]
}
 8005b16:	b002      	add	sp, #8
 8005b18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005b1c:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b1e:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005b20:	f8d3 9000 	ldr.w	r9, [r3]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005b24:	f104 0a04 	add.w	sl, r4, #4
 8005b28:	4650      	mov	r0, sl
 8005b2a:	f7fe fb1f 	bl	800416c <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005b2e:	6a23      	ldr	r3, [r4, #32]
 8005b30:	4620      	mov	r0, r4
 8005b32:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005b34:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8005b38:	075b      	lsls	r3, r3, #29
 8005b3a:	d5de      	bpl.n	8005afa <prvSampleTimeNow+0x1a>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005b3c:	69a3      	ldr	r3, [r4, #24]
 8005b3e:	444b      	add	r3, r9
			if( xReloadTime > xNextExpireTime )
 8005b40:	4599      	cmp	r9, r3
 8005b42:	d206      	bcs.n	8005b52 <prvSampleTimeNow+0x72>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005b44:	6838      	ldr	r0, [r7, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005b46:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005b48:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005b4a:	4651      	mov	r1, sl
 8005b4c:	f7fe faf7 	bl	800413e <vListInsert>
 8005b50:	e7d3      	b.n	8005afa <prvSampleTimeNow+0x1a>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005b52:	2300      	movs	r3, #0
 8005b54:	9300      	str	r3, [sp, #0]
 8005b56:	464a      	mov	r2, r9
 8005b58:	4619      	mov	r1, r3
 8005b5a:	4620      	mov	r0, r4
 8005b5c:	f7ff ff94 	bl	8005a88 <xTimerGenericCommand>
				configASSERT( xResult );
 8005b60:	2800      	cmp	r0, #0
 8005b62:	d1ca      	bne.n	8005afa <prvSampleTimeNow+0x1a>
 8005b64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b68:	f383 8811 	msr	BASEPRI, r3
 8005b6c:	f3bf 8f6f 	isb	sy
 8005b70:	f3bf 8f4f 	dsb	sy
 8005b74:	e7fe      	b.n	8005b74 <prvSampleTimeNow+0x94>
 8005b76:	bf00      	nop
 8005b78:	20009140 	.word	0x20009140
 8005b7c:	2000913c 	.word	0x2000913c
 8005b80:	20009130 	.word	0x20009130

08005b84 <prvTimerTask>:
{
 8005b84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005b88:	4d6e      	ldr	r5, [pc, #440]	@ (8005d44 <prvTimerTask+0x1c0>)
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005b8a:	4e6f      	ldr	r6, [pc, #444]	@ (8005d48 <prvTimerTask+0x1c4>)
{
 8005b8c:	b089      	sub	sp, #36	@ 0x24
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005b8e:	682b      	ldr	r3, [r5, #0]
 8005b90:	f8d3 8000 	ldr.w	r8, [r3]
 8005b94:	f1b8 0f00 	cmp.w	r8, #0
 8005b98:	d035      	beq.n	8005c06 <prvTimerTask+0x82>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005b9a:	68db      	ldr	r3, [r3, #12]
 8005b9c:	f8d3 8000 	ldr.w	r8, [r3]
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005ba0:	2400      	movs	r4, #0
	vTaskSuspendAll();
 8005ba2:	f7ff fb53 	bl	800524c <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005ba6:	a804      	add	r0, sp, #16
 8005ba8:	f7ff ff9a 	bl	8005ae0 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 8005bac:	9b04      	ldr	r3, [sp, #16]
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005bae:	4681      	mov	r9, r0
		if( xTimerListsWereSwitched == pdFALSE )
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d169      	bne.n	8005c88 <prvTimerTask+0x104>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005bb4:	2c00      	cmp	r4, #0
 8005bb6:	d14c      	bne.n	8005c52 <prvTimerTask+0xce>
 8005bb8:	4540      	cmp	r0, r8
 8005bba:	d350      	bcc.n	8005c5e <prvTimerTask+0xda>
				( void ) xTaskResumeAll();
 8005bbc:	f7ff fbea 	bl	8005394 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005bc0:	682b      	ldr	r3, [r5, #0]
 8005bc2:	68db      	ldr	r3, [r3, #12]
 8005bc4:	68df      	ldr	r7, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005bc6:	1d38      	adds	r0, r7, #4
 8005bc8:	f7fe fad0 	bl	800416c <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005bcc:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005bd0:	0758      	lsls	r0, r3, #29
 8005bd2:	d51a      	bpl.n	8005c0a <prvTimerTask+0x86>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005bd4:	69b9      	ldr	r1, [r7, #24]
 8005bd6:	4643      	mov	r3, r8
 8005bd8:	464a      	mov	r2, r9
 8005bda:	4441      	add	r1, r8
 8005bdc:	4638      	mov	r0, r7
 8005bde:	f7ff fecf 	bl	8005980 <prvInsertTimerInActiveList>
 8005be2:	b1b0      	cbz	r0, 8005c12 <prvTimerTask+0x8e>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005be4:	9400      	str	r4, [sp, #0]
 8005be6:	4623      	mov	r3, r4
 8005be8:	4642      	mov	r2, r8
 8005bea:	4621      	mov	r1, r4
 8005bec:	4638      	mov	r0, r7
 8005bee:	f7ff ff4b 	bl	8005a88 <xTimerGenericCommand>
			configASSERT( xResult );
 8005bf2:	b970      	cbnz	r0, 8005c12 <prvTimerTask+0x8e>
 8005bf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bf8:	f383 8811 	msr	BASEPRI, r3
 8005bfc:	f3bf 8f6f 	isb	sy
 8005c00:	f3bf 8f4f 	dsb	sy
 8005c04:	e7fe      	b.n	8005c04 <prvTimerTask+0x80>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005c06:	2401      	movs	r4, #1
 8005c08:	e7cb      	b.n	8005ba2 <prvTimerTask+0x1e>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005c0a:	f023 0301 	bic.w	r3, r3, #1
 8005c0e:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005c12:	6a3b      	ldr	r3, [r7, #32]
 8005c14:	4638      	mov	r0, r7
 8005c16:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005c18:	6830      	ldr	r0, [r6, #0]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	a904      	add	r1, sp, #16
 8005c1e:	f7fe ff3f 	bl	8004aa0 <xQueueReceive>
 8005c22:	2800      	cmp	r0, #0
 8005c24:	d0b3      	beq.n	8005b8e <prvTimerTask+0xa>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005c26:	9b04      	ldr	r3, [sp, #16]
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005c28:	9806      	ldr	r0, [sp, #24]
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	db2f      	blt.n	8005c8e <prvTimerTask+0x10a>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005c2e:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005c30:	6963      	ldr	r3, [r4, #20]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d132      	bne.n	8005c9c <prvTimerTask+0x118>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005c36:	a803      	add	r0, sp, #12
 8005c38:	f7ff ff52 	bl	8005ae0 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 8005c3c:	9b04      	ldr	r3, [sp, #16]
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005c3e:	4602      	mov	r2, r0
			switch( xMessage.xMessageID )
 8005c40:	2b09      	cmp	r3, #9
 8005c42:	d8e9      	bhi.n	8005c18 <prvTimerTask+0x94>
 8005c44:	e8df f003 	tbb	[pc, r3]
 8005c48:	572e2e2e 	.word	0x572e2e2e
 8005c4c:	2e2e765e 	.word	0x2e2e765e
 8005c50:	5e57      	.short	0x5e57
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005c52:	4b3e      	ldr	r3, [pc, #248]	@ (8005d4c <prvTimerTask+0x1c8>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	681c      	ldr	r4, [r3, #0]
 8005c58:	fab4 f484 	clz	r4, r4
 8005c5c:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005c5e:	6830      	ldr	r0, [r6, #0]
 8005c60:	4622      	mov	r2, r4
 8005c62:	eba8 0109 	sub.w	r1, r8, r9
 8005c66:	f7ff f902 	bl	8004e6e <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005c6a:	f7ff fb93 	bl	8005394 <xTaskResumeAll>
 8005c6e:	2800      	cmp	r0, #0
 8005c70:	d1d2      	bne.n	8005c18 <prvTimerTask+0x94>
					portYIELD_WITHIN_API();
 8005c72:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8005c76:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c7a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8005c7e:	f3bf 8f4f 	dsb	sy
 8005c82:	f3bf 8f6f 	isb	sy
 8005c86:	e7c7      	b.n	8005c18 <prvTimerTask+0x94>
			( void ) xTaskResumeAll();
 8005c88:	f7ff fb84 	bl	8005394 <xTaskResumeAll>
}
 8005c8c:	e7c4      	b.n	8005c18 <prvTimerTask+0x94>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005c8e:	9b05      	ldr	r3, [sp, #20]
 8005c90:	9907      	ldr	r1, [sp, #28]
 8005c92:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005c94:	9b04      	ldr	r3, [sp, #16]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	dbbe      	blt.n	8005c18 <prvTimerTask+0x94>
 8005c9a:	e7c8      	b.n	8005c2e <prvTimerTask+0xaa>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005c9c:	1d20      	adds	r0, r4, #4
 8005c9e:	f7fe fa65 	bl	800416c <uxListRemove>
 8005ca2:	e7c8      	b.n	8005c36 <prvTimerTask+0xb2>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005ca4:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005ca8:	69a1      	ldr	r1, [r4, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005caa:	f043 0301 	orr.w	r3, r3, #1
 8005cae:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005cb2:	9b05      	ldr	r3, [sp, #20]
 8005cb4:	4620      	mov	r0, r4
 8005cb6:	4419      	add	r1, r3
 8005cb8:	f7ff fe62 	bl	8005980 <prvInsertTimerInActiveList>
 8005cbc:	2800      	cmp	r0, #0
 8005cbe:	d0ab      	beq.n	8005c18 <prvTimerTask+0x94>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005cc0:	6a23      	ldr	r3, [r4, #32]
 8005cc2:	4620      	mov	r0, r4
 8005cc4:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005cc6:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8005cca:	0759      	lsls	r1, r3, #29
 8005ccc:	d5a4      	bpl.n	8005c18 <prvTimerTask+0x94>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005cce:	69a2      	ldr	r2, [r4, #24]
 8005cd0:	9905      	ldr	r1, [sp, #20]
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	440a      	add	r2, r1
 8005cd6:	9300      	str	r3, [sp, #0]
 8005cd8:	4619      	mov	r1, r3
 8005cda:	4620      	mov	r0, r4
 8005cdc:	f7ff fed4 	bl	8005a88 <xTimerGenericCommand>
							configASSERT( xResult );
 8005ce0:	2800      	cmp	r0, #0
 8005ce2:	d199      	bne.n	8005c18 <prvTimerTask+0x94>
 8005ce4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ce8:	f383 8811 	msr	BASEPRI, r3
 8005cec:	f3bf 8f6f 	isb	sy
 8005cf0:	f3bf 8f4f 	dsb	sy
 8005cf4:	e7fe      	b.n	8005cf4 <prvTimerTask+0x170>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005cf6:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005cfa:	f023 0301 	bic.w	r3, r3, #1
 8005cfe:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
 8005d02:	e789      	b.n	8005c18 <prvTimerTask+0x94>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005d04:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8005d08:	f043 0301 	orr.w	r3, r3, #1
 8005d0c:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005d10:	9905      	ldr	r1, [sp, #20]
 8005d12:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005d14:	b941      	cbnz	r1, 8005d28 <prvTimerTask+0x1a4>
 8005d16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d1a:	f383 8811 	msr	BASEPRI, r3
 8005d1e:	f3bf 8f6f 	isb	sy
 8005d22:	f3bf 8f4f 	dsb	sy
 8005d26:	e7fe      	b.n	8005d26 <prvTimerTask+0x1a2>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005d28:	4603      	mov	r3, r0
 8005d2a:	4401      	add	r1, r0
 8005d2c:	4620      	mov	r0, r4
 8005d2e:	f7ff fe27 	bl	8005980 <prvInsertTimerInActiveList>
					break;
 8005d32:	e771      	b.n	8005c18 <prvTimerTask+0x94>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005d34:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8005d38:	079a      	lsls	r2, r3, #30
 8005d3a:	d4de      	bmi.n	8005cfa <prvTimerTask+0x176>
							vPortFree( pxTimer );
 8005d3c:	4620      	mov	r0, r4
 8005d3e:	f7fe f9a7 	bl	8004090 <vPortFree>
 8005d42:	e769      	b.n	8005c18 <prvTimerTask+0x94>
 8005d44:	20009140 	.word	0x20009140
 8005d48:	20009138 	.word	0x20009138
 8005d4c:	2000913c 	.word	0x2000913c

08005d50 <_ZN8touchgfx4RectaNERKS0_>:
 8005d50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005d54:	f9b1 7000 	ldrsh.w	r7, [r1]
 8005d58:	888c      	ldrh	r4, [r1, #4]
 8005d5a:	f9b0 9000 	ldrsh.w	r9, [r0]
 8005d5e:	443c      	add	r4, r7
 8005d60:	b2a4      	uxth	r4, r4
 8005d62:	fa0f f884 	sxth.w	r8, r4
 8005d66:	45c1      	cmp	r9, r8
 8005d68:	da2f      	bge.n	8005dca <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8005d6a:	8882      	ldrh	r2, [r0, #4]
 8005d6c:	444a      	add	r2, r9
 8005d6e:	b292      	uxth	r2, r2
 8005d70:	fa0f fe82 	sxth.w	lr, r2
 8005d74:	4577      	cmp	r7, lr
 8005d76:	da28      	bge.n	8005dca <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8005d78:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8005d7c:	88cb      	ldrh	r3, [r1, #6]
 8005d7e:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8005d82:	442b      	add	r3, r5
 8005d84:	b21b      	sxth	r3, r3
 8005d86:	429e      	cmp	r6, r3
 8005d88:	da1f      	bge.n	8005dca <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8005d8a:	88c3      	ldrh	r3, [r0, #6]
 8005d8c:	4433      	add	r3, r6
 8005d8e:	b29b      	uxth	r3, r3
 8005d90:	fa0f fc83 	sxth.w	ip, r3
 8005d94:	4565      	cmp	r5, ip
 8005d96:	da18      	bge.n	8005dca <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8005d98:	454f      	cmp	r7, r9
 8005d9a:	bfb8      	it	lt
 8005d9c:	464f      	movlt	r7, r9
 8005d9e:	42b5      	cmp	r5, r6
 8005da0:	bfb8      	it	lt
 8005da2:	4635      	movlt	r5, r6
 8005da4:	45f0      	cmp	r8, lr
 8005da6:	bfd8      	it	le
 8005da8:	4622      	movle	r2, r4
 8005daa:	1bd2      	subs	r2, r2, r7
 8005dac:	8082      	strh	r2, [r0, #4]
 8005dae:	884a      	ldrh	r2, [r1, #2]
 8005db0:	88c9      	ldrh	r1, [r1, #6]
 8005db2:	8007      	strh	r7, [r0, #0]
 8005db4:	440a      	add	r2, r1
 8005db6:	b292      	uxth	r2, r2
 8005db8:	b211      	sxth	r1, r2
 8005dba:	458c      	cmp	ip, r1
 8005dbc:	bfa8      	it	ge
 8005dbe:	4613      	movge	r3, r2
 8005dc0:	1b5b      	subs	r3, r3, r5
 8005dc2:	80c3      	strh	r3, [r0, #6]
 8005dc4:	8045      	strh	r5, [r0, #2]
 8005dc6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005dca:	2300      	movs	r3, #0
 8005dcc:	8003      	strh	r3, [r0, #0]
 8005dce:	8043      	strh	r3, [r0, #2]
 8005dd0:	8083      	strh	r3, [r0, #4]
 8005dd2:	80c3      	strh	r3, [r0, #6]
 8005dd4:	e7f7      	b.n	8005dc6 <_ZN8touchgfx4RectaNERKS0_+0x76>

08005dd6 <_ZNK8touchgfx4Rect7isEmptyEv>:
 8005dd6:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	dd06      	ble.n	8005dec <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 8005dde:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8005de2:	2800      	cmp	r0, #0
 8005de4:	bfcc      	ite	gt
 8005de6:	2000      	movgt	r0, #0
 8005de8:	2001      	movle	r0, #1
 8005dea:	4770      	bx	lr
 8005dec:	2001      	movs	r0, #1
 8005dee:	4770      	bx	lr

08005df0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 8005df0:	b513      	push	{r0, r1, r4, lr}
 8005df2:	6803      	ldr	r3, [r0, #0]
 8005df4:	f8d3 40b4 	ldr.w	r4, [r3, #180]	@ 0xb4
 8005df8:	2300      	movs	r3, #0
 8005dfa:	e9cd 3300 	strd	r3, r3, [sp]
 8005dfe:	466b      	mov	r3, sp
 8005e00:	47a0      	blx	r4
 8005e02:	b002      	add	sp, #8
 8005e04:	bd10      	pop	{r4, pc}

08005e06 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 8005e06:	2301      	movs	r3, #1
 8005e08:	f880 304b 	strb.w	r3, [r0, #75]	@ 0x4b
 8005e0c:	f880 306d 	strb.w	r3, [r0, #109]	@ 0x6d
 8005e10:	4770      	bx	lr

08005e12 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 8005e12:	2301      	movs	r3, #1
 8005e14:	f880 304b 	strb.w	r3, [r0, #75]	@ 0x4b
 8005e18:	f880 306d 	strb.w	r3, [r0, #109]	@ 0x6d
 8005e1c:	4770      	bx	lr

08005e1e <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 8005e1e:	6843      	ldr	r3, [r0, #4]
 8005e20:	2201      	movs	r2, #1
 8005e22:	725a      	strb	r2, [r3, #9]
 8005e24:	6840      	ldr	r0, [r0, #4]
 8005e26:	6803      	ldr	r3, [r0, #0]
 8005e28:	691b      	ldr	r3, [r3, #16]
 8005e2a:	4718      	bx	r3

08005e2c <_ZN8touchgfx3HAL8flushDMAEv>:
 8005e2c:	6840      	ldr	r0, [r0, #4]
 8005e2e:	6803      	ldr	r3, [r0, #0]
 8005e30:	689b      	ldr	r3, [r3, #8]
 8005e32:	4718      	bx	r3

08005e34 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 8005e34:	b530      	push	{r4, r5, lr}
 8005e36:	b08b      	sub	sp, #44	@ 0x2c
 8005e38:	6804      	ldr	r4, [r0, #0]
 8005e3a:	f89d 5058 	ldrb.w	r5, [sp, #88]	@ 0x58
 8005e3e:	9509      	str	r5, [sp, #36]	@ 0x24
 8005e40:	f89d 5054 	ldrb.w	r5, [sp, #84]	@ 0x54
 8005e44:	9508      	str	r5, [sp, #32]
 8005e46:	f89d 5050 	ldrb.w	r5, [sp, #80]	@ 0x50
 8005e4a:	9507      	str	r5, [sp, #28]
 8005e4c:	f8bd 504c 	ldrh.w	r5, [sp, #76]	@ 0x4c
 8005e50:	9506      	str	r5, [sp, #24]
 8005e52:	f89d 5048 	ldrb.w	r5, [sp, #72]	@ 0x48
 8005e56:	9505      	str	r5, [sp, #20]
 8005e58:	f89d 5044 	ldrb.w	r5, [sp, #68]	@ 0x44
 8005e5c:	9504      	str	r5, [sp, #16]
 8005e5e:	f8bd 5040 	ldrh.w	r5, [sp, #64]	@ 0x40
 8005e62:	9503      	str	r5, [sp, #12]
 8005e64:	f8bd 503c 	ldrh.w	r5, [sp, #60]	@ 0x3c
 8005e68:	9502      	str	r5, [sp, #8]
 8005e6a:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 8005e6e:	e9cd 3500 	strd	r3, r5, [sp]
 8005e72:	4613      	mov	r3, r2
 8005e74:	6c24      	ldr	r4, [r4, #64]	@ 0x40
 8005e76:	2200      	movs	r2, #0
 8005e78:	47a0      	blx	r4
 8005e7a:	b00b      	add	sp, #44	@ 0x2c
 8005e7c:	bd30      	pop	{r4, r5, pc}
	...

08005e80 <_ZN8touchgfx3HAL10beginFrameEv>:
 8005e80:	4b04      	ldr	r3, [pc, #16]	@ (8005e94 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 8005e82:	781b      	ldrb	r3, [r3, #0]
 8005e84:	b123      	cbz	r3, 8005e90 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 8005e86:	f890 006e 	ldrb.w	r0, [r0, #110]	@ 0x6e
 8005e8a:	f080 0001 	eor.w	r0, r0, #1
 8005e8e:	4770      	bx	lr
 8005e90:	2001      	movs	r0, #1
 8005e92:	4770      	bx	lr
 8005e94:	20009176 	.word	0x20009176

08005e98 <_ZN8touchgfx3HAL8endFrameEv>:
 8005e98:	b510      	push	{r4, lr}
 8005e9a:	4604      	mov	r4, r0
 8005e9c:	6840      	ldr	r0, [r0, #4]
 8005e9e:	6803      	ldr	r3, [r0, #0]
 8005ea0:	689b      	ldr	r3, [r3, #8]
 8005ea2:	4798      	blx	r3
 8005ea4:	f894 306d 	ldrb.w	r3, [r4, #109]	@ 0x6d
 8005ea8:	b113      	cbz	r3, 8005eb0 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 8005eaa:	2301      	movs	r3, #1
 8005eac:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
 8005eb0:	bd10      	pop	{r4, pc}

08005eb2 <_ZN8touchgfx3HAL10initializeEv>:
 8005eb2:	b510      	push	{r4, lr}
 8005eb4:	4604      	mov	r4, r0
 8005eb6:	f7fa fedd 	bl	8000c74 <_ZN8touchgfx10OSWrappers10initializeEv>
 8005eba:	f7fa fcc7 	bl	800084c <_ZN8touchgfx4GPIO4initEv>
 8005ebe:	6860      	ldr	r0, [r4, #4]
 8005ec0:	6803      	ldr	r3, [r0, #0]
 8005ec2:	68db      	ldr	r3, [r3, #12]
 8005ec4:	4798      	blx	r3
 8005ec6:	68e0      	ldr	r0, [r4, #12]
 8005ec8:	6803      	ldr	r3, [r0, #0]
 8005eca:	689b      	ldr	r3, [r3, #8]
 8005ecc:	4798      	blx	r3
 8005ece:	6823      	ldr	r3, [r4, #0]
 8005ed0:	4620      	mov	r0, r4
 8005ed2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005ed4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ed8:	4718      	bx	r3

08005eda <_ZN8touchgfx3HAL9taskEntryEv>:
 8005eda:	b508      	push	{r3, lr}
 8005edc:	6803      	ldr	r3, [r0, #0]
 8005ede:	4604      	mov	r4, r0
 8005ee0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005ee4:	4798      	blx	r3
 8005ee6:	6823      	ldr	r3, [r4, #0]
 8005ee8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005eea:	4620      	mov	r0, r4
 8005eec:	4798      	blx	r3
 8005eee:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 8005ef2:	2b02      	cmp	r3, #2
 8005ef4:	d001      	beq.n	8005efa <_ZN8touchgfx3HAL9taskEntryEv+0x20>
 8005ef6:	f7fa ff09 	bl	8000d0c <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 8005efa:	6823      	ldr	r3, [r4, #0]
 8005efc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005efe:	e7f4      	b.n	8005eea <_ZN8touchgfx3HAL9taskEntryEv+0x10>

08005f00 <_ZN8touchgfx3HAL4tickEv>:
 8005f00:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8005f02:	6803      	ldr	r3, [r0, #0]
 8005f04:	4d62      	ldr	r5, [pc, #392]	@ (8006090 <_ZN8touchgfx3HAL4tickEv+0x190>)
 8005f06:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005f0a:	4604      	mov	r4, r0
 8005f0c:	4798      	blx	r3
 8005f0e:	2800      	cmp	r0, #0
 8005f10:	f000 809e 	beq.w	8006050 <_ZN8touchgfx3HAL4tickEv+0x150>
 8005f14:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 8005f18:	2b02      	cmp	r3, #2
 8005f1a:	d002      	beq.n	8005f22 <_ZN8touchgfx3HAL4tickEv+0x22>
 8005f1c:	2001      	movs	r0, #1
 8005f1e:	f7fa fc13 	bl	8000748 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8005f22:	f894 306a 	ldrb.w	r3, [r4, #106]	@ 0x6a
 8005f26:	f884 306b 	strb.w	r3, [r4, #107]	@ 0x6b
 8005f2a:	f894 3079 	ldrb.w	r3, [r4, #121]	@ 0x79
 8005f2e:	2600      	movs	r6, #0
 8005f30:	f884 606a 	strb.w	r6, [r4, #106]	@ 0x6a
 8005f34:	f884 604b 	strb.w	r6, [r4, #75]	@ 0x4b
 8005f38:	b133      	cbz	r3, 8005f48 <_ZN8touchgfx3HAL4tickEv+0x48>
 8005f3a:	6823      	ldr	r3, [r4, #0]
 8005f3c:	4620      	mov	r0, r4
 8005f3e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8005f42:	4798      	blx	r3
 8005f44:	f884 6079 	strb.w	r6, [r4, #121]	@ 0x79
 8005f48:	f894 304a 	ldrb.w	r3, [r4, #74]	@ 0x4a
 8005f4c:	6862      	ldr	r2, [r4, #4]
 8005f4e:	f083 0301 	eor.w	r3, r3, #1
 8005f52:	7253      	strb	r3, [r2, #9]
 8005f54:	2601      	movs	r6, #1
 8005f56:	702e      	strb	r6, [r5, #0]
 8005f58:	f001 fd74 	bl	8007a44 <_ZN8touchgfx11Application11getInstanceEv>
 8005f5c:	6803      	ldr	r3, [r0, #0]
 8005f5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f60:	4798      	blx	r3
 8005f62:	f894 306b 	ldrb.w	r3, [r4, #107]	@ 0x6b
 8005f66:	b90b      	cbnz	r3, 8005f6c <_ZN8touchgfx3HAL4tickEv+0x6c>
 8005f68:	f884 606b 	strb.w	r6, [r4, #107]	@ 0x6b
 8005f6c:	f001 fd6a 	bl	8007a44 <_ZN8touchgfx11Application11getInstanceEv>
 8005f70:	6803      	ldr	r3, [r0, #0]
 8005f72:	695b      	ldr	r3, [r3, #20]
 8005f74:	4798      	blx	r3
 8005f76:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8005f78:	6803      	ldr	r3, [r0, #0]
 8005f7a:	691b      	ldr	r3, [r3, #16]
 8005f7c:	4798      	blx	r3
 8005f7e:	f894 306b 	ldrb.w	r3, [r4, #107]	@ 0x6b
 8005f82:	f894 206c 	ldrb.w	r2, [r4, #108]	@ 0x6c
 8005f86:	3b01      	subs	r3, #1
 8005f88:	b2db      	uxtb	r3, r3
 8005f8a:	f884 306b 	strb.w	r3, [r4, #107]	@ 0x6b
 8005f8e:	b10a      	cbz	r2, 8005f94 <_ZN8touchgfx3HAL4tickEv+0x94>
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d1eb      	bne.n	8005f6c <_ZN8touchgfx3HAL4tickEv+0x6c>
 8005f94:	4a3f      	ldr	r2, [pc, #252]	@ (8006094 <_ZN8touchgfx3HAL4tickEv+0x194>)
 8005f96:	f994 1068 	ldrsb.w	r1, [r4, #104]	@ 0x68
 8005f9a:	7813      	ldrb	r3, [r2, #0]
 8005f9c:	3301      	adds	r3, #1
 8005f9e:	b25b      	sxtb	r3, r3
 8005fa0:	4299      	cmp	r1, r3
 8005fa2:	7013      	strb	r3, [r2, #0]
 8005fa4:	dc10      	bgt.n	8005fc8 <_ZN8touchgfx3HAL4tickEv+0xc8>
 8005fa6:	68e0      	ldr	r0, [r4, #12]
 8005fa8:	2300      	movs	r3, #0
 8005faa:	7013      	strb	r3, [r2, #0]
 8005fac:	6803      	ldr	r3, [r0, #0]
 8005fae:	aa03      	add	r2, sp, #12
 8005fb0:	68db      	ldr	r3, [r3, #12]
 8005fb2:	a902      	add	r1, sp, #8
 8005fb4:	4798      	blx	r3
 8005fb6:	6823      	ldr	r3, [r4, #0]
 8005fb8:	2800      	cmp	r0, #0
 8005fba:	d059      	beq.n	8006070 <_ZN8touchgfx3HAL4tickEv+0x170>
 8005fbc:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8005fc0:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8005fc4:	4620      	mov	r0, r4
 8005fc6:	4798      	blx	r3
 8005fc8:	6960      	ldr	r0, [r4, #20]
 8005fca:	2300      	movs	r3, #0
 8005fcc:	f88d 3007 	strb.w	r3, [sp, #7]
 8005fd0:	b158      	cbz	r0, 8005fea <_ZN8touchgfx3HAL4tickEv+0xea>
 8005fd2:	6803      	ldr	r3, [r0, #0]
 8005fd4:	f10d 0107 	add.w	r1, sp, #7
 8005fd8:	68db      	ldr	r3, [r3, #12]
 8005fda:	4798      	blx	r3
 8005fdc:	b128      	cbz	r0, 8005fea <_ZN8touchgfx3HAL4tickEv+0xea>
 8005fde:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8005fe0:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8005fe4:	6803      	ldr	r3, [r0, #0]
 8005fe6:	68db      	ldr	r3, [r3, #12]
 8005fe8:	4798      	blx	r3
 8005fea:	f104 001c 	add.w	r0, r4, #28
 8005fee:	f004 ffdb 	bl	800afa8 <_ZN8touchgfx8Gestures4tickEv>
 8005ff2:	f894 3070 	ldrb.w	r3, [r4, #112]	@ 0x70
 8005ff6:	b30b      	cbz	r3, 800603c <_ZN8touchgfx3HAL4tickEv+0x13c>
 8005ff8:	6920      	ldr	r0, [r4, #16]
 8005ffa:	6803      	ldr	r3, [r0, #0]
 8005ffc:	691b      	ldr	r3, [r3, #16]
 8005ffe:	4798      	blx	r3
 8006000:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8006002:	4606      	mov	r6, r0
 8006004:	b903      	cbnz	r3, 8006008 <_ZN8touchgfx3HAL4tickEv+0x108>
 8006006:	6760      	str	r0, [r4, #116]	@ 0x74
 8006008:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 800600a:	4a23      	ldr	r2, [pc, #140]	@ (8006098 <_ZN8touchgfx3HAL4tickEv+0x198>)
 800600c:	1af3      	subs	r3, r6, r3
 800600e:	4293      	cmp	r3, r2
 8006010:	d914      	bls.n	800603c <_ZN8touchgfx3HAL4tickEv+0x13c>
 8006012:	6920      	ldr	r0, [r4, #16]
 8006014:	6803      	ldr	r3, [r0, #0]
 8006016:	699b      	ldr	r3, [r3, #24]
 8006018:	4798      	blx	r3
 800601a:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 800601c:	2264      	movs	r2, #100	@ 0x64
 800601e:	1af3      	subs	r3, r6, r3
 8006020:	fbb3 f3f2 	udiv	r3, r3, r2
 8006024:	fbb0 f0f3 	udiv	r0, r0, r3
 8006028:	2800      	cmp	r0, #0
 800602a:	dc26      	bgt.n	800607a <_ZN8touchgfx3HAL4tickEv+0x17a>
 800602c:	f884 2069 	strb.w	r2, [r4, #105]	@ 0x69
 8006030:	6920      	ldr	r0, [r4, #16]
 8006032:	6803      	ldr	r3, [r0, #0]
 8006034:	2100      	movs	r1, #0
 8006036:	69db      	ldr	r3, [r3, #28]
 8006038:	4798      	blx	r3
 800603a:	6766      	str	r6, [r4, #116]	@ 0x74
 800603c:	6823      	ldr	r3, [r4, #0]
 800603e:	4620      	mov	r0, r4
 8006040:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006044:	4798      	blx	r3
 8006046:	f001 fcfd 	bl	8007a44 <_ZN8touchgfx11Application11getInstanceEv>
 800604a:	6803      	ldr	r3, [r0, #0]
 800604c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800604e:	4798      	blx	r3
 8006050:	6823      	ldr	r3, [r4, #0]
 8006052:	4620      	mov	r0, r4
 8006054:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8006058:	4798      	blx	r3
 800605a:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800605e:	2b02      	cmp	r3, #2
 8006060:	d002      	beq.n	8006068 <_ZN8touchgfx3HAL4tickEv+0x168>
 8006062:	2001      	movs	r0, #1
 8006064:	f7fa fb9a 	bl	800079c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8006068:	2300      	movs	r3, #0
 800606a:	702b      	strb	r3, [r5, #0]
 800606c:	b004      	add	sp, #16
 800606e:	bd70      	pop	{r4, r5, r6, pc}
 8006070:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8006074:	4620      	mov	r0, r4
 8006076:	4798      	blx	r3
 8006078:	e7a6      	b.n	8005fc8 <_ZN8touchgfx3HAL4tickEv+0xc8>
 800607a:	2863      	cmp	r0, #99	@ 0x63
 800607c:	bfcb      	itete	gt
 800607e:	2300      	movgt	r3, #0
 8006080:	f1c0 0064 	rsble	r0, r0, #100	@ 0x64
 8006084:	f884 3069 	strbgt.w	r3, [r4, #105]	@ 0x69
 8006088:	f884 0069 	strble.w	r0, [r4, #105]	@ 0x69
 800608c:	e7d0      	b.n	8006030 <_ZN8touchgfx3HAL4tickEv+0x130>
 800608e:	bf00      	nop
 8006090:	2000917c 	.word	0x2000917c
 8006094:	2000917d 	.word	0x2000917d
 8006098:	05f5e100 	.word	0x05f5e100

0800609c <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 800609c:	b510      	push	{r4, lr}
 800609e:	4604      	mov	r4, r0
 80060a0:	f7fa fe18 	bl	8000cd4 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>
 80060a4:	6863      	ldr	r3, [r4, #4]
 80060a6:	2200      	movs	r2, #0
 80060a8:	729a      	strb	r2, [r3, #10]
 80060aa:	bd10      	pop	{r4, pc}

080060ac <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 80060ac:	65c1      	str	r1, [r0, #92]	@ 0x5c
 80060ae:	301c      	adds	r0, #28
 80060b0:	f004 bf78 	b.w	800afa4 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

080060b4 <_ZN8touchgfx3HAL5touchEll>:
 80060b4:	b530      	push	{r4, r5, lr}
 80060b6:	b087      	sub	sp, #28
 80060b8:	4604      	mov	r4, r0
 80060ba:	a804      	add	r0, sp, #16
 80060bc:	e9cd 1204 	strd	r1, r2, [sp, #16]
 80060c0:	f001 fc1a 	bl	80078f8 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 80060c4:	9b04      	ldr	r3, [sp, #16]
 80060c6:	f8ad 300c 	strh.w	r3, [sp, #12]
 80060ca:	a906      	add	r1, sp, #24
 80060cc:	9b05      	ldr	r3, [sp, #20]
 80060ce:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 80060d2:	a803      	add	r0, sp, #12
 80060d4:	f001 fc62 	bl	800799c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 80060d8:	f894 106f 	ldrb.w	r1, [r4, #111]	@ 0x6f
 80060dc:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 80060e0:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80060e4:	f104 001c 	add.w	r0, r4, #28
 80060e8:	b189      	cbz	r1, 800610e <_ZN8touchgfx3HAL5touchEll+0x5a>
 80060ea:	f8b4 5064 	ldrh.w	r5, [r4, #100]	@ 0x64
 80060ee:	9300      	str	r3, [sp, #0]
 80060f0:	f8b4 1060 	ldrh.w	r1, [r4, #96]	@ 0x60
 80060f4:	4613      	mov	r3, r2
 80060f6:	462a      	mov	r2, r5
 80060f8:	f004 ff64 	bl	800afc4 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 80060fc:	b128      	cbz	r0, 800610a <_ZN8touchgfx3HAL5touchEll+0x56>
 80060fe:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8006102:	6623      	str	r3, [r4, #96]	@ 0x60
 8006104:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8006108:	6663      	str	r3, [r4, #100]	@ 0x64
 800610a:	b007      	add	sp, #28
 800610c:	bd30      	pop	{r4, r5, pc}
 800610e:	f004 ff99 	bl	800b044 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8006112:	2301      	movs	r3, #1
 8006114:	f884 306f 	strb.w	r3, [r4, #111]	@ 0x6f
 8006118:	e7f1      	b.n	80060fe <_ZN8touchgfx3HAL5touchEll+0x4a>

0800611a <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 800611a:	b510      	push	{r4, lr}
 800611c:	2b00      	cmp	r3, #0
 800611e:	d046      	beq.n	80061ae <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8006120:	ea81 0002 	eor.w	r0, r1, r2
 8006124:	07c4      	lsls	r4, r0, #31
 8006126:	d508      	bpl.n	800613a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 8006128:	440b      	add	r3, r1
 800612a:	3a01      	subs	r2, #1
 800612c:	428b      	cmp	r3, r1
 800612e:	d93e      	bls.n	80061ae <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8006130:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8006134:	f801 0b01 	strb.w	r0, [r1], #1
 8006138:	e7f8      	b.n	800612c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 800613a:	07d0      	lsls	r0, r2, #31
 800613c:	bf42      	ittt	mi
 800613e:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 8006142:	f801 0b01 	strbmi.w	r0, [r1], #1
 8006146:	f103 33ff 	addmi.w	r3, r3, #4294967295
 800614a:	2b01      	cmp	r3, #1
 800614c:	d911      	bls.n	8006172 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 800614e:	ea81 0402 	eor.w	r4, r1, r2
 8006152:	07a4      	lsls	r4, r4, #30
 8006154:	4610      	mov	r0, r2
 8006156:	d022      	beq.n	800619e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 8006158:	f023 0401 	bic.w	r4, r3, #1
 800615c:	440c      	add	r4, r1
 800615e:	428c      	cmp	r4, r1
 8006160:	4602      	mov	r2, r0
 8006162:	d904      	bls.n	800616e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 8006164:	8812      	ldrh	r2, [r2, #0]
 8006166:	f821 2b02 	strh.w	r2, [r1], #2
 800616a:	3002      	adds	r0, #2
 800616c:	e7f7      	b.n	800615e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 800616e:	f003 0301 	and.w	r3, r3, #1
 8006172:	f023 0003 	bic.w	r0, r3, #3
 8006176:	4408      	add	r0, r1
 8006178:	4288      	cmp	r0, r1
 800617a:	4614      	mov	r4, r2
 800617c:	d904      	bls.n	8006188 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 800617e:	6824      	ldr	r4, [r4, #0]
 8006180:	f841 4b04 	str.w	r4, [r1], #4
 8006184:	3204      	adds	r2, #4
 8006186:	e7f7      	b.n	8006178 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 8006188:	f003 0303 	and.w	r3, r3, #3
 800618c:	440b      	add	r3, r1
 800618e:	3a01      	subs	r2, #1
 8006190:	428b      	cmp	r3, r1
 8006192:	d90c      	bls.n	80061ae <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8006194:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8006198:	f801 0b01 	strb.w	r0, [r1], #1
 800619c:	e7f8      	b.n	8006190 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 800619e:	0790      	lsls	r0, r2, #30
 80061a0:	d0e7      	beq.n	8006172 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 80061a2:	f832 0b02 	ldrh.w	r0, [r2], #2
 80061a6:	f821 0b02 	strh.w	r0, [r1], #2
 80061aa:	3b02      	subs	r3, #2
 80061ac:	e7e1      	b.n	8006172 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 80061ae:	2001      	movs	r0, #1
 80061b0:	bd10      	pop	{r4, pc}

080061b2 <_ZN8touchgfx3HAL7noTouchEv>:
 80061b2:	b510      	push	{r4, lr}
 80061b4:	f890 306f 	ldrb.w	r3, [r0, #111]	@ 0x6f
 80061b8:	4604      	mov	r4, r0
 80061ba:	b153      	cbz	r3, 80061d2 <_ZN8touchgfx3HAL7noTouchEv+0x20>
 80061bc:	f8b0 3064 	ldrh.w	r3, [r0, #100]	@ 0x64
 80061c0:	f8b0 2060 	ldrh.w	r2, [r0, #96]	@ 0x60
 80061c4:	2101      	movs	r1, #1
 80061c6:	301c      	adds	r0, #28
 80061c8:	f004 ff3c 	bl	800b044 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 80061cc:	2300      	movs	r3, #0
 80061ce:	f884 306f 	strb.w	r3, [r4, #111]	@ 0x6f
 80061d2:	bd10      	pop	{r4, pc}

080061d4 <_ZN8touchgfx8Drawable5setXYEss>:
 80061d4:	b570      	push	{r4, r5, r6, lr}
 80061d6:	6803      	ldr	r3, [r0, #0]
 80061d8:	4604      	mov	r4, r0
 80061da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061dc:	4615      	mov	r5, r2
 80061de:	4798      	blx	r3
 80061e0:	6823      	ldr	r3, [r4, #0]
 80061e2:	4629      	mov	r1, r5
 80061e4:	4620      	mov	r0, r4
 80061e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80061ec:	4718      	bx	r3
	...

080061f0 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 80061f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80061f4:	b085      	sub	sp, #20
 80061f6:	ad04      	add	r5, sp, #16
 80061f8:	4604      	mov	r4, r0
 80061fa:	2000      	movs	r0, #0
 80061fc:	f845 0d04 	str.w	r0, [r5, #-4]!
 8006200:	69a0      	ldr	r0, [r4, #24]
 8006202:	6806      	ldr	r6, [r0, #0]
 8006204:	9501      	str	r5, [sp, #4]
 8006206:	f8bd 5030 	ldrh.w	r5, [sp, #48]	@ 0x30
 800620a:	9500      	str	r5, [sp, #0]
 800620c:	6835      	ldr	r5, [r6, #0]
 800620e:	4699      	mov	r9, r3
 8006210:	460f      	mov	r7, r1
 8006212:	4690      	mov	r8, r2
 8006214:	47a8      	blx	r5
 8006216:	4d10      	ldr	r5, [pc, #64]	@ (8006258 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
 8006218:	4606      	mov	r6, r0
 800621a:	f8a5 9000 	strh.w	r9, [r5]
 800621e:	f7fb fa3f 	bl	80016a0 <_ZN8touchgfx3HAL3lcdEv>
 8006222:	6803      	ldr	r3, [r0, #0]
 8006224:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006226:	4798      	blx	r3
 8006228:	b128      	cbz	r0, 8006236 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
 800622a:	2801      	cmp	r0, #1
 800622c:	d00b      	beq.n	8006246 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
 800622e:	4630      	mov	r0, r6
 8006230:	b005      	add	sp, #20
 8006232:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006236:	882b      	ldrh	r3, [r5, #0]
 8006238:	fb08 7203 	mla	r2, r8, r3, r7
 800623c:	9b03      	ldr	r3, [sp, #12]
 800623e:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8006242:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8006244:	e7f3      	b.n	800622e <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 8006246:	882a      	ldrh	r2, [r5, #0]
 8006248:	9b03      	ldr	r3, [sp, #12]
 800624a:	fb08 7202 	mla	r2, r8, r2, r7
 800624e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8006252:	1a9a      	subs	r2, r3, r2
 8006254:	63e2      	str	r2, [r4, #60]	@ 0x3c
 8006256:	e7ea      	b.n	800622e <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 8006258:	20009172 	.word	0x20009172

0800625c <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs>:
 800625c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800625e:	4b15      	ldr	r3, [pc, #84]	@ (80062b4 <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x58>)
 8006260:	f890 407d 	ldrb.w	r4, [r0, #125]	@ 0x7d
 8006264:	881b      	ldrh	r3, [r3, #0]
 8006266:	6bc5      	ldr	r5, [r0, #60]	@ 0x3c
 8006268:	fb93 f4f4 	sdiv	r4, r3, r4
 800626c:	460f      	mov	r7, r1
 800626e:	4606      	mov	r6, r0
 8006270:	f7fb fa16 	bl	80016a0 <_ZN8touchgfx3HAL3lcdEv>
 8006274:	6803      	ldr	r3, [r0, #0]
 8006276:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006278:	4798      	blx	r3
 800627a:	2801      	cmp	r0, #1
 800627c:	d00b      	beq.n	8006296 <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x3a>
 800627e:	d303      	bcc.n	8006288 <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x2c>
 8006280:	2802      	cmp	r0, #2
 8006282:	d010      	beq.n	80062a6 <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x4a>
 8006284:	63f5      	str	r5, [r6, #60]	@ 0x3c
 8006286:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006288:	4b0b      	ldr	r3, [pc, #44]	@ (80062b8 <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x5c>)
 800628a:	8819      	ldrh	r1, [r3, #0]
 800628c:	437c      	muls	r4, r7
 800628e:	434c      	muls	r4, r1
 8006290:	eba5 0544 	sub.w	r5, r5, r4, lsl #1
 8006294:	e7f6      	b.n	8006284 <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x28>
 8006296:	4b08      	ldr	r3, [pc, #32]	@ (80062b8 <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x5c>)
 8006298:	8819      	ldrh	r1, [r3, #0]
 800629a:	437c      	muls	r4, r7
 800629c:	434c      	muls	r4, r1
 800629e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80062a2:	1b2d      	subs	r5, r5, r4
 80062a4:	e7ee      	b.n	8006284 <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x28>
 80062a6:	4b04      	ldr	r3, [pc, #16]	@ (80062b8 <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x5c>)
 80062a8:	8819      	ldrh	r1, [r3, #0]
 80062aa:	437c      	muls	r4, r7
 80062ac:	434c      	muls	r4, r1
 80062ae:	eba5 0584 	sub.w	r5, r5, r4, lsl #2
 80062b2:	e7e7      	b.n	8006284 <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x28>
 80062b4:	20009174 	.word	0x20009174
 80062b8:	20009172 	.word	0x20009172

080062bc <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 80062bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80062be:	b08b      	sub	sp, #44	@ 0x2c
 80062c0:	4617      	mov	r7, r2
 80062c2:	4604      	mov	r4, r0
 80062c4:	460e      	mov	r6, r1
 80062c6:	461d      	mov	r5, r3
 80062c8:	f7fb f9ea 	bl	80016a0 <_ZN8touchgfx3HAL3lcdEv>
 80062cc:	6803      	ldr	r3, [r0, #0]
 80062ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062d0:	4798      	blx	r3
 80062d2:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 80062d6:	9007      	str	r0, [sp, #28]
 80062d8:	e9cd 0308 	strd	r0, r3, [sp, #32]
 80062dc:	4b0d      	ldr	r3, [pc, #52]	@ (8006314 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 80062de:	6822      	ldr	r2, [r4, #0]
 80062e0:	881b      	ldrh	r3, [r3, #0]
 80062e2:	9306      	str	r3, [sp, #24]
 80062e4:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 80062e8:	9305      	str	r3, [sp, #20]
 80062ea:	f89d 304c 	ldrb.w	r3, [sp, #76]	@ 0x4c
 80062ee:	9304      	str	r3, [sp, #16]
 80062f0:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 80062f4:	9303      	str	r3, [sp, #12]
 80062f6:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 80062fa:	9302      	str	r3, [sp, #8]
 80062fc:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 8006300:	e9cd 5300 	strd	r5, r3, [sp]
 8006304:	4631      	mov	r1, r6
 8006306:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 8006308:	463b      	mov	r3, r7
 800630a:	2200      	movs	r2, #0
 800630c:	4620      	mov	r0, r4
 800630e:	47a8      	blx	r5
 8006310:	b00b      	add	sp, #44	@ 0x2c
 8006312:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006314:	20009172 	.word	0x20009172

08006318 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 8006318:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800631c:	4698      	mov	r8, r3
 800631e:	6803      	ldr	r3, [r0, #0]
 8006320:	6c1d      	ldr	r5, [r3, #64]	@ 0x40
 8006322:	4b15      	ldr	r3, [pc, #84]	@ (8006378 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 8006324:	b08b      	sub	sp, #44	@ 0x2c
 8006326:	4617      	mov	r7, r2
 8006328:	f8b3 9000 	ldrh.w	r9, [r3]
 800632c:	460e      	mov	r6, r1
 800632e:	4604      	mov	r4, r0
 8006330:	f7fb f9b6 	bl	80016a0 <_ZN8touchgfx3HAL3lcdEv>
 8006334:	6803      	ldr	r3, [r0, #0]
 8006336:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006338:	4798      	blx	r3
 800633a:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 800633e:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8006342:	2302      	movs	r3, #2
 8006344:	e9cd 9306 	strd	r9, r3, [sp, #24]
 8006348:	2301      	movs	r3, #1
 800634a:	9305      	str	r3, [sp, #20]
 800634c:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 8006350:	9304      	str	r3, [sp, #16]
 8006352:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 8006356:	9303      	str	r3, [sp, #12]
 8006358:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 800635c:	9302      	str	r3, [sp, #8]
 800635e:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8006362:	2200      	movs	r2, #0
 8006364:	e9cd 8300 	strd	r8, r3, [sp]
 8006368:	4631      	mov	r1, r6
 800636a:	463b      	mov	r3, r7
 800636c:	4620      	mov	r0, r4
 800636e:	47a8      	blx	r5
 8006370:	b00b      	add	sp, #44	@ 0x2c
 8006372:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006376:	bf00      	nop
 8006378:	20009172 	.word	0x20009172

0800637c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 800637c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006380:	4698      	mov	r8, r3
 8006382:	6803      	ldr	r3, [r0, #0]
 8006384:	6ddd      	ldr	r5, [r3, #92]	@ 0x5c
 8006386:	4b11      	ldr	r3, [pc, #68]	@ (80063cc <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 8006388:	b087      	sub	sp, #28
 800638a:	f8b3 9000 	ldrh.w	r9, [r3]
 800638e:	460e      	mov	r6, r1
 8006390:	4617      	mov	r7, r2
 8006392:	4604      	mov	r4, r0
 8006394:	f7fb f984 	bl	80016a0 <_ZN8touchgfx3HAL3lcdEv>
 8006398:	6803      	ldr	r3, [r0, #0]
 800639a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800639c:	4798      	blx	r3
 800639e:	f89d 3044 	ldrb.w	r3, [sp, #68]	@ 0x44
 80063a2:	f8cd 900c 	str.w	r9, [sp, #12]
 80063a6:	e9cd 0304 	strd	r0, r3, [sp, #16]
 80063aa:	f89d 3040 	ldrb.w	r3, [sp, #64]	@ 0x40
 80063ae:	9302      	str	r3, [sp, #8]
 80063b0:	f8bd 303c 	ldrh.w	r3, [sp, #60]	@ 0x3c
 80063b4:	9301      	str	r3, [sp, #4]
 80063b6:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 80063ba:	9300      	str	r3, [sp, #0]
 80063bc:	463a      	mov	r2, r7
 80063be:	4643      	mov	r3, r8
 80063c0:	4631      	mov	r1, r6
 80063c2:	4620      	mov	r0, r4
 80063c4:	47a8      	blx	r5
 80063c6:	b007      	add	sp, #28
 80063c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80063cc:	20009172 	.word	0x20009172

080063d0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 80063d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063d4:	4604      	mov	r4, r0
 80063d6:	b08f      	sub	sp, #60	@ 0x3c
 80063d8:	4610      	mov	r0, r2
 80063da:	460d      	mov	r5, r1
 80063dc:	4691      	mov	r9, r2
 80063de:	461e      	mov	r6, r3
 80063e0:	f002 fc54 	bl	8008c8c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 80063e4:	2800      	cmp	r0, #0
 80063e6:	f000 809d 	beq.w	8006524 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
 80063ea:	6823      	ldr	r3, [r4, #0]
 80063ec:	f8df b198 	ldr.w	fp, [pc, #408]	@ 8006588 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 80063f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063f2:	f8df a198 	ldr.w	sl, [pc, #408]	@ 800658c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
 80063f6:	4f61      	ldr	r7, [pc, #388]	@ (800657c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 80063f8:	4620      	mov	r0, r4
 80063fa:	4798      	blx	r3
 80063fc:	6823      	ldr	r3, [r4, #0]
 80063fe:	4620      	mov	r0, r4
 8006400:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006402:	4798      	blx	r3
 8006404:	f8bb 3000 	ldrh.w	r3, [fp]
 8006408:	9301      	str	r3, [sp, #4]
 800640a:	f10d 0838 	add.w	r8, sp, #56	@ 0x38
 800640e:	f8ba 3000 	ldrh.w	r3, [sl]
 8006412:	9302      	str	r3, [sp, #8]
 8006414:	883b      	ldrh	r3, [r7, #0]
 8006416:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 800641a:	9303      	str	r3, [sp, #12]
 800641c:	4b58      	ldr	r3, [pc, #352]	@ (8006580 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 800641e:	9305      	str	r3, [sp, #20]
 8006420:	881a      	ldrh	r2, [r3, #0]
 8006422:	9204      	str	r2, [sp, #16]
 8006424:	4640      	mov	r0, r8
 8006426:	f002 fc3d 	bl	8008ca4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800642a:	8038      	strh	r0, [r7, #0]
 800642c:	4640      	mov	r0, r8
 800642e:	f002 fc6d 	bl	8008d0c <_ZNK8touchgfx6Bitmap9getHeightEv>
 8006432:	9b05      	ldr	r3, [sp, #20]
 8006434:	b280      	uxth	r0, r0
 8006436:	8018      	strh	r0, [r3, #0]
 8006438:	4b52      	ldr	r3, [pc, #328]	@ (8006584 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 800643a:	781b      	ldrb	r3, [r3, #0]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d174      	bne.n	800652a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 8006440:	883b      	ldrh	r3, [r7, #0]
 8006442:	f8ab 3000 	strh.w	r3, [fp]
 8006446:	f8aa 0000 	strh.w	r0, [sl]
 800644a:	4648      	mov	r0, r9
 800644c:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	@ 0x3c
 8006450:	f002 fc1c 	bl	8008c8c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8006454:	e9c4 000f 	strd	r0, r0, [r4, #60]	@ 0x3c
 8006458:	2200      	movs	r2, #0
 800645a:	4611      	mov	r1, r2
 800645c:	4628      	mov	r0, r5
 800645e:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 8006462:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 8006466:	f7ff feb5 	bl	80061d4 <_ZN8touchgfx8Drawable5setXYEss>
 800646a:	2301      	movs	r3, #1
 800646c:	f895 b025 	ldrb.w	fp, [r5, #37]	@ 0x25
 8006470:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 8006474:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8006478:	2b00      	cmp	r3, #0
 800647a:	dd5c      	ble.n	8006536 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 800647c:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8006480:	2b00      	cmp	r3, #0
 8006482:	dd58      	ble.n	8006536 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 8006484:	462a      	mov	r2, r5
 8006486:	ab0a      	add	r3, sp, #40	@ 0x28
 8006488:	f852 0f04 	ldr.w	r0, [r2, #4]!
 800648c:	6851      	ldr	r1, [r2, #4]
 800648e:	c303      	stmia	r3!, {r0, r1}
 8006490:	4631      	mov	r1, r6
 8006492:	a80a      	add	r0, sp, #40	@ 0x28
 8006494:	f7ff fc5c 	bl	8005d50 <_ZN8touchgfx4RectaNERKS0_>
 8006498:	4b38      	ldr	r3, [pc, #224]	@ (800657c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800649a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800649e:	f8ad 2034 	strh.w	r2, [sp, #52]	@ 0x34
 80064a2:	2100      	movs	r1, #0
 80064a4:	aa0a      	add	r2, sp, #40	@ 0x28
 80064a6:	4b36      	ldr	r3, [pc, #216]	@ (8006580 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 80064a8:	910c      	str	r1, [sp, #48]	@ 0x30
 80064aa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80064ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80064b2:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 80064b6:	ab08      	add	r3, sp, #32
 80064b8:	e883 0003 	stmia.w	r3, {r0, r1}
 80064bc:	4618      	mov	r0, r3
 80064be:	a90c      	add	r1, sp, #48	@ 0x30
 80064c0:	f7ff fc46 	bl	8005d50 <_ZN8touchgfx4RectaNERKS0_>
 80064c4:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d13c      	bne.n	8006544 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
 80064ca:	2000      	movs	r0, #0
 80064cc:	f884 0058 	strb.w	r0, [r4, #88]	@ 0x58
 80064d0:	2600      	movs	r6, #0
 80064d2:	682a      	ldr	r2, [r5, #0]
 80064d4:	696b      	ldr	r3, [r5, #20]
 80064d6:	616e      	str	r6, [r5, #20]
 80064d8:	9305      	str	r3, [sp, #20]
 80064da:	6892      	ldr	r2, [r2, #8]
 80064dc:	a908      	add	r1, sp, #32
 80064de:	4628      	mov	r0, r5
 80064e0:	4790      	blx	r2
 80064e2:	9b05      	ldr	r3, [sp, #20]
 80064e4:	616b      	str	r3, [r5, #20]
 80064e6:	4652      	mov	r2, sl
 80064e8:	f884 6058 	strb.w	r6, [r4, #88]	@ 0x58
 80064ec:	4649      	mov	r1, r9
 80064ee:	4628      	mov	r0, r5
 80064f0:	f885 b025 	strb.w	fp, [r5, #37]	@ 0x25
 80064f4:	f7ff fe6e 	bl	80061d4 <_ZN8touchgfx8Drawable5setXYEss>
 80064f8:	4b23      	ldr	r3, [pc, #140]	@ (8006588 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 80064fa:	9a01      	ldr	r2, [sp, #4]
 80064fc:	801a      	strh	r2, [r3, #0]
 80064fe:	4b23      	ldr	r3, [pc, #140]	@ (800658c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
 8006500:	9a02      	ldr	r2, [sp, #8]
 8006502:	801a      	strh	r2, [r3, #0]
 8006504:	4b1d      	ldr	r3, [pc, #116]	@ (800657c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8006506:	9a03      	ldr	r2, [sp, #12]
 8006508:	801a      	strh	r2, [r3, #0]
 800650a:	4b1d      	ldr	r3, [pc, #116]	@ (8006580 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 800650c:	9a04      	ldr	r2, [sp, #16]
 800650e:	801a      	strh	r2, [r3, #0]
 8006510:	e9c4 870f 	strd	r8, r7, [r4, #60]	@ 0x3c
 8006514:	6823      	ldr	r3, [r4, #0]
 8006516:	4620      	mov	r0, r4
 8006518:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800651a:	4798      	blx	r3
 800651c:	6823      	ldr	r3, [r4, #0]
 800651e:	4620      	mov	r0, r4
 8006520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006522:	4798      	blx	r3
 8006524:	b00f      	add	sp, #60	@ 0x3c
 8006526:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800652a:	883b      	ldrh	r3, [r7, #0]
 800652c:	f8ab 0000 	strh.w	r0, [fp]
 8006530:	f8aa 3000 	strh.w	r3, [sl]
 8006534:	e789      	b.n	800644a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 8006536:	462a      	mov	r2, r5
 8006538:	ab0a      	add	r3, sp, #40	@ 0x28
 800653a:	f852 0f04 	ldr.w	r0, [r2, #4]!
 800653e:	6851      	ldr	r1, [r2, #4]
 8006540:	c303      	stmia	r3!, {r0, r1}
 8006542:	e7a9      	b.n	8006498 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
 8006544:	a807      	add	r0, sp, #28
 8006546:	f002 fd23 	bl	8008f90 <_ZNK8touchgfx6Bitmap9getFormatEv>
 800654a:	4606      	mov	r6, r0
 800654c:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 800654e:	6803      	ldr	r3, [r0, #0]
 8006550:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006552:	4798      	blx	r3
 8006554:	4286      	cmp	r6, r0
 8006556:	d1b8      	bne.n	80064ca <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 8006558:	f7fb f8a2 	bl	80016a0 <_ZN8touchgfx3HAL3lcdEv>
 800655c:	6803      	ldr	r3, [r0, #0]
 800655e:	4606      	mov	r6, r0
 8006560:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006562:	9305      	str	r3, [sp, #20]
 8006564:	a807      	add	r0, sp, #28
 8006566:	f002 fd13 	bl	8008f90 <_ZNK8touchgfx6Bitmap9getFormatEv>
 800656a:	9b05      	ldr	r3, [sp, #20]
 800656c:	4601      	mov	r1, r0
 800656e:	4630      	mov	r0, r6
 8006570:	4798      	blx	r3
 8006572:	f080 0001 	eor.w	r0, r0, #1
 8006576:	b2c0      	uxtb	r0, r0
 8006578:	e7a8      	b.n	80064cc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
 800657a:	bf00      	nop
 800657c:	2000916c 	.word	0x2000916c
 8006580:	2000916e 	.word	0x2000916e
 8006584:	20009170 	.word	0x20009170
 8006588:	20009172 	.word	0x20009172
 800658c:	20009174 	.word	0x20009174

08006590 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 8006590:	b510      	push	{r4, lr}
 8006592:	4b07      	ldr	r3, [pc, #28]	@ (80065b0 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 8006594:	781b      	ldrb	r3, [r3, #0]
 8006596:	4604      	mov	r4, r0
 8006598:	b13b      	cbz	r3, 80065aa <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 800659a:	6803      	ldr	r3, [r0, #0]
 800659c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800659e:	4798      	blx	r3
 80065a0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80065a2:	4283      	cmp	r3, r0
 80065a4:	d101      	bne.n	80065aa <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 80065a6:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 80065a8:	bd10      	pop	{r4, pc}
 80065aa:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 80065ac:	e7fc      	b.n	80065a8 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 80065ae:	bf00      	nop
 80065b0:	20009176 	.word	0x20009176

080065b4 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 80065b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065b8:	b08a      	sub	sp, #40	@ 0x28
 80065ba:	461d      	mov	r5, r3
 80065bc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80065c0:	e9cd 3101 	strd	r3, r1, [sp, #4]
 80065c4:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 80065c8:	f8ad 3018 	strh.w	r3, [sp, #24]
 80065cc:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 80065d0:	f8ad 301a 	strh.w	r3, [sp, #26]
 80065d4:	2400      	movs	r4, #0
 80065d6:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 80065da:	f8bd 604c 	ldrh.w	r6, [sp, #76]	@ 0x4c
 80065de:	f8ad 301c 	strh.w	r3, [sp, #28]
 80065e2:	4690      	mov	r8, r2
 80065e4:	4607      	mov	r7, r0
 80065e6:	9404      	str	r4, [sp, #16]
 80065e8:	f88d 4020 	strb.w	r4, [sp, #32]
 80065ec:	f7ff ffd0 	bl	8006590 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80065f0:	fb06 8505 	mla	r5, r6, r5, r8
 80065f4:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 80065f8:	6878      	ldr	r0, [r7, #4]
 80065fa:	9505      	str	r5, [sp, #20]
 80065fc:	f8ad 601e 	strh.w	r6, [sp, #30]
 8006600:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 8006604:	f88d 4021 	strb.w	r4, [sp, #33]	@ 0x21
 8006608:	f88d 4023 	strb.w	r4, [sp, #35]	@ 0x23
 800660c:	f88d 4024 	strb.w	r4, [sp, #36]	@ 0x24
 8006610:	6803      	ldr	r3, [r0, #0]
 8006612:	a901      	add	r1, sp, #4
 8006614:	685b      	ldr	r3, [r3, #4]
 8006616:	4798      	blx	r3
 8006618:	b00a      	add	sp, #40	@ 0x28
 800661a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800661e <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 800661e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006622:	b08b      	sub	sp, #44	@ 0x2c
 8006624:	2400      	movs	r4, #0
 8006626:	461d      	mov	r5, r3
 8006628:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800662c:	4688      	mov	r8, r1
 800662e:	4691      	mov	r9, r2
 8006630:	f8bd 6050 	ldrh.w	r6, [sp, #80]	@ 0x50
 8006634:	9404      	str	r4, [sp, #16]
 8006636:	4607      	mov	r7, r0
 8006638:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800663c:	f7ff ffa8 	bl	8006590 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8006640:	fb06 9505 	mla	r5, r6, r5, r9
 8006644:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8006648:	f8ad 3018 	strh.w	r3, [sp, #24]
 800664c:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8006650:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 8006654:	6878      	ldr	r0, [r7, #4]
 8006656:	9505      	str	r5, [sp, #20]
 8006658:	f8ad 301a 	strh.w	r3, [sp, #26]
 800665c:	f8ad 401c 	strh.w	r4, [sp, #28]
 8006660:	f8ad 601e 	strh.w	r6, [sp, #30]
 8006664:	f8cd 8010 	str.w	r8, [sp, #16]
 8006668:	f8ad 4020 	strh.w	r4, [sp, #32]
 800666c:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 8006670:	f88d 4023 	strb.w	r4, [sp, #35]	@ 0x23
 8006674:	f88d 4024 	strb.w	r4, [sp, #36]	@ 0x24
 8006678:	6803      	ldr	r3, [r0, #0]
 800667a:	a901      	add	r1, sp, #4
 800667c:	685b      	ldr	r3, [r3, #4]
 800667e:	4798      	blx	r3
 8006680:	b00b      	add	sp, #44	@ 0x2c
 8006682:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08006688 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 8006688:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800668c:	b08a      	sub	sp, #40	@ 0x28
 800668e:	4698      	mov	r8, r3
 8006690:	f89d 505c 	ldrb.w	r5, [sp, #92]	@ 0x5c
 8006694:	f89d c054 	ldrb.w	ip, [sp, #84]	@ 0x54
 8006698:	f8bd 7058 	ldrh.w	r7, [sp, #88]	@ 0x58
 800669c:	f89d 4060 	ldrb.w	r4, [sp, #96]	@ 0x60
 80066a0:	2300      	movs	r3, #0
 80066a2:	2d0b      	cmp	r5, #11
 80066a4:	4606      	mov	r6, r0
 80066a6:	9304      	str	r3, [sp, #16]
 80066a8:	f89d 0050 	ldrb.w	r0, [sp, #80]	@ 0x50
 80066ac:	d138      	bne.n	8006720 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x98>
 80066ae:	2380      	movs	r3, #128	@ 0x80
 80066b0:	e9cd 3101 	strd	r3, r1, [sp, #4]
 80066b4:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 80066b8:	f8ad 3018 	strh.w	r3, [sp, #24]
 80066bc:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 80066c0:	f8ad 301a 	strh.w	r3, [sp, #26]
 80066c4:	f88d 0020 	strb.w	r0, [sp, #32]
 80066c8:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 80066cc:	f8ad 301c 	strh.w	r3, [sp, #28]
 80066d0:	4630      	mov	r0, r6
 80066d2:	9203      	str	r2, [sp, #12]
 80066d4:	f7ff ff5c 	bl	8006590 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80066d8:	2c0b      	cmp	r4, #11
 80066da:	bf98      	it	ls
 80066dc:	4b1b      	ldrls	r3, [pc, #108]	@ (800674c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
 80066de:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 80066e2:	bf98      	it	ls
 80066e4:	5d19      	ldrbls	r1, [r3, r4]
 80066e6:	f8ad 701e 	strh.w	r7, [sp, #30]
 80066ea:	bf88      	it	hi
 80066ec:	2100      	movhi	r1, #0
 80066ee:	fb02 8307 	mla	r3, r2, r7, r8
 80066f2:	10c9      	asrs	r1, r1, #3
 80066f4:	fb01 0003 	mla	r0, r1, r3, r0
 80066f8:	f89d 3064 	ldrb.w	r3, [sp, #100]	@ 0x64
 80066fc:	9005      	str	r0, [sp, #20]
 80066fe:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
 8006702:	6870      	ldr	r0, [r6, #4]
 8006704:	f88d 5021 	strb.w	r5, [sp, #33]	@ 0x21
 8006708:	2300      	movs	r3, #0
 800670a:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 800670e:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 8006712:	6803      	ldr	r3, [r0, #0]
 8006714:	a901      	add	r1, sp, #4
 8006716:	685b      	ldr	r3, [r3, #4]
 8006718:	4798      	blx	r3
 800671a:	b00a      	add	sp, #40	@ 0x28
 800671c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006720:	2d02      	cmp	r5, #2
 8006722:	d109      	bne.n	8006738 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xb0>
 8006724:	28ff      	cmp	r0, #255	@ 0xff
 8006726:	d105      	bne.n	8006734 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xac>
 8006728:	f1bc 0f00 	cmp.w	ip, #0
 800672c:	bf14      	ite	ne
 800672e:	2340      	movne	r3, #64	@ 0x40
 8006730:	2320      	moveq	r3, #32
 8006732:	e7bd      	b.n	80066b0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8006734:	2340      	movs	r3, #64	@ 0x40
 8006736:	e7bb      	b.n	80066b0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8006738:	28ff      	cmp	r0, #255	@ 0xff
 800673a:	d105      	bne.n	8006748 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc0>
 800673c:	f1bc 0f00 	cmp.w	ip, #0
 8006740:	bf14      	ite	ne
 8006742:	2304      	movne	r3, #4
 8006744:	2301      	moveq	r3, #1
 8006746:	e7b3      	b.n	80066b0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8006748:	2304      	movs	r3, #4
 800674a:	e7b1      	b.n	80066b0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 800674c:	0800ca5c 	.word	0x0800ca5c

08006750 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 8006750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006754:	b08b      	sub	sp, #44	@ 0x2c
 8006756:	461d      	mov	r5, r3
 8006758:	f89d 9058 	ldrb.w	r9, [sp, #88]	@ 0x58
 800675c:	f89d 6060 	ldrb.w	r6, [sp, #96]	@ 0x60
 8006760:	f8bd a05c 	ldrh.w	sl, [sp, #92]	@ 0x5c
 8006764:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 8006768:	bf14      	ite	ne
 800676a:	2308      	movne	r3, #8
 800676c:	2302      	moveq	r3, #2
 800676e:	2400      	movs	r4, #0
 8006770:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006774:	4688      	mov	r8, r1
 8006776:	4693      	mov	fp, r2
 8006778:	9404      	str	r4, [sp, #16]
 800677a:	4607      	mov	r7, r0
 800677c:	f7ff ff08 	bl	8006590 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8006780:	2e0b      	cmp	r6, #11
 8006782:	bf98      	it	ls
 8006784:	4b15      	ldrls	r3, [pc, #84]	@ (80067dc <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
 8006786:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 800678a:	bf98      	it	ls
 800678c:	5d9c      	ldrbls	r4, [r3, r6]
 800678e:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 8006792:	f8ad 3018 	strh.w	r3, [sp, #24]
 8006796:	fb05 b50a 	mla	r5, r5, sl, fp
 800679a:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 800679e:	f8ad 301a 	strh.w	r3, [sp, #26]
 80067a2:	10e4      	asrs	r4, r4, #3
 80067a4:	fb04 0405 	mla	r4, r4, r5, r0
 80067a8:	2300      	movs	r3, #0
 80067aa:	6878      	ldr	r0, [r7, #4]
 80067ac:	9405      	str	r4, [sp, #20]
 80067ae:	f8ad 301c 	strh.w	r3, [sp, #28]
 80067b2:	f8ad a01e 	strh.w	sl, [sp, #30]
 80067b6:	f8cd 8010 	str.w	r8, [sp, #16]
 80067ba:	f88d 9020 	strb.w	r9, [sp, #32]
 80067be:	f88d 2023 	strb.w	r2, [sp, #35]	@ 0x23
 80067c2:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 80067c6:	f88d 6021 	strb.w	r6, [sp, #33]	@ 0x21
 80067ca:	f88d 6022 	strb.w	r6, [sp, #34]	@ 0x22
 80067ce:	6803      	ldr	r3, [r0, #0]
 80067d0:	a901      	add	r1, sp, #4
 80067d2:	685b      	ldr	r3, [r3, #4]
 80067d4:	4798      	blx	r3
 80067d6:	b00b      	add	sp, #44	@ 0x2c
 80067d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067dc:	0800ca5c 	.word	0x0800ca5c

080067e0 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 80067e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067e4:	461e      	mov	r6, r3
 80067e6:	4b0a      	ldr	r3, [pc, #40]	@ (8006810 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 80067e8:	460f      	mov	r7, r1
 80067ea:	881d      	ldrh	r5, [r3, #0]
 80067ec:	4690      	mov	r8, r2
 80067ee:	f7fa ff57 	bl	80016a0 <_ZN8touchgfx3HAL3lcdEv>
 80067f2:	6803      	ldr	r3, [r0, #0]
 80067f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067f6:	4798      	blx	r3
 80067f8:	280b      	cmp	r0, #11
 80067fa:	bf9a      	itte	ls
 80067fc:	4b05      	ldrls	r3, [pc, #20]	@ (8006814 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 80067fe:	5c1c      	ldrbls	r4, [r3, r0]
 8006800:	2400      	movhi	r4, #0
 8006802:	fb08 7005 	mla	r0, r8, r5, r7
 8006806:	10e4      	asrs	r4, r4, #3
 8006808:	fb04 6000 	mla	r0, r4, r0, r6
 800680c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006810:	20009172 	.word	0x20009172
 8006814:	0800ca5c 	.word	0x0800ca5c

08006818 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 8006818:	b5f0      	push	{r4, r5, r6, r7, lr}
 800681a:	b08b      	sub	sp, #44	@ 0x2c
 800681c:	461f      	mov	r7, r3
 800681e:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 8006822:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8006826:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 800682a:	f8ad 3018 	strh.w	r3, [sp, #24]
 800682e:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8006832:	f8ad 301a 	strh.w	r3, [sp, #26]
 8006836:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 800683a:	f8ad 301c 	strh.w	r3, [sp, #28]
 800683e:	2500      	movs	r5, #0
 8006840:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 8006844:	f88d 3020 	strb.w	r3, [sp, #32]
 8006848:	4604      	mov	r4, r0
 800684a:	4616      	mov	r6, r2
 800684c:	9504      	str	r5, [sp, #16]
 800684e:	f7ff fe9f 	bl	8006590 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8006852:	463a      	mov	r2, r7
 8006854:	4631      	mov	r1, r6
 8006856:	4603      	mov	r3, r0
 8006858:	4620      	mov	r0, r4
 800685a:	f7ff ffc1 	bl	80067e0 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800685e:	4b0e      	ldr	r3, [pc, #56]	@ (8006898 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
 8006860:	9005      	str	r0, [sp, #20]
 8006862:	881b      	ldrh	r3, [r3, #0]
 8006864:	f8ad 301e 	strh.w	r3, [sp, #30]
 8006868:	f7fa ff1a 	bl	80016a0 <_ZN8touchgfx3HAL3lcdEv>
 800686c:	6803      	ldr	r3, [r0, #0]
 800686e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006870:	4798      	blx	r3
 8006872:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006874:	f88d 0022 	strb.w	r0, [sp, #34]	@ 0x22
 8006878:	f88d 0021 	strb.w	r0, [sp, #33]	@ 0x21
 800687c:	9304      	str	r3, [sp, #16]
 800687e:	6860      	ldr	r0, [r4, #4]
 8006880:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 8006884:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
 8006888:	f88d 5024 	strb.w	r5, [sp, #36]	@ 0x24
 800688c:	6803      	ldr	r3, [r0, #0]
 800688e:	a901      	add	r1, sp, #4
 8006890:	685b      	ldr	r3, [r3, #4]
 8006892:	4798      	blx	r3
 8006894:	b00b      	add	sp, #44	@ 0x2c
 8006896:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006898:	20009172 	.word	0x20009172

0800689c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 800689c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800689e:	b08d      	sub	sp, #52	@ 0x34
 80068a0:	466b      	mov	r3, sp
 80068a2:	e883 0006 	stmia.w	r3, {r1, r2}
 80068a6:	2300      	movs	r3, #0
 80068a8:	9306      	str	r3, [sp, #24]
 80068aa:	6803      	ldr	r3, [r0, #0]
 80068ac:	f8bd 6000 	ldrh.w	r6, [sp]
 80068b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80068b2:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 80068b6:	2501      	movs	r5, #1
 80068b8:	9503      	str	r5, [sp, #12]
 80068ba:	4604      	mov	r4, r0
 80068bc:	4798      	blx	r3
 80068be:	463a      	mov	r2, r7
 80068c0:	4631      	mov	r1, r6
 80068c2:	4603      	mov	r3, r0
 80068c4:	4620      	mov	r0, r4
 80068c6:	f7ff ff8b 	bl	80067e0 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80068ca:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80068cc:	9307      	str	r3, [sp, #28]
 80068ce:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80068d2:	f8ad 3020 	strh.w	r3, [sp, #32]
 80068d6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80068da:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 80068de:	4b0f      	ldr	r3, [pc, #60]	@ (800691c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 80068e0:	9004      	str	r0, [sp, #16]
 80068e2:	881b      	ldrh	r3, [r3, #0]
 80068e4:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 80068e8:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 80068ec:	f7fa fed8 	bl	80016a0 <_ZN8touchgfx3HAL3lcdEv>
 80068f0:	6803      	ldr	r3, [r0, #0]
 80068f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068f4:	4798      	blx	r3
 80068f6:	23ff      	movs	r3, #255	@ 0xff
 80068f8:	f88d 0029 	strb.w	r0, [sp, #41]	@ 0x29
 80068fc:	f88d 002a 	strb.w	r0, [sp, #42]	@ 0x2a
 8006900:	6860      	ldr	r0, [r4, #4]
 8006902:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 8006906:	f88d 502b 	strb.w	r5, [sp, #43]	@ 0x2b
 800690a:	f88d 502c 	strb.w	r5, [sp, #44]	@ 0x2c
 800690e:	6803      	ldr	r3, [r0, #0]
 8006910:	a903      	add	r1, sp, #12
 8006912:	685b      	ldr	r3, [r3, #4]
 8006914:	4798      	blx	r3
 8006916:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8006918:	b00d      	add	sp, #52	@ 0x34
 800691a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800691c:	20009172 	.word	0x20009172

08006920 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 8006920:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006924:	b08c      	sub	sp, #48	@ 0x30
 8006926:	461e      	mov	r6, r3
 8006928:	466d      	mov	r5, sp
 800692a:	2300      	movs	r3, #0
 800692c:	e885 0006 	stmia.w	r5, {r1, r2}
 8006930:	9306      	str	r3, [sp, #24]
 8006932:	6803      	ldr	r3, [r0, #0]
 8006934:	f8bd 7000 	ldrh.w	r7, [sp]
 8006938:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800693a:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 800693e:	2501      	movs	r5, #1
 8006940:	9503      	str	r5, [sp, #12]
 8006942:	4604      	mov	r4, r0
 8006944:	4798      	blx	r3
 8006946:	4642      	mov	r2, r8
 8006948:	4639      	mov	r1, r7
 800694a:	4603      	mov	r3, r0
 800694c:	4620      	mov	r0, r4
 800694e:	f7ff ff47 	bl	80067e0 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8006952:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8006956:	f8ad 3020 	strh.w	r3, [sp, #32]
 800695a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800695e:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 8006962:	4b11      	ldr	r3, [pc, #68]	@ (80069a8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 8006964:	9004      	str	r0, [sp, #16]
 8006966:	881b      	ldrh	r3, [r3, #0]
 8006968:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 800696c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800696e:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 8006972:	9607      	str	r6, [sp, #28]
 8006974:	f7fa fe94 	bl	80016a0 <_ZN8touchgfx3HAL3lcdEv>
 8006978:	6803      	ldr	r3, [r0, #0]
 800697a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800697c:	4798      	blx	r3
 800697e:	23ff      	movs	r3, #255	@ 0xff
 8006980:	f88d 0029 	strb.w	r0, [sp, #41]	@ 0x29
 8006984:	f88d 002a 	strb.w	r0, [sp, #42]	@ 0x2a
 8006988:	6860      	ldr	r0, [r4, #4]
 800698a:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 800698e:	f88d 502b 	strb.w	r5, [sp, #43]	@ 0x2b
 8006992:	f88d 502c 	strb.w	r5, [sp, #44]	@ 0x2c
 8006996:	6803      	ldr	r3, [r0, #0]
 8006998:	a903      	add	r1, sp, #12
 800699a:	685b      	ldr	r3, [r3, #4]
 800699c:	4798      	blx	r3
 800699e:	4630      	mov	r0, r6
 80069a0:	b00c      	add	sp, #48	@ 0x30
 80069a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80069a6:	bf00      	nop
 80069a8:	20009172 	.word	0x20009172

080069ac <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 80069ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80069ae:	b085      	sub	sp, #20
 80069b0:	ac02      	add	r4, sp, #8
 80069b2:	e884 0006 	stmia.w	r4, {r1, r2}
 80069b6:	4605      	mov	r5, r0
 80069b8:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 80069bc:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 80069c0:	f7ff fde6 	bl	8006590 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80069c4:	463a      	mov	r2, r7
 80069c6:	4603      	mov	r3, r0
 80069c8:	4631      	mov	r1, r6
 80069ca:	4628      	mov	r0, r5
 80069cc:	f7ff ff08 	bl	80067e0 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80069d0:	4a05      	ldr	r2, [pc, #20]	@ (80069e8 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 80069d2:	682b      	ldr	r3, [r5, #0]
 80069d4:	8812      	ldrh	r2, [r2, #0]
 80069d6:	9200      	str	r2, [sp, #0]
 80069d8:	6f1e      	ldr	r6, [r3, #112]	@ 0x70
 80069da:	e894 0006 	ldmia.w	r4, {r1, r2}
 80069de:	4603      	mov	r3, r0
 80069e0:	4628      	mov	r0, r5
 80069e2:	47b0      	blx	r6
 80069e4:	b005      	add	sp, #20
 80069e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80069e8:	20009172 	.word	0x20009172

080069ec <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 80069ec:	b570      	push	{r4, r5, r6, lr}
 80069ee:	f890 306e 	ldrb.w	r3, [r0, #110]	@ 0x6e
 80069f2:	4604      	mov	r4, r0
 80069f4:	b19b      	cbz	r3, 8006a1e <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 80069f6:	2002      	movs	r0, #2
 80069f8:	f7f9 fefa 	bl	80007f0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 80069fc:	2300      	movs	r3, #0
 80069fe:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
 8006a02:	f884 306d 	strb.w	r3, [r4, #109]	@ 0x6d
 8006a06:	6823      	ldr	r3, [r4, #0]
 8006a08:	4620      	mov	r0, r4
 8006a0a:	f8d3 50c8 	ldr.w	r5, [r3, #200]	@ 0xc8
 8006a0e:	f7ff fdbf 	bl	8006590 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8006a12:	462b      	mov	r3, r5
 8006a14:	4601      	mov	r1, r0
 8006a16:	4620      	mov	r0, r4
 8006a18:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006a1c:	4718      	bx	r3
 8006a1e:	bd70      	pop	{r4, r5, r6, pc}

08006a20 <_ZN8touchgfx3HAL12setMCUActiveEb>:
 8006a20:	b570      	push	{r4, r5, r6, lr}
 8006a22:	4605      	mov	r5, r0
 8006a24:	460c      	mov	r4, r1
 8006a26:	2003      	movs	r0, #3
 8006a28:	b149      	cbz	r1, 8006a3e <_ZN8touchgfx3HAL12setMCUActiveEb+0x1e>
 8006a2a:	f7f9 fe8d 	bl	8000748 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8006a2e:	6928      	ldr	r0, [r5, #16]
 8006a30:	b168      	cbz	r0, 8006a4e <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 8006a32:	6803      	ldr	r3, [r0, #0]
 8006a34:	695b      	ldr	r3, [r3, #20]
 8006a36:	2101      	movs	r1, #1
 8006a38:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006a3c:	4718      	bx	r3
 8006a3e:	f7f9 fead 	bl	800079c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8006a42:	6928      	ldr	r0, [r5, #16]
 8006a44:	b118      	cbz	r0, 8006a4e <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 8006a46:	6803      	ldr	r3, [r0, #0]
 8006a48:	4621      	mov	r1, r4
 8006a4a:	695b      	ldr	r3, [r3, #20]
 8006a4c:	e7f4      	b.n	8006a38 <_ZN8touchgfx3HAL12setMCUActiveEb+0x18>
 8006a4e:	bd70      	pop	{r4, r5, r6, pc}

08006a50 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 8006a50:	b538      	push	{r3, r4, r5, lr}
 8006a52:	f890 307b 	ldrb.w	r3, [r0, #123]	@ 0x7b
 8006a56:	428b      	cmp	r3, r1
 8006a58:	4604      	mov	r4, r0
 8006a5a:	460d      	mov	r5, r1
 8006a5c:	d006      	beq.n	8006a6c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 8006a5e:	6803      	ldr	r3, [r0, #0]
 8006a60:	b929      	cbnz	r1, 8006a6e <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 8006a62:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006a66:	4798      	blx	r3
 8006a68:	f884 507b 	strb.w	r5, [r4, #123]	@ 0x7b
 8006a6c:	bd38      	pop	{r3, r4, r5, pc}
 8006a6e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8006a72:	e7f8      	b.n	8006a66 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

08006a74 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 8006a74:	b510      	push	{r4, lr}
 8006a76:	4b0c      	ldr	r3, [pc, #48]	@ (8006aa8 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x34>)
 8006a78:	781b      	ldrb	r3, [r3, #0]
 8006a7a:	4604      	mov	r4, r0
 8006a7c:	b953      	cbnz	r3, 8006a94 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x20>
 8006a7e:	f890 3048 	ldrb.w	r3, [r0, #72]	@ 0x48
 8006a82:	b93b      	cbnz	r3, 8006a94 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x20>
 8006a84:	6840      	ldr	r0, [r0, #4]
 8006a86:	f000 f911 	bl	8006cac <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 8006a8a:	b118      	cbz	r0, 8006a94 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x20>
 8006a8c:	6862      	ldr	r2, [r4, #4]
 8006a8e:	7a53      	ldrb	r3, [r2, #9]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d0fc      	beq.n	8006a8e <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1a>
 8006a94:	f7fa f916 	bl	8000cc4 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8006a98:	4620      	mov	r0, r4
 8006a9a:	2100      	movs	r1, #0
 8006a9c:	f7ff ffd8 	bl	8006a50 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8006aa0:	4620      	mov	r0, r4
 8006aa2:	f7ff fd75 	bl	8006590 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8006aa6:	bd10      	pop	{r4, pc}
 8006aa8:	20009176 	.word	0x20009176

08006aac <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 8006aac:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 8006ab0:	1a13      	subs	r3, r2, r0
 8006ab2:	4258      	negs	r0, r3
 8006ab4:	4158      	adcs	r0, r3
 8006ab6:	4770      	bx	lr

08006ab8 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 8006ab8:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 8006abc:	1a9b      	subs	r3, r3, r2
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	bfdc      	itt	le
 8006ac2:	6882      	ldrle	r2, [r0, #8]
 8006ac4:	189b      	addle	r3, r3, r2
 8006ac6:	2b01      	cmp	r3, #1
 8006ac8:	bfcc      	ite	gt
 8006aca:	2000      	movgt	r0, #0
 8006acc:	2001      	movle	r0, #1
 8006ace:	4770      	bx	lr

08006ad0 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 8006ad0:	6902      	ldr	r2, [r0, #16]
 8006ad2:	6843      	ldr	r3, [r0, #4]
 8006ad4:	2024      	movs	r0, #36	@ 0x24
 8006ad6:	fb00 3002 	mla	r0, r0, r2, r3
 8006ada:	4770      	bx	lr

08006adc <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 8006adc:	6803      	ldr	r3, [r0, #0]
 8006ade:	691b      	ldr	r3, [r3, #16]
 8006ae0:	4718      	bx	r3

08006ae2 <_ZN8touchgfx13DMA_Interface7executeEv>:
 8006ae2:	b570      	push	{r4, r5, r6, lr}
 8006ae4:	2301      	movs	r3, #1
 8006ae6:	7203      	strb	r3, [r0, #8]
 8006ae8:	4604      	mov	r4, r0
 8006aea:	6840      	ldr	r0, [r0, #4]
 8006aec:	6803      	ldr	r3, [r0, #0]
 8006aee:	699b      	ldr	r3, [r3, #24]
 8006af0:	4798      	blx	r3
 8006af2:	6803      	ldr	r3, [r0, #0]
 8006af4:	2b40      	cmp	r3, #64	@ 0x40
 8006af6:	4605      	mov	r5, r0
 8006af8:	d00c      	beq.n	8006b14 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8006afa:	d810      	bhi.n	8006b1e <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 8006afc:	2b04      	cmp	r3, #4
 8006afe:	d01d      	beq.n	8006b3c <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
 8006b00:	d804      	bhi.n	8006b0c <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
 8006b02:	2b01      	cmp	r3, #1
 8006b04:	d006      	beq.n	8006b14 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8006b06:	2b02      	cmp	r3, #2
 8006b08:	d02c      	beq.n	8006b64 <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 8006b0a:	bd70      	pop	{r4, r5, r6, pc}
 8006b0c:	2b08      	cmp	r3, #8
 8006b0e:	d01d      	beq.n	8006b4c <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
 8006b10:	2b20      	cmp	r3, #32
 8006b12:	d1fa      	bne.n	8006b0a <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 8006b14:	6823      	ldr	r3, [r4, #0]
 8006b16:	4620      	mov	r0, r4
 8006b18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b1a:	4798      	blx	r3
 8006b1c:	e013      	b.n	8006b46 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 8006b1e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006b22:	d0f7      	beq.n	8006b14 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8006b24:	d804      	bhi.n	8006b30 <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
 8006b26:	2b80      	cmp	r3, #128	@ 0x80
 8006b28:	d0f4      	beq.n	8006b14 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8006b2a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006b2e:	e7f0      	b.n	8006b12 <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
 8006b30:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b34:	d0ee      	beq.n	8006b14 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8006b36:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006b3a:	e7e5      	b.n	8006b08 <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 8006b3c:	6823      	ldr	r3, [r4, #0]
 8006b3e:	7f01      	ldrb	r1, [r0, #28]
 8006b40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b42:	4620      	mov	r0, r4
 8006b44:	4798      	blx	r3
 8006b46:	6823      	ldr	r3, [r4, #0]
 8006b48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b4a:	e006      	b.n	8006b5a <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8006b4c:	6823      	ldr	r3, [r4, #0]
 8006b4e:	7f01      	ldrb	r1, [r0, #28]
 8006b50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b52:	4620      	mov	r0, r4
 8006b54:	4798      	blx	r3
 8006b56:	6823      	ldr	r3, [r4, #0]
 8006b58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b5a:	4629      	mov	r1, r5
 8006b5c:	4620      	mov	r0, r4
 8006b5e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006b62:	4718      	bx	r3
 8006b64:	6823      	ldr	r3, [r4, #0]
 8006b66:	4620      	mov	r0, r4
 8006b68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b6a:	4798      	blx	r3
 8006b6c:	e7f3      	b.n	8006b56 <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

08006b6e <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 8006b6e:	4770      	bx	lr

08006b70 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 8006b70:	4770      	bx	lr

08006b72 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
 8006b72:	4770      	bx	lr

08006b74 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 8006b74:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 8006b78:	1ad2      	subs	r2, r2, r3
 8006b7a:	2a00      	cmp	r2, #0
 8006b7c:	b510      	push	{r4, lr}
 8006b7e:	bfdc      	itt	le
 8006b80:	6884      	ldrle	r4, [r0, #8]
 8006b82:	1912      	addle	r2, r2, r4
 8006b84:	2a01      	cmp	r2, #1
 8006b86:	dd16      	ble.n	8006bb6 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
 8006b88:	6842      	ldr	r2, [r0, #4]
 8006b8a:	2424      	movs	r4, #36	@ 0x24
 8006b8c:	fb04 2303 	mla	r3, r4, r3, r2
 8006b90:	f101 0220 	add.w	r2, r1, #32
 8006b94:	f851 4b04 	ldr.w	r4, [r1], #4
 8006b98:	f843 4b04 	str.w	r4, [r3], #4
 8006b9c:	4291      	cmp	r1, r2
 8006b9e:	d1f9      	bne.n	8006b94 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 8006ba0:	780a      	ldrb	r2, [r1, #0]
 8006ba2:	701a      	strb	r2, [r3, #0]
 8006ba4:	68c3      	ldr	r3, [r0, #12]
 8006ba6:	6882      	ldr	r2, [r0, #8]
 8006ba8:	f3bf 8f5b 	dmb	ish
 8006bac:	3301      	adds	r3, #1
 8006bae:	429a      	cmp	r2, r3
 8006bb0:	bfd8      	it	le
 8006bb2:	1a9b      	suble	r3, r3, r2
 8006bb4:	60c3      	str	r3, [r0, #12]
 8006bb6:	bd10      	pop	{r4, pc}

08006bb8 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 8006bb8:	6903      	ldr	r3, [r0, #16]
 8006bba:	6882      	ldr	r2, [r0, #8]
 8006bbc:	f3bf 8f5b 	dmb	ish
 8006bc0:	3301      	adds	r3, #1
 8006bc2:	429a      	cmp	r2, r3
 8006bc4:	bfd8      	it	le
 8006bc6:	1a9b      	suble	r3, r3, r2
 8006bc8:	6103      	str	r3, [r0, #16]
 8006bca:	4770      	bx	lr

08006bcc <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 8006bcc:	b570      	push	{r4, r5, r6, lr}
 8006bce:	4604      	mov	r4, r0
 8006bd0:	460e      	mov	r6, r1
 8006bd2:	6860      	ldr	r0, [r4, #4]
 8006bd4:	6803      	ldr	r3, [r0, #0]
 8006bd6:	685b      	ldr	r3, [r3, #4]
 8006bd8:	4798      	blx	r3
 8006bda:	2800      	cmp	r0, #0
 8006bdc:	d1f9      	bne.n	8006bd2 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 8006bde:	4d0d      	ldr	r5, [pc, #52]	@ (8006c14 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 8006be0:	6828      	ldr	r0, [r5, #0]
 8006be2:	6803      	ldr	r3, [r0, #0]
 8006be4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006be8:	4798      	blx	r3
 8006bea:	f7fa f879 	bl	8000ce0 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 8006bee:	6828      	ldr	r0, [r5, #0]
 8006bf0:	2101      	movs	r1, #1
 8006bf2:	f7ff ff2d 	bl	8006a50 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8006bf6:	6860      	ldr	r0, [r4, #4]
 8006bf8:	6803      	ldr	r3, [r0, #0]
 8006bfa:	4631      	mov	r1, r6
 8006bfc:	689b      	ldr	r3, [r3, #8]
 8006bfe:	4798      	blx	r3
 8006c00:	6823      	ldr	r3, [r4, #0]
 8006c02:	4620      	mov	r0, r4
 8006c04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c06:	4798      	blx	r3
 8006c08:	6828      	ldr	r0, [r5, #0]
 8006c0a:	6803      	ldr	r3, [r0, #0]
 8006c0c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006c10:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006c12:	4718      	bx	r3
 8006c14:	20009178 	.word	0x20009178

08006c18 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 8006c18:	b508      	push	{r3, lr}
 8006c1a:	f7fa f853 	bl	8000cc4 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8006c1e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8006c22:	f7fa b857 	b.w	8000cd4 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08006c26 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 8006c26:	b510      	push	{r4, lr}
 8006c28:	2114      	movs	r1, #20
 8006c2a:	4604      	mov	r4, r0
 8006c2c:	f004 fa6c 	bl	800b108 <_ZdlPvj>
 8006c30:	4620      	mov	r0, r4
 8006c32:	bd10      	pop	{r4, pc}

08006c34 <_ZN8touchgfx13DMA_Interface5startEv>:
 8006c34:	b510      	push	{r4, lr}
 8006c36:	4604      	mov	r4, r0
 8006c38:	6840      	ldr	r0, [r0, #4]
 8006c3a:	6803      	ldr	r3, [r0, #0]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	4798      	blx	r3
 8006c40:	b948      	cbnz	r0, 8006c56 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8006c42:	7a63      	ldrb	r3, [r4, #9]
 8006c44:	b13b      	cbz	r3, 8006c56 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8006c46:	7a23      	ldrb	r3, [r4, #8]
 8006c48:	b92b      	cbnz	r3, 8006c56 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8006c4a:	6823      	ldr	r3, [r4, #0]
 8006c4c:	4620      	mov	r0, r4
 8006c4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c54:	4718      	bx	r3
 8006c56:	bd10      	pop	{r4, pc}

08006c58 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 8006c58:	b570      	push	{r4, r5, r6, lr}
 8006c5a:	4604      	mov	r4, r0
 8006c5c:	6840      	ldr	r0, [r0, #4]
 8006c5e:	6803      	ldr	r3, [r0, #0]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	4798      	blx	r3
 8006c64:	4605      	mov	r5, r0
 8006c66:	b930      	cbnz	r0, 8006c76 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8006c68:	7a23      	ldrb	r3, [r4, #8]
 8006c6a:	b123      	cbz	r3, 8006c76 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8006c6c:	6860      	ldr	r0, [r4, #4]
 8006c6e:	6803      	ldr	r3, [r0, #0]
 8006c70:	695b      	ldr	r3, [r3, #20]
 8006c72:	4798      	blx	r3
 8006c74:	7225      	strb	r5, [r4, #8]
 8006c76:	6860      	ldr	r0, [r4, #4]
 8006c78:	6803      	ldr	r3, [r0, #0]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	4798      	blx	r3
 8006c7e:	b928      	cbnz	r0, 8006c8c <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 8006c80:	6823      	ldr	r3, [r4, #0]
 8006c82:	4620      	mov	r0, r4
 8006c84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c86:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006c8a:	4718      	bx	r3
 8006c8c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006c90:	f7fa b82e 	b.w	8000cf0 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

08006c94 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 8006c94:	b510      	push	{r4, lr}
 8006c96:	4c04      	ldr	r4, [pc, #16]	@ (8006ca8 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 8006c98:	6082      	str	r2, [r0, #8]
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	e9c0 4100 	strd	r4, r1, [r0]
 8006ca0:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8006ca4:	bd10      	pop	{r4, pc}
 8006ca6:	bf00      	nop
 8006ca8:	0800ca70 	.word	0x0800ca70

08006cac <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 8006cac:	6840      	ldr	r0, [r0, #4]
 8006cae:	6803      	ldr	r3, [r0, #0]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	4718      	bx	r3

08006cb4 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 8006cb4:	b510      	push	{r4, lr}
 8006cb6:	6803      	ldr	r3, [r0, #0]
 8006cb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cba:	460c      	mov	r4, r1
 8006cbc:	4798      	blx	r3
 8006cbe:	1b03      	subs	r3, r0, r4
 8006cc0:	4258      	negs	r0, r3
 8006cc2:	4158      	adcs	r0, r3
 8006cc4:	bd10      	pop	{r4, pc}
	...

08006cc8 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 8006cc8:	4b01      	ldr	r3, [pc, #4]	@ (8006cd0 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 8006cca:	6019      	str	r1, [r3, #0]
 8006ccc:	4770      	bx	lr
 8006cce:	bf00      	nop
 8006cd0:	20009180 	.word	0x20009180

08006cd4 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8006cd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cd8:	4696      	mov	lr, r2
 8006cda:	4605      	mov	r5, r0
 8006cdc:	4614      	mov	r4, r2
 8006cde:	460e      	mov	r6, r1
 8006ce0:	461f      	mov	r7, r3
 8006ce2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8006ce6:	b097      	sub	sp, #92	@ 0x5c
 8006ce8:	f10d 0c1c 	add.w	ip, sp, #28
 8006cec:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8006cf0:	f8de 3000 	ldr.w	r3, [lr]
 8006cf4:	f8cc 3000 	str.w	r3, [ip]
 8006cf8:	f104 0e14 	add.w	lr, r4, #20
 8006cfc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8006d00:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8006d04:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8006d08:	f8de 3000 	ldr.w	r3, [lr]
 8006d0c:	f8cc 3000 	str.w	r3, [ip]
 8006d10:	f104 0e28 	add.w	lr, r4, #40	@ 0x28
 8006d14:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8006d18:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 8006d1c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8006d20:	f89d 908c 	ldrb.w	r9, [sp, #140]	@ 0x8c
 8006d24:	f8bd a090 	ldrh.w	sl, [sp, #144]	@ 0x90
 8006d28:	f8bd 8088 	ldrh.w	r8, [sp, #136]	@ 0x88
 8006d2c:	f8de 3000 	ldr.w	r3, [lr]
 8006d30:	f8cc 3000 	str.w	r3, [ip]
 8006d34:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8006d36:	682b      	ldr	r3, [r5, #0]
 8006d38:	9201      	str	r2, [sp, #4]
 8006d3a:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8006d3e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006d40:	9200      	str	r2, [sp, #0]
 8006d42:	f8cd 8008 	str.w	r8, [sp, #8]
 8006d46:	f8d3 b03c 	ldr.w	fp, [r3, #60]	@ 0x3c
 8006d4a:	aa07      	add	r2, sp, #28
 8006d4c:	463b      	mov	r3, r7
 8006d4e:	4631      	mov	r1, r6
 8006d50:	4628      	mov	r0, r5
 8006d52:	47d8      	blx	fp
 8006d54:	46a6      	mov	lr, r4
 8006d56:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8006d5a:	f10d 0c1c 	add.w	ip, sp, #28
 8006d5e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8006d62:	f8de 3000 	ldr.w	r3, [lr]
 8006d66:	f8cc 3000 	str.w	r3, [ip]
 8006d6a:	f104 0e28 	add.w	lr, r4, #40	@ 0x28
 8006d6e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8006d72:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8006d76:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8006d7a:	343c      	adds	r4, #60	@ 0x3c
 8006d7c:	f8de 3000 	ldr.w	r3, [lr]
 8006d80:	f8cc 3000 	str.w	r3, [ip]
 8006d84:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006d86:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 8006d8a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8006d8e:	6823      	ldr	r3, [r4, #0]
 8006d90:	f8cc 3000 	str.w	r3, [ip]
 8006d94:	682b      	ldr	r3, [r5, #0]
 8006d96:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8006d9a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8006d9c:	9201      	str	r2, [sp, #4]
 8006d9e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006da0:	9200      	str	r2, [sp, #0]
 8006da2:	f8cd 8008 	str.w	r8, [sp, #8]
 8006da6:	6bdc      	ldr	r4, [r3, #60]	@ 0x3c
 8006da8:	aa07      	add	r2, sp, #28
 8006daa:	463b      	mov	r3, r7
 8006dac:	4631      	mov	r1, r6
 8006dae:	4628      	mov	r0, r5
 8006db0:	47a0      	blx	r4
 8006db2:	b017      	add	sp, #92	@ 0x5c
 8006db4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006db8 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 8006db8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dbc:	b08d      	sub	sp, #52	@ 0x34
 8006dbe:	4688      	mov	r8, r1
 8006dc0:	9916      	ldr	r1, [sp, #88]	@ 0x58
 8006dc2:	f8d3 c000 	ldr.w	ip, [r3]
 8006dc6:	680f      	ldr	r7, [r1, #0]
 8006dc8:	f8bd 4070 	ldrh.w	r4, [sp, #112]	@ 0x70
 8006dcc:	ed92 4a09 	vldr	s8, [r2, #36]	@ 0x24
 8006dd0:	edd2 4a0b 	vldr	s9, [r2, #44]	@ 0x2c
 8006dd4:	edd3 6a07 	vldr	s13, [r3, #28]
 8006dd8:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8006dda:	f8dd a064 	ldr.w	sl, [sp, #100]	@ 0x64
 8006dde:	f9b1 9000 	ldrsh.w	r9, [r1]
 8006de2:	f9ba 1000 	ldrsh.w	r1, [sl]
 8006de6:	edd3 1a0a 	vldr	s3, [r3, #40]	@ 0x28
 8006dea:	ed93 2a0d 	vldr	s4, [r3, #52]	@ 0x34
 8006dee:	eba7 070c 	sub.w	r7, r7, ip
 8006df2:	42bc      	cmp	r4, r7
 8006df4:	bfa8      	it	ge
 8006df6:	463c      	movge	r4, r7
 8006df8:	ee07 4a90 	vmov	s15, r4
 8006dfc:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 8006e00:	edd2 7a0d 	vldr	s15, [r2, #52]	@ 0x34
 8006e04:	ee25 4a04 	vmul.f32	s8, s10, s8
 8006e08:	ee65 4a24 	vmul.f32	s9, s10, s9
 8006e0c:	ee25 5a27 	vmul.f32	s10, s10, s15
 8006e10:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8006e14:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8006e18:	eb09 0e0c 	add.w	lr, r9, ip
 8006e1c:	4571      	cmp	r1, lr
 8006e1e:	ee71 0aa4 	vadd.f32	s1, s3, s9
 8006e22:	ee32 1a05 	vadd.f32	s2, s4, s10
 8006e26:	ee36 0a84 	vadd.f32	s0, s13, s8
 8006e2a:	ee61 1a87 	vmul.f32	s3, s3, s14
 8006e2e:	ee22 2a07 	vmul.f32	s4, s4, s14
 8006e32:	f340 808d 	ble.w	8006f50 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x198>
 8006e36:	eba1 060e 	sub.w	r6, r1, lr
 8006e3a:	fb96 f5f4 	sdiv	r5, r6, r4
 8006e3e:	ee07 5a10 	vmov	s14, r5
 8006e42:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8006e46:	2d00      	cmp	r5, #0
 8006e48:	fb04 6615 	mls	r6, r4, r5, r6
 8006e4c:	eea7 0a04 	vfma.f32	s0, s14, s8
 8006e50:	eee7 0a24 	vfma.f32	s1, s14, s9
 8006e54:	eea7 1a05 	vfma.f32	s2, s14, s10
 8006e58:	dd13      	ble.n	8006e82 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xca>
 8006e5a:	ee70 6a44 	vsub.f32	s13, s0, s8
 8006e5e:	ee70 1ae4 	vsub.f32	s3, s1, s9
 8006e62:	eef5 6a40 	vcmp.f32	s13, #0.0
 8006e66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e6a:	bf18      	it	ne
 8006e6c:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 8006e70:	ee31 2a45 	vsub.f32	s4, s2, s10
 8006e74:	bf08      	it	eq
 8006e76:	eeb0 7a67 	vmoveq.f32	s14, s15
 8006e7a:	ee61 1a87 	vmul.f32	s3, s3, s14
 8006e7e:	ee22 2a07 	vmul.f32	s4, s4, s14
 8006e82:	fb05 f204 	mul.w	r2, r5, r4
 8006e86:	1abf      	subs	r7, r7, r2
 8006e88:	4494      	add	ip, r2
 8006e8a:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 8006e8e:	4411      	add	r1, r2
 8006e90:	eb09 020c 	add.w	r2, r9, ip
 8006e94:	443a      	add	r2, r7
 8006e96:	b209      	sxth	r1, r1
 8006e98:	428a      	cmp	r2, r1
 8006e9a:	bfc4      	itt	gt
 8006e9c:	eba1 0209 	subgt.w	r2, r1, r9
 8006ea0:	eba2 070c 	subgt.w	r7, r2, ip
 8006ea4:	2f00      	cmp	r7, #0
 8006ea6:	dd50      	ble.n	8006f4a <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x192>
 8006ea8:	fb97 f1f4 	sdiv	r1, r7, r4
 8006eac:	fb04 7211 	mls	r2, r4, r1, r7
 8006eb0:	b90a      	cbnz	r2, 8006eb6 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfe>
 8006eb2:	3901      	subs	r1, #1
 8006eb4:	4622      	mov	r2, r4
 8006eb6:	eec7 3a80 	vdiv.f32	s7, s15, s0
 8006eba:	6840      	ldr	r0, [r0, #4]
 8006ebc:	900b      	str	r0, [sp, #44]	@ 0x2c
 8006ebe:	f8d0 a000 	ldr.w	sl, [r0]
 8006ec2:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8006ec4:	9008      	str	r0, [sp, #32]
 8006ec6:	f89d b06c 	ldrb.w	fp, [sp, #108]	@ 0x6c
 8006eca:	9818      	ldr	r0, [sp, #96]	@ 0x60
 8006ecc:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8006ed0:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 8006ed4:	695b      	ldr	r3, [r3, #20]
 8006ed6:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8006ed8:	445b      	add	r3, fp
 8006eda:	eef0 6a42 	vmov.f32	s13, s4
 8006ede:	ee60 2aa3 	vmul.f32	s5, s1, s7
 8006ee2:	ee21 3a23 	vmul.f32	s6, s2, s7
 8006ee6:	ee72 7ae1 	vsub.f32	s15, s5, s3
 8006eea:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8006eee:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8006ef2:	9307      	str	r3, [sp, #28]
 8006ef4:	ee17 7a90 	vmov	r7, s15
 8006ef8:	ee73 7a42 	vsub.f32	s15, s6, s4
 8006efc:	eeb0 7a61 	vmov.f32	s14, s3
 8006f00:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8006f04:	ee16 3a90 	vmov	r3, s13
 8006f08:	fb97 f7f4 	sdiv	r7, r7, r4
 8006f0c:	ee17 ca90 	vmov	ip, s15
 8006f10:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8006f14:	fb9c fcf4 	sdiv	ip, ip, r4
 8006f18:	fb0c 3306 	mla	r3, ip, r6, r3
 8006f1c:	9302      	str	r3, [sp, #8]
 8006f1e:	ee17 3a10 	vmov	r3, s14
 8006f22:	44b6      	add	lr, r6
 8006f24:	fb04 e505 	mla	r5, r4, r5, lr
 8006f28:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 8006f2c:	fb07 3706 	mla	r7, r7, r6, r3
 8006f30:	e9cd 8505 	strd	r8, r5, [sp, #20]
 8006f34:	e9cd 4700 	strd	r4, r7, [sp]
 8006f38:	2900      	cmp	r1, #0
 8006f3a:	bfcc      	ite	gt
 8006f3c:	46a1      	movgt	r9, r4
 8006f3e:	4691      	movle	r9, r2
 8006f40:	eba9 0306 	sub.w	r3, r9, r6
 8006f44:	f8da 4008 	ldr.w	r4, [sl, #8]
 8006f48:	47a0      	blx	r4
 8006f4a:	b00d      	add	sp, #52	@ 0x34
 8006f4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f50:	2500      	movs	r5, #0
 8006f52:	462e      	mov	r6, r5
 8006f54:	e799      	b.n	8006e8a <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd2>
	...

08006f58 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8006f58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f5c:	b0db      	sub	sp, #364	@ 0x16c
 8006f5e:	461d      	mov	r5, r3
 8006f60:	f8bd 3198 	ldrh.w	r3, [sp, #408]	@ 0x198
 8006f64:	930a      	str	r3, [sp, #40]	@ 0x28
 8006f66:	f89d 319c 	ldrb.w	r3, [sp, #412]	@ 0x19c
 8006f6a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006f6c:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	@ 0x1a0
 8006f70:	9310      	str	r3, [sp, #64]	@ 0x40
 8006f72:	6803      	ldr	r3, [r0, #0]
 8006f74:	910f      	str	r1, [sp, #60]	@ 0x3c
 8006f76:	6c5f      	ldr	r7, [r3, #68]	@ 0x44
 8006f78:	9009      	str	r0, [sp, #36]	@ 0x24
 8006f7a:	4614      	mov	r4, r2
 8006f7c:	4629      	mov	r1, r5
 8006f7e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 8006f82:	f8dd b194 	ldr.w	fp, [sp, #404]	@ 0x194
 8006f86:	47b8      	blx	r7
 8006f88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f8a:	6058      	str	r0, [r3, #4]
 8006f8c:	2800      	cmp	r0, #0
 8006f8e:	f000 83a1 	beq.w	80076d4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8006f92:	682b      	ldr	r3, [r5, #0]
 8006f94:	9314      	str	r3, [sp, #80]	@ 0x50
 8006f96:	686b      	ldr	r3, [r5, #4]
 8006f98:	9315      	str	r3, [sp, #84]	@ 0x54
 8006f9a:	4bc4      	ldr	r3, [pc, #784]	@ (80072ac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 8006f9c:	ed94 7a02 	vldr	s14, [r4, #8]
 8006fa0:	7819      	ldrb	r1, [r3, #0]
 8006fa2:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 8006fa6:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 8006faa:	2900      	cmp	r1, #0
 8006fac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006fb0:	bf16      	itet	ne
 8006fb2:	4619      	movne	r1, r3
 8006fb4:	4611      	moveq	r1, r2
 8006fb6:	4613      	movne	r3, r2
 8006fb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fbc:	9116      	str	r1, [sp, #88]	@ 0x58
 8006fbe:	e9cd 3217 	strd	r3, r2, [sp, #92]	@ 0x5c
 8006fc2:	f240 8387 	bls.w	80076d4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8006fc6:	ed94 7a07 	vldr	s14, [r4, #28]
 8006fca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006fce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fd2:	f240 837f 	bls.w	80076d4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8006fd6:	ed94 7a0c 	vldr	s14, [r4, #48]	@ 0x30
 8006fda:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006fde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fe2:	f240 8377 	bls.w	80076d4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8006fe6:	6822      	ldr	r2, [r4, #0]
 8006fe8:	4bb1      	ldr	r3, [pc, #708]	@ (80072b0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 8006fea:	429a      	cmp	r2, r3
 8006fec:	f2c0 8372 	blt.w	80076d4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8006ff0:	49b0      	ldr	r1, [pc, #704]	@ (80072b4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 8006ff2:	6963      	ldr	r3, [r4, #20]
 8006ff4:	428a      	cmp	r2, r1
 8006ff6:	f300 836d 	bgt.w	80076d4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8006ffa:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 8006ffe:	48ae      	ldr	r0, [pc, #696]	@ (80072b8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 8007000:	33ff      	adds	r3, #255	@ 0xff
 8007002:	4283      	cmp	r3, r0
 8007004:	f200 8366 	bhi.w	80076d4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8007008:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800700a:	4dac      	ldr	r5, [pc, #688]	@ (80072bc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 800700c:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 8007010:	33ff      	adds	r3, #255	@ 0xff
 8007012:	42ab      	cmp	r3, r5
 8007014:	f200 835e 	bhi.w	80076d4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8007018:	6862      	ldr	r2, [r4, #4]
 800701a:	f502 331c 	add.w	r3, r2, #159744	@ 0x27000
 800701e:	33ff      	adds	r3, #255	@ 0xff
 8007020:	4283      	cmp	r3, r0
 8007022:	f200 8357 	bhi.w	80076d4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8007026:	69a1      	ldr	r1, [r4, #24]
 8007028:	f501 331c 	add.w	r3, r1, #159744	@ 0x27000
 800702c:	33ff      	adds	r3, #255	@ 0xff
 800702e:	4283      	cmp	r3, r0
 8007030:	f200 8350 	bhi.w	80076d4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8007034:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8007036:	f503 301c 	add.w	r0, r3, #159744	@ 0x27000
 800703a:	30ff      	adds	r0, #255	@ 0xff
 800703c:	42a8      	cmp	r0, r5
 800703e:	f200 8349 	bhi.w	80076d4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8007042:	428a      	cmp	r2, r1
 8007044:	f280 8110 	bge.w	8007268 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 8007048:	429a      	cmp	r2, r3
 800704a:	f300 8119 	bgt.w	8007280 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 800704e:	4299      	cmp	r1, r3
 8007050:	f280 811d 	bge.w	800728e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 8007054:	2502      	movs	r5, #2
 8007056:	2701      	movs	r7, #1
 8007058:	46a9      	mov	r9, r5
 800705a:	46b8      	mov	r8, r7
 800705c:	f04f 0a00 	mov.w	sl, #0
 8007060:	4621      	mov	r1, r4
 8007062:	a849      	add	r0, sp, #292	@ 0x124
 8007064:	f001 fbe4 	bl	8008830 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 8007068:	4622      	mov	r2, r4
 800706a:	4653      	mov	r3, sl
 800706c:	a949      	add	r1, sp, #292	@ 0x124
 800706e:	f8cd 9000 	str.w	r9, [sp]
 8007072:	a819      	add	r0, sp, #100	@ 0x64
 8007074:	f001 fd0c 	bl	8008a90 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8007078:	4622      	mov	r2, r4
 800707a:	4653      	mov	r3, sl
 800707c:	a949      	add	r1, sp, #292	@ 0x124
 800707e:	f8cd 8000 	str.w	r8, [sp]
 8007082:	a829      	add	r0, sp, #164	@ 0xa4
 8007084:	f001 fd04 	bl	8008a90 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8007088:	4643      	mov	r3, r8
 800708a:	4622      	mov	r2, r4
 800708c:	a949      	add	r1, sp, #292	@ 0x124
 800708e:	f8cd 9000 	str.w	r9, [sp]
 8007092:	a839      	add	r0, sp, #228	@ 0xe4
 8007094:	f001 fcfc 	bl	8008a90 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8007098:	42af      	cmp	r7, r5
 800709a:	bfb5      	itete	lt
 800709c:	2300      	movlt	r3, #0
 800709e:	2301      	movge	r3, #1
 80070a0:	930e      	strlt	r3, [sp, #56]	@ 0x38
 80070a2:	930e      	strge	r3, [sp, #56]	@ 0x38
 80070a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80070a6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80070aa:	af12      	add	r7, sp, #72	@ 0x48
 80070ac:	bfb9      	ittee	lt
 80070ae:	ad29      	addlt	r5, sp, #164	@ 0xa4
 80070b0:	ac19      	addlt	r4, sp, #100	@ 0x64
 80070b2:	ad19      	addge	r5, sp, #100	@ 0x64
 80070b4:	ac29      	addge	r4, sp, #164	@ 0xa4
 80070b6:	e887 0003 	stmia.w	r7, {r0, r1}
 80070ba:	b928      	cbnz	r0, 80070c8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 80070bc:	4b80      	ldr	r3, [pc, #512]	@ (80072c0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 80070be:	6818      	ldr	r0, [r3, #0]
 80070c0:	6803      	ldr	r3, [r0, #0]
 80070c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070c4:	4798      	blx	r3
 80070c6:	6038      	str	r0, [r7, #0]
 80070c8:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 80070ca:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 80070ce:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80070d2:	930c      	str	r3, [sp, #48]	@ 0x30
 80070d4:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80070d6:	6963      	ldr	r3, [r4, #20]
 80070d8:	9a2f      	ldr	r2, [sp, #188]	@ 0xbc
 80070da:	440b      	add	r3, r1
 80070dc:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 80070e0:	4408      	add	r0, r1
 80070e2:	b200      	sxth	r0, r0
 80070e4:	4283      	cmp	r3, r0
 80070e6:	900d      	str	r0, [sp, #52]	@ 0x34
 80070e8:	f280 80dd 	bge.w	80072a6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 80070ec:	428b      	cmp	r3, r1
 80070ee:	da08      	bge.n	8007102 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 80070f0:	2a00      	cmp	r2, #0
 80070f2:	dd06      	ble.n	8007102 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 80070f4:	1acb      	subs	r3, r1, r3
 80070f6:	429a      	cmp	r2, r3
 80070f8:	f2c0 80e4 	blt.w	80072c4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	f300 80e2 	bgt.w	80072c6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 8007102:	6967      	ldr	r7, [r4, #20]
 8007104:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007106:	443b      	add	r3, r7
 8007108:	461f      	mov	r7, r3
 800710a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800710c:	1bdf      	subs	r7, r3, r7
 800710e:	4297      	cmp	r7, r2
 8007110:	bfa8      	it	ge
 8007112:	4617      	movge	r7, r2
 8007114:	f10d 0850 	add.w	r8, sp, #80	@ 0x50
 8007118:	2f00      	cmp	r7, #0
 800711a:	f340 8166 	ble.w	80073ea <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 800711e:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8007120:	6829      	ldr	r1, [r5, #0]
 8007122:	f9b3 2000 	ldrsh.w	r2, [r3]
 8007126:	f9bb 3000 	ldrsh.w	r3, [fp]
 800712a:	6820      	ldr	r0, [r4, #0]
 800712c:	4411      	add	r1, r2
 800712e:	4299      	cmp	r1, r3
 8007130:	dd1a      	ble.n	8007168 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8007132:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8007136:	440b      	add	r3, r1
 8007138:	4402      	add	r2, r0
 800713a:	b21b      	sxth	r3, r3
 800713c:	429a      	cmp	r2, r3
 800713e:	dc13      	bgt.n	8007168 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8007140:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007142:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	9206      	str	r2, [sp, #24]
 8007148:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800714a:	9205      	str	r2, [sp, #20]
 800714c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800714e:	9500      	str	r5, [sp, #0]
 8007150:	e9cd b203 	strd	fp, r2, [sp, #12]
 8007154:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 8007156:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007158:	e9cd 8201 	strd	r8, r2, [sp, #4]
 800715c:	a912      	add	r1, sp, #72	@ 0x48
 800715e:	f8d3 9048 	ldr.w	r9, [r3, #72]	@ 0x48
 8007162:	aa49      	add	r2, sp, #292	@ 0x124
 8007164:	4623      	mov	r3, r4
 8007166:	47c8      	blx	r9
 8007168:	e9d4 2300 	ldrd	r2, r3, [r4]
 800716c:	441a      	add	r2, r3
 800716e:	6963      	ldr	r3, [r4, #20]
 8007170:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
 8007174:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 8007178:	edd4 6a0e 	vldr	s13, [r4, #56]	@ 0x38
 800717c:	68a1      	ldr	r1, [r4, #8]
 800717e:	ed94 6a08 	vldr	s12, [r4, #32]
 8007182:	6022      	str	r2, [r4, #0]
 8007184:	3301      	adds	r3, #1
 8007186:	6163      	str	r3, [r4, #20]
 8007188:	69a3      	ldr	r3, [r4, #24]
 800718a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800718e:	3b01      	subs	r3, #1
 8007190:	edd4 7a0d 	vldr	s15, [r4, #52]	@ 0x34
 8007194:	61a3      	str	r3, [r4, #24]
 8007196:	6923      	ldr	r3, [r4, #16]
 8007198:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 800719c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071a0:	edd4 6a07 	vldr	s13, [r4, #28]
 80071a4:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 80071a8:	440b      	add	r3, r1
 80071aa:	68e1      	ldr	r1, [r4, #12]
 80071ac:	6123      	str	r3, [r4, #16]
 80071ae:	ee76 6a86 	vadd.f32	s13, s13, s12
 80071b2:	428b      	cmp	r3, r1
 80071b4:	edc4 6a07 	vstr	s13, [r4, #28]
 80071b8:	db15      	blt.n	80071e6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 80071ba:	ed94 6a09 	vldr	s12, [r4, #36]	@ 0x24
 80071be:	ee76 6a26 	vadd.f32	s13, s12, s13
 80071c2:	3201      	adds	r2, #1
 80071c4:	edc4 6a07 	vstr	s13, [r4, #28]
 80071c8:	edd4 6a0c 	vldr	s13, [r4, #48]	@ 0x30
 80071cc:	6022      	str	r2, [r4, #0]
 80071ce:	ee36 7a87 	vadd.f32	s14, s13, s14
 80071d2:	1a5b      	subs	r3, r3, r1
 80071d4:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 80071d8:	ed94 7a0f 	vldr	s14, [r4, #60]	@ 0x3c
 80071dc:	6123      	str	r3, [r4, #16]
 80071de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80071e2:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 80071e6:	e9d5 2300 	ldrd	r2, r3, [r5]
 80071ea:	441a      	add	r2, r3
 80071ec:	696b      	ldr	r3, [r5, #20]
 80071ee:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
 80071f2:	edd5 7a0b 	vldr	s15, [r5, #44]	@ 0x2c
 80071f6:	edd5 6a0e 	vldr	s13, [r5, #56]	@ 0x38
 80071fa:	68a9      	ldr	r1, [r5, #8]
 80071fc:	ed95 6a08 	vldr	s12, [r5, #32]
 8007200:	602a      	str	r2, [r5, #0]
 8007202:	3301      	adds	r3, #1
 8007204:	616b      	str	r3, [r5, #20]
 8007206:	69ab      	ldr	r3, [r5, #24]
 8007208:	ee37 7a27 	vadd.f32	s14, s14, s15
 800720c:	3b01      	subs	r3, #1
 800720e:	edd5 7a0d 	vldr	s15, [r5, #52]	@ 0x34
 8007212:	61ab      	str	r3, [r5, #24]
 8007214:	692b      	ldr	r3, [r5, #16]
 8007216:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 800721a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800721e:	edd5 6a07 	vldr	s13, [r5, #28]
 8007222:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 8007226:	440b      	add	r3, r1
 8007228:	68e9      	ldr	r1, [r5, #12]
 800722a:	612b      	str	r3, [r5, #16]
 800722c:	ee76 6a86 	vadd.f32	s13, s13, s12
 8007230:	428b      	cmp	r3, r1
 8007232:	edc5 6a07 	vstr	s13, [r5, #28]
 8007236:	db15      	blt.n	8007264 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 8007238:	ed95 6a09 	vldr	s12, [r5, #36]	@ 0x24
 800723c:	ee76 6a26 	vadd.f32	s13, s12, s13
 8007240:	3201      	adds	r2, #1
 8007242:	edc5 6a07 	vstr	s13, [r5, #28]
 8007246:	edd5 6a0c 	vldr	s13, [r5, #48]	@ 0x30
 800724a:	602a      	str	r2, [r5, #0]
 800724c:	ee36 7a87 	vadd.f32	s14, s13, s14
 8007250:	1a5b      	subs	r3, r3, r1
 8007252:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 8007256:	ed95 7a0f 	vldr	s14, [r5, #60]	@ 0x3c
 800725a:	612b      	str	r3, [r5, #16]
 800725c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007260:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 8007264:	3f01      	subs	r7, #1
 8007266:	e757      	b.n	8007118 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 8007268:	4299      	cmp	r1, r3
 800726a:	dc13      	bgt.n	8007294 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 800726c:	429a      	cmp	r2, r3
 800726e:	da14      	bge.n	800729a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 8007270:	2502      	movs	r5, #2
 8007272:	2703      	movs	r7, #3
 8007274:	46a9      	mov	r9, r5
 8007276:	f04f 0800 	mov.w	r8, #0
 800727a:	f04f 0a01 	mov.w	sl, #1
 800727e:	e6ef      	b.n	8007060 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8007280:	2501      	movs	r5, #1
 8007282:	2700      	movs	r7, #0
 8007284:	46a9      	mov	r9, r5
 8007286:	46b8      	mov	r8, r7
 8007288:	f04f 0a02 	mov.w	sl, #2
 800728c:	e6e8      	b.n	8007060 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 800728e:	2501      	movs	r5, #1
 8007290:	2702      	movs	r7, #2
 8007292:	e6e1      	b.n	8007058 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 8007294:	2500      	movs	r5, #0
 8007296:	2701      	movs	r7, #1
 8007298:	e7f4      	b.n	8007284 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 800729a:	2702      	movs	r7, #2
 800729c:	2503      	movs	r5, #3
 800729e:	f04f 0900 	mov.w	r9, #0
 80072a2:	46b8      	mov	r8, r7
 80072a4:	e7e9      	b.n	800727a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 80072a6:	4613      	mov	r3, r2
 80072a8:	e728      	b.n	80070fc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 80072aa:	bf00      	nop
 80072ac:	20009170 	.word	0x20009170
 80072b0:	fffd8f01 	.word	0xfffd8f01
 80072b4:	00027100 	.word	0x00027100
 80072b8:	0004e1ff 	.word	0x0004e1ff
 80072bc:	0004e1fe 	.word	0x0004e1fe
 80072c0:	20009178 	.word	0x20009178
 80072c4:	4613      	mov	r3, r2
 80072c6:	992b      	ldr	r1, [sp, #172]	@ 0xac
 80072c8:	9111      	str	r1, [sp, #68]	@ 0x44
 80072ca:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	@ 0xa4
 80072ce:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	@ 0xb0
 80072d2:	9f2e      	ldr	r7, [sp, #184]	@ 0xb8
 80072d4:	eddd 4a34 	vldr	s9, [sp, #208]	@ 0xd0
 80072d8:	ed9d 7a33 	vldr	s14, [sp, #204]	@ 0xcc
 80072dc:	ed9d 4a37 	vldr	s8, [sp, #220]	@ 0xdc
 80072e0:	eddd 7a36 	vldr	s15, [sp, #216]	@ 0xd8
 80072e4:	eddd 3a31 	vldr	s7, [sp, #196]	@ 0xc4
 80072e8:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 80072ec:	ed9d 5a32 	vldr	s10, [sp, #200]	@ 0xc8
 80072f0:	eddd 5a35 	vldr	s11, [sp, #212]	@ 0xd4
 80072f4:	ed9d 6a38 	vldr	s12, [sp, #224]	@ 0xe0
 80072f8:	469e      	mov	lr, r3
 80072fa:	469c      	mov	ip, r3
 80072fc:	f04f 0900 	mov.w	r9, #0
 8007300:	f1bc 0f00 	cmp.w	ip, #0
 8007304:	d147      	bne.n	8007396 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 8007306:	eb03 0c07 	add.w	ip, r3, r7
 800730a:	1ad7      	subs	r7, r2, r3
 800730c:	f1b9 0f00 	cmp.w	r9, #0
 8007310:	d009      	beq.n	8007326 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 8007312:	e9cd c72e 	strd	ip, r7, [sp, #184]	@ 0xb8
 8007316:	9029      	str	r0, [sp, #164]	@ 0xa4
 8007318:	ed8d 7a33 	vstr	s14, [sp, #204]	@ 0xcc
 800731c:	edcd 7a36 	vstr	s15, [sp, #216]	@ 0xd8
 8007320:	edcd 6a30 	vstr	s13, [sp, #192]	@ 0xc0
 8007324:	912d      	str	r1, [sp, #180]	@ 0xb4
 8007326:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 8007328:	9111      	str	r1, [sp, #68]	@ 0x44
 800732a:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	@ 0x64
 800732e:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	@ 0x78
 8007332:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	@ 0x70
 8007336:	eddd 4a24 	vldr	s9, [sp, #144]	@ 0x90
 800733a:	eddd 6a23 	vldr	s13, [sp, #140]	@ 0x8c
 800733e:	ed9d 4a27 	vldr	s8, [sp, #156]	@ 0x9c
 8007342:	ed9d 7a26 	vldr	s14, [sp, #152]	@ 0x98
 8007346:	eddd 3a21 	vldr	s7, [sp, #132]	@ 0x84
 800734a:	eddd 7a20 	vldr	s15, [sp, #128]	@ 0x80
 800734e:	ed9d 5a22 	vldr	s10, [sp, #136]	@ 0x88
 8007352:	eddd 5a25 	vldr	s11, [sp, #148]	@ 0x94
 8007356:	ed9d 6a28 	vldr	s12, [sp, #160]	@ 0xa0
 800735a:	f04f 0800 	mov.w	r8, #0
 800735e:	f1be 0f00 	cmp.w	lr, #0
 8007362:	d031      	beq.n	80073c8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 8007364:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8007366:	4431      	add	r1, r6
 8007368:	4549      	cmp	r1, r9
 800736a:	4450      	add	r0, sl
 800736c:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8007370:	ee37 7a04 	vadd.f32	s14, s14, s8
 8007374:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8007378:	db08      	blt.n	800738c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 800737a:	ee77 7a85 	vadd.f32	s15, s15, s10
 800737e:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8007382:	ee37 7a06 	vadd.f32	s14, s14, s12
 8007386:	3001      	adds	r0, #1
 8007388:	eba1 0109 	sub.w	r1, r1, r9
 800738c:	f10e 3eff 	add.w	lr, lr, #4294967295
 8007390:	f04f 0801 	mov.w	r8, #1
 8007394:	e7e3      	b.n	800735e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 8007396:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8007398:	4431      	add	r1, r6
 800739a:	4541      	cmp	r1, r8
 800739c:	4450      	add	r0, sl
 800739e:	ee37 7a24 	vadd.f32	s14, s14, s9
 80073a2:	ee77 7a84 	vadd.f32	s15, s15, s8
 80073a6:	ee76 6aa3 	vadd.f32	s13, s13, s7
 80073aa:	db08      	blt.n	80073be <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 80073ac:	ee76 6a85 	vadd.f32	s13, s13, s10
 80073b0:	ee37 7a25 	vadd.f32	s14, s14, s11
 80073b4:	ee77 7a86 	vadd.f32	s15, s15, s12
 80073b8:	3001      	adds	r0, #1
 80073ba:	eba1 0108 	sub.w	r1, r1, r8
 80073be:	f10c 3cff 	add.w	ip, ip, #4294967295
 80073c2:	f04f 0901 	mov.w	r9, #1
 80073c6:	e79b      	b.n	8007300 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 80073c8:	449c      	add	ip, r3
 80073ca:	1aff      	subs	r7, r7, r3
 80073cc:	f1b8 0f00 	cmp.w	r8, #0
 80073d0:	d009      	beq.n	80073e6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 80073d2:	e9cd c71e 	strd	ip, r7, [sp, #120]	@ 0x78
 80073d6:	9019      	str	r0, [sp, #100]	@ 0x64
 80073d8:	edcd 6a23 	vstr	s13, [sp, #140]	@ 0x8c
 80073dc:	ed8d 7a26 	vstr	s14, [sp, #152]	@ 0x98
 80073e0:	edcd 7a20 	vstr	s15, [sp, #128]	@ 0x80
 80073e4:	911d      	str	r1, [sp, #116]	@ 0x74
 80073e6:	1ad2      	subs	r2, r2, r3
 80073e8:	e68b      	b.n	8007102 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 80073ea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80073ec:	9a3f      	ldr	r2, [sp, #252]	@ 0xfc
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	f000 80d1 	beq.w	8007596 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 80073f4:	ad19      	add	r5, sp, #100	@ 0x64
 80073f6:	ac39      	add	r4, sp, #228	@ 0xe4
 80073f8:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 80073fa:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 80073fe:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8007402:	930c      	str	r3, [sp, #48]	@ 0x30
 8007404:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8007406:	6963      	ldr	r3, [r4, #20]
 8007408:	440b      	add	r3, r1
 800740a:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 800740e:	4408      	add	r0, r1
 8007410:	b200      	sxth	r0, r0
 8007412:	4283      	cmp	r3, r0
 8007414:	900d      	str	r0, [sp, #52]	@ 0x34
 8007416:	f280 80c1 	bge.w	800759c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 800741a:	428b      	cmp	r3, r1
 800741c:	da08      	bge.n	8007430 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 800741e:	2a00      	cmp	r2, #0
 8007420:	dd06      	ble.n	8007430 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8007422:	1acb      	subs	r3, r1, r3
 8007424:	429a      	cmp	r2, r3
 8007426:	f2c0 80bb 	blt.w	80075a0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 800742a:	2b00      	cmp	r3, #0
 800742c:	f300 80b9 	bgt.w	80075a2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 8007430:	6967      	ldr	r7, [r4, #20]
 8007432:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007434:	443b      	add	r3, r7
 8007436:	461f      	mov	r7, r3
 8007438:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800743a:	1bdf      	subs	r7, r3, r7
 800743c:	4297      	cmp	r7, r2
 800743e:	bfa8      	it	ge
 8007440:	4617      	movge	r7, r2
 8007442:	f10d 0850 	add.w	r8, sp, #80	@ 0x50
 8007446:	2f00      	cmp	r7, #0
 8007448:	f340 813c 	ble.w	80076c4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 800744c:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 800744e:	6829      	ldr	r1, [r5, #0]
 8007450:	f9b3 2000 	ldrsh.w	r2, [r3]
 8007454:	f9bb 3000 	ldrsh.w	r3, [fp]
 8007458:	6820      	ldr	r0, [r4, #0]
 800745a:	4411      	add	r1, r2
 800745c:	4299      	cmp	r1, r3
 800745e:	dd1a      	ble.n	8007496 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8007460:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8007464:	440b      	add	r3, r1
 8007466:	4402      	add	r2, r0
 8007468:	b21b      	sxth	r3, r3
 800746a:	429a      	cmp	r2, r3
 800746c:	dc13      	bgt.n	8007496 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 800746e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007470:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	9206      	str	r2, [sp, #24]
 8007476:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007478:	9205      	str	r2, [sp, #20]
 800747a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800747c:	9500      	str	r5, [sp, #0]
 800747e:	e9cd b203 	strd	fp, r2, [sp, #12]
 8007482:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 8007484:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007486:	e9cd 8201 	strd	r8, r2, [sp, #4]
 800748a:	a912      	add	r1, sp, #72	@ 0x48
 800748c:	f8d3 9048 	ldr.w	r9, [r3, #72]	@ 0x48
 8007490:	aa49      	add	r2, sp, #292	@ 0x124
 8007492:	4623      	mov	r3, r4
 8007494:	47c8      	blx	r9
 8007496:	e9d4 2300 	ldrd	r2, r3, [r4]
 800749a:	441a      	add	r2, r3
 800749c:	6963      	ldr	r3, [r4, #20]
 800749e:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
 80074a2:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 80074a6:	edd4 6a0e 	vldr	s13, [r4, #56]	@ 0x38
 80074aa:	68a1      	ldr	r1, [r4, #8]
 80074ac:	ed94 6a08 	vldr	s12, [r4, #32]
 80074b0:	6022      	str	r2, [r4, #0]
 80074b2:	3301      	adds	r3, #1
 80074b4:	6163      	str	r3, [r4, #20]
 80074b6:	69a3      	ldr	r3, [r4, #24]
 80074b8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80074bc:	3b01      	subs	r3, #1
 80074be:	edd4 7a0d 	vldr	s15, [r4, #52]	@ 0x34
 80074c2:	61a3      	str	r3, [r4, #24]
 80074c4:	6923      	ldr	r3, [r4, #16]
 80074c6:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 80074ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074ce:	edd4 6a07 	vldr	s13, [r4, #28]
 80074d2:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 80074d6:	440b      	add	r3, r1
 80074d8:	68e1      	ldr	r1, [r4, #12]
 80074da:	6123      	str	r3, [r4, #16]
 80074dc:	ee76 6a86 	vadd.f32	s13, s13, s12
 80074e0:	428b      	cmp	r3, r1
 80074e2:	edc4 6a07 	vstr	s13, [r4, #28]
 80074e6:	db15      	blt.n	8007514 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 80074e8:	ed94 6a09 	vldr	s12, [r4, #36]	@ 0x24
 80074ec:	ee76 6a26 	vadd.f32	s13, s12, s13
 80074f0:	3201      	adds	r2, #1
 80074f2:	edc4 6a07 	vstr	s13, [r4, #28]
 80074f6:	edd4 6a0c 	vldr	s13, [r4, #48]	@ 0x30
 80074fa:	6022      	str	r2, [r4, #0]
 80074fc:	ee36 7a87 	vadd.f32	s14, s13, s14
 8007500:	1a5b      	subs	r3, r3, r1
 8007502:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 8007506:	ed94 7a0f 	vldr	s14, [r4, #60]	@ 0x3c
 800750a:	6123      	str	r3, [r4, #16]
 800750c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007510:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 8007514:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007518:	441a      	add	r2, r3
 800751a:	696b      	ldr	r3, [r5, #20]
 800751c:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
 8007520:	edd5 7a0b 	vldr	s15, [r5, #44]	@ 0x2c
 8007524:	edd5 6a0e 	vldr	s13, [r5, #56]	@ 0x38
 8007528:	68a9      	ldr	r1, [r5, #8]
 800752a:	ed95 6a08 	vldr	s12, [r5, #32]
 800752e:	602a      	str	r2, [r5, #0]
 8007530:	3301      	adds	r3, #1
 8007532:	616b      	str	r3, [r5, #20]
 8007534:	69ab      	ldr	r3, [r5, #24]
 8007536:	ee37 7a27 	vadd.f32	s14, s14, s15
 800753a:	3b01      	subs	r3, #1
 800753c:	edd5 7a0d 	vldr	s15, [r5, #52]	@ 0x34
 8007540:	61ab      	str	r3, [r5, #24]
 8007542:	692b      	ldr	r3, [r5, #16]
 8007544:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 8007548:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800754c:	edd5 6a07 	vldr	s13, [r5, #28]
 8007550:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 8007554:	440b      	add	r3, r1
 8007556:	68e9      	ldr	r1, [r5, #12]
 8007558:	612b      	str	r3, [r5, #16]
 800755a:	ee76 6a86 	vadd.f32	s13, s13, s12
 800755e:	428b      	cmp	r3, r1
 8007560:	edc5 6a07 	vstr	s13, [r5, #28]
 8007564:	db15      	blt.n	8007592 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 8007566:	ed95 6a09 	vldr	s12, [r5, #36]	@ 0x24
 800756a:	ee76 6a26 	vadd.f32	s13, s12, s13
 800756e:	3201      	adds	r2, #1
 8007570:	edc5 6a07 	vstr	s13, [r5, #28]
 8007574:	edd5 6a0c 	vldr	s13, [r5, #48]	@ 0x30
 8007578:	602a      	str	r2, [r5, #0]
 800757a:	ee36 7a87 	vadd.f32	s14, s13, s14
 800757e:	1a5b      	subs	r3, r3, r1
 8007580:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 8007584:	ed95 7a0f 	vldr	s14, [r5, #60]	@ 0x3c
 8007588:	612b      	str	r3, [r5, #16]
 800758a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800758e:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 8007592:	3f01      	subs	r7, #1
 8007594:	e757      	b.n	8007446 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 8007596:	ad39      	add	r5, sp, #228	@ 0xe4
 8007598:	ac19      	add	r4, sp, #100	@ 0x64
 800759a:	e72d      	b.n	80073f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 800759c:	4613      	mov	r3, r2
 800759e:	e744      	b.n	800742a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 80075a0:	4613      	mov	r3, r2
 80075a2:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	@ 0xe4
 80075a6:	9e3b      	ldr	r6, [sp, #236]	@ 0xec
 80075a8:	f8dd c0f8 	ldr.w	ip, [sp, #248]	@ 0xf8
 80075ac:	ed9d 7a43 	vldr	s14, [sp, #268]	@ 0x10c
 80075b0:	eddd 4a44 	vldr	s9, [sp, #272]	@ 0x110
 80075b4:	eddd 7a46 	vldr	s15, [sp, #280]	@ 0x118
 80075b8:	ed9d 4a47 	vldr	s8, [sp, #284]	@ 0x11c
 80075bc:	eddd 6a40 	vldr	s13, [sp, #256]	@ 0x100
 80075c0:	eddd 3a41 	vldr	s7, [sp, #260]	@ 0x104
 80075c4:	993d      	ldr	r1, [sp, #244]	@ 0xf4
 80075c6:	f8dd 80f0 	ldr.w	r8, [sp, #240]	@ 0xf0
 80075ca:	ed9d 5a42 	vldr	s10, [sp, #264]	@ 0x108
 80075ce:	eddd 5a45 	vldr	s11, [sp, #276]	@ 0x114
 80075d2:	ed9d 6a48 	vldr	s12, [sp, #288]	@ 0x120
 80075d6:	960e      	str	r6, [sp, #56]	@ 0x38
 80075d8:	469e      	mov	lr, r3
 80075da:	461f      	mov	r7, r3
 80075dc:	f04f 0900 	mov.w	r9, #0
 80075e0:	2f00      	cmp	r7, #0
 80075e2:	d146      	bne.n	8007672 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 80075e4:	449c      	add	ip, r3
 80075e6:	1ad7      	subs	r7, r2, r3
 80075e8:	f1b9 0f00 	cmp.w	r9, #0
 80075ec:	d009      	beq.n	8007602 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 80075ee:	e9cd c73e 	strd	ip, r7, [sp, #248]	@ 0xf8
 80075f2:	9039      	str	r0, [sp, #228]	@ 0xe4
 80075f4:	913d      	str	r1, [sp, #244]	@ 0xf4
 80075f6:	edcd 6a40 	vstr	s13, [sp, #256]	@ 0x100
 80075fa:	ed8d 7a43 	vstr	s14, [sp, #268]	@ 0x10c
 80075fe:	edcd 7a46 	vstr	s15, [sp, #280]	@ 0x118
 8007602:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 8007604:	910e      	str	r1, [sp, #56]	@ 0x38
 8007606:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	@ 0x64
 800760a:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	@ 0x78
 800760e:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	@ 0x70
 8007612:	eddd 4a24 	vldr	s9, [sp, #144]	@ 0x90
 8007616:	eddd 6a23 	vldr	s13, [sp, #140]	@ 0x8c
 800761a:	ed9d 4a27 	vldr	s8, [sp, #156]	@ 0x9c
 800761e:	ed9d 7a26 	vldr	s14, [sp, #152]	@ 0x98
 8007622:	eddd 3a21 	vldr	s7, [sp, #132]	@ 0x84
 8007626:	eddd 7a20 	vldr	s15, [sp, #128]	@ 0x80
 800762a:	ed9d 5a22 	vldr	s10, [sp, #136]	@ 0x88
 800762e:	eddd 5a25 	vldr	s11, [sp, #148]	@ 0x94
 8007632:	ed9d 6a28 	vldr	s12, [sp, #160]	@ 0xa0
 8007636:	f04f 0800 	mov.w	r8, #0
 800763a:	f1be 0f00 	cmp.w	lr, #0
 800763e:	d030      	beq.n	80076a2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 8007640:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 8007642:	4431      	add	r1, r6
 8007644:	4549      	cmp	r1, r9
 8007646:	4450      	add	r0, sl
 8007648:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800764c:	ee37 7a04 	vadd.f32	s14, s14, s8
 8007650:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8007654:	db08      	blt.n	8007668 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 8007656:	ee77 7a85 	vadd.f32	s15, s15, s10
 800765a:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800765e:	ee37 7a06 	vadd.f32	s14, s14, s12
 8007662:	3001      	adds	r0, #1
 8007664:	eba1 0109 	sub.w	r1, r1, r9
 8007668:	f10e 3eff 	add.w	lr, lr, #4294967295
 800766c:	f04f 0801 	mov.w	r8, #1
 8007670:	e7e3      	b.n	800763a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 8007672:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 8007674:	4431      	add	r1, r6
 8007676:	4541      	cmp	r1, r8
 8007678:	4450      	add	r0, sl
 800767a:	ee37 7a24 	vadd.f32	s14, s14, s9
 800767e:	ee77 7a84 	vadd.f32	s15, s15, s8
 8007682:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8007686:	db08      	blt.n	800769a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 8007688:	ee76 6a85 	vadd.f32	s13, s13, s10
 800768c:	ee37 7a25 	vadd.f32	s14, s14, s11
 8007690:	ee77 7a86 	vadd.f32	s15, s15, s12
 8007694:	3001      	adds	r0, #1
 8007696:	eba1 0108 	sub.w	r1, r1, r8
 800769a:	3f01      	subs	r7, #1
 800769c:	f04f 0901 	mov.w	r9, #1
 80076a0:	e79e      	b.n	80075e0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 80076a2:	449c      	add	ip, r3
 80076a4:	1aff      	subs	r7, r7, r3
 80076a6:	f1b8 0f00 	cmp.w	r8, #0
 80076aa:	d009      	beq.n	80076c0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 80076ac:	e9cd c71e 	strd	ip, r7, [sp, #120]	@ 0x78
 80076b0:	9019      	str	r0, [sp, #100]	@ 0x64
 80076b2:	edcd 6a23 	vstr	s13, [sp, #140]	@ 0x8c
 80076b6:	ed8d 7a26 	vstr	s14, [sp, #152]	@ 0x98
 80076ba:	edcd 7a20 	vstr	s15, [sp, #128]	@ 0x80
 80076be:	911d      	str	r1, [sp, #116]	@ 0x74
 80076c0:	1ad2      	subs	r2, r2, r3
 80076c2:	e6b5      	b.n	8007430 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 80076c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	b923      	cbnz	r3, 80076d4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80076ca:	4b04      	ldr	r3, [pc, #16]	@ (80076dc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 80076cc:	6818      	ldr	r0, [r3, #0]
 80076ce:	6803      	ldr	r3, [r0, #0]
 80076d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076d2:	4798      	blx	r3
 80076d4:	b05b      	add	sp, #364	@ 0x16c
 80076d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076da:	bf00      	nop
 80076dc:	20009178 	.word	0x20009178

080076e0 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 80076e0:	2b03      	cmp	r3, #3
 80076e2:	d818      	bhi.n	8007716 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
 80076e4:	e8df f003 	tbb	[pc, r3]
 80076e8:	130d0602 	.word	0x130d0602
 80076ec:	f9b0 2000 	ldrsh.w	r2, [r0]
 80076f0:	1850      	adds	r0, r2, r1
 80076f2:	4770      	bx	lr
 80076f4:	8803      	ldrh	r3, [r0, #0]
 80076f6:	8880      	ldrh	r0, [r0, #4]
 80076f8:	4418      	add	r0, r3
 80076fa:	b200      	sxth	r0, r0
 80076fc:	1a80      	subs	r0, r0, r2
 80076fe:	3801      	subs	r0, #1
 8007700:	4770      	bx	lr
 8007702:	8803      	ldrh	r3, [r0, #0]
 8007704:	8880      	ldrh	r0, [r0, #4]
 8007706:	4418      	add	r0, r3
 8007708:	b200      	sxth	r0, r0
 800770a:	1a40      	subs	r0, r0, r1
 800770c:	e7f7      	b.n	80076fe <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 800770e:	f9b0 0000 	ldrsh.w	r0, [r0]
 8007712:	4410      	add	r0, r2
 8007714:	4770      	bx	lr
 8007716:	2000      	movs	r0, #0
 8007718:	4770      	bx	lr

0800771a <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 800771a:	2b03      	cmp	r3, #3
 800771c:	d817      	bhi.n	800774e <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
 800771e:	e8df f003 	tbb	[pc, r3]
 8007722:	0602      	.short	0x0602
 8007724:	1009      	.short	0x1009
 8007726:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 800772a:	1850      	adds	r0, r2, r1
 800772c:	4770      	bx	lr
 800772e:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8007732:	e7fa      	b.n	800772a <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
 8007734:	8843      	ldrh	r3, [r0, #2]
 8007736:	88c0      	ldrh	r0, [r0, #6]
 8007738:	4418      	add	r0, r3
 800773a:	b200      	sxth	r0, r0
 800773c:	1a80      	subs	r0, r0, r2
 800773e:	3801      	subs	r0, #1
 8007740:	4770      	bx	lr
 8007742:	8843      	ldrh	r3, [r0, #2]
 8007744:	88c0      	ldrh	r0, [r0, #6]
 8007746:	4418      	add	r0, r3
 8007748:	b200      	sxth	r0, r0
 800774a:	1a40      	subs	r0, r0, r1
 800774c:	e7f7      	b.n	800773e <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 800774e:	2000      	movs	r0, #0
 8007750:	4770      	bx	lr
	...

08007754 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 8007754:	4b01      	ldr	r3, [pc, #4]	@ (800775c <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 8007756:	2200      	movs	r2, #0
 8007758:	601a      	str	r2, [r3, #0]
 800775a:	4770      	bx	lr
 800775c:	20009180 	.word	0x20009180

08007760 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 8007760:	4603      	mov	r3, r0
 8007762:	b1c8      	cbz	r0, 8007798 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 8007764:	0c02      	lsrs	r2, r0, #16
 8007766:	0412      	lsls	r2, r2, #16
 8007768:	b9a2      	cbnz	r2, 8007794 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 800776a:	0403      	lsls	r3, r0, #16
 800776c:	2010      	movs	r0, #16
 800776e:	f013 4f7f 	tst.w	r3, #4278190080	@ 0xff000000
 8007772:	bf04      	itt	eq
 8007774:	021b      	lsleq	r3, r3, #8
 8007776:	3008      	addeq	r0, #8
 8007778:	f013 4f70 	tst.w	r3, #4026531840	@ 0xf0000000
 800777c:	bf04      	itt	eq
 800777e:	011b      	lsleq	r3, r3, #4
 8007780:	3004      	addeq	r0, #4
 8007782:	f013 4f40 	tst.w	r3, #3221225472	@ 0xc0000000
 8007786:	bf04      	itt	eq
 8007788:	009b      	lsleq	r3, r3, #2
 800778a:	3002      	addeq	r0, #2
 800778c:	2b00      	cmp	r3, #0
 800778e:	db04      	blt.n	800779a <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 8007790:	3001      	adds	r0, #1
 8007792:	4770      	bx	lr
 8007794:	2000      	movs	r0, #0
 8007796:	e7ea      	b.n	800776e <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 8007798:	2020      	movs	r0, #32
 800779a:	4770      	bx	lr

0800779c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 800779c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077a0:	b087      	sub	sp, #28
 80077a2:	460d      	mov	r5, r1
 80077a4:	4616      	mov	r6, r2
 80077a6:	4698      	mov	r8, r3
 80077a8:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	@ 0x40
 80077ac:	4601      	mov	r1, r0
 80077ae:	b120      	cbz	r0, 80077ba <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 80077b0:	b11a      	cbz	r2, 80077ba <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 80077b2:	2d1f      	cmp	r5, #31
 80077b4:	d801      	bhi.n	80077ba <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 80077b6:	2b1f      	cmp	r3, #31
 80077b8:	d904      	bls.n	80077c4 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x28>
 80077ba:	2000      	movs	r0, #0
 80077bc:	6038      	str	r0, [r7, #0]
 80077be:	b007      	add	sp, #28
 80077c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077c4:	b97d      	cbnz	r5, 80077e6 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4a>
 80077c6:	b143      	cbz	r3, 80077da <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x3e>
 80077c8:	4602      	mov	r2, r0
 80077ca:	e9cd 4700 	strd	r4, r7, [sp]
 80077ce:	462b      	mov	r3, r5
 80077d0:	4641      	mov	r1, r8
 80077d2:	4630      	mov	r0, r6
 80077d4:	f7ff ffe2 	bl	800779c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 80077d8:	e7f1      	b.n	80077be <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 80077da:	f04f 33ff 	mov.w	r3, #4294967295
 80077de:	603b      	str	r3, [r7, #0]
 80077e0:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 80077e4:	e7eb      	b.n	80077be <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 80077e6:	fa32 fa05 	lsrs.w	sl, r2, r5
 80077ea:	d106      	bne.n	80077fa <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x5e>
 80077ec:	4346      	muls	r6, r0
 80077ee:	fbb6 f0f4 	udiv	r0, r6, r4
 80077f2:	fb04 6610 	mls	r6, r4, r0, r6
 80077f6:	603e      	str	r6, [r7, #0]
 80077f8:	e7e1      	b.n	80077be <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 80077fa:	2201      	movs	r2, #1
 80077fc:	40aa      	lsls	r2, r5
 80077fe:	3a01      	subs	r2, #1
 8007800:	4016      	ands	r6, r2
 8007802:	fa00 fb05 	lsl.w	fp, r0, r5
 8007806:	4630      	mov	r0, r6
 8007808:	fbbb f9f4 	udiv	r9, fp, r4
 800780c:	fb0a f309 	mul.w	r3, sl, r9
 8007810:	9303      	str	r3, [sp, #12]
 8007812:	f7ff ffa5 	bl	8007760 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8007816:	462b      	mov	r3, r5
 8007818:	460a      	mov	r2, r1
 800781a:	e9cd 4700 	strd	r4, r7, [sp]
 800781e:	4601      	mov	r1, r0
 8007820:	4630      	mov	r0, r6
 8007822:	f7ff ffbb 	bl	800779c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8007826:	fb04 b919 	mls	r9, r4, r9, fp
 800782a:	4606      	mov	r6, r0
 800782c:	4648      	mov	r0, r9
 800782e:	eb05 0108 	add.w	r1, r5, r8
 8007832:	f7ff ff95 	bl	8007760 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8007836:	ab05      	add	r3, sp, #20
 8007838:	e9cd 4300 	strd	r4, r3, [sp]
 800783c:	464a      	mov	r2, r9
 800783e:	4603      	mov	r3, r0
 8007840:	4650      	mov	r0, sl
 8007842:	f7ff ffab 	bl	800779c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8007846:	6839      	ldr	r1, [r7, #0]
 8007848:	9a05      	ldr	r2, [sp, #20]
 800784a:	9b03      	ldr	r3, [sp, #12]
 800784c:	4411      	add	r1, r2
 800784e:	fbb1 f2f4 	udiv	r2, r1, r4
 8007852:	18d3      	adds	r3, r2, r3
 8007854:	441e      	add	r6, r3
 8007856:	fb04 1412 	mls	r4, r4, r2, r1
 800785a:	4430      	add	r0, r6
 800785c:	603c      	str	r4, [r7, #0]
 800785e:	e7ae      	b.n	80077be <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>

08007860 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 8007860:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007864:	b085      	sub	sp, #20
 8007866:	f1b0 0900 	subs.w	r9, r0, #0
 800786a:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 800786c:	461d      	mov	r5, r3
 800786e:	bfbf      	itttt	lt
 8007870:	6823      	ldrlt	r3, [r4, #0]
 8007872:	425b      	neglt	r3, r3
 8007874:	f1c9 0900 	rsblt	r9, r9, #0
 8007878:	6023      	strlt	r3, [r4, #0]
 800787a:	bfb4      	ite	lt
 800787c:	f04f 36ff 	movlt.w	r6, #4294967295
 8007880:	2601      	movge	r6, #1
 8007882:	2a00      	cmp	r2, #0
 8007884:	4617      	mov	r7, r2
 8007886:	da04      	bge.n	8007892 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 8007888:	6823      	ldr	r3, [r4, #0]
 800788a:	425b      	negs	r3, r3
 800788c:	4257      	negs	r7, r2
 800788e:	4276      	negs	r6, r6
 8007890:	6023      	str	r3, [r4, #0]
 8007892:	2d00      	cmp	r5, #0
 8007894:	4638      	mov	r0, r7
 8007896:	bfba      	itte	lt
 8007898:	426d      	neglt	r5, r5
 800789a:	f04f 38ff 	movlt.w	r8, #4294967295
 800789e:	f04f 0801 	movge.w	r8, #1
 80078a2:	f7ff ff5d 	bl	8007760 <_ZN8touchgfx16TouchCalibration4clzuEm>
 80078a6:	ab03      	add	r3, sp, #12
 80078a8:	e9cd 5300 	strd	r5, r3, [sp]
 80078ac:	463a      	mov	r2, r7
 80078ae:	4603      	mov	r3, r0
 80078b0:	4648      	mov	r0, r9
 80078b2:	f7ff ff73 	bl	800779c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 80078b6:	6823      	ldr	r3, [r4, #0]
 80078b8:	9a03      	ldr	r2, [sp, #12]
 80078ba:	4546      	cmp	r6, r8
 80078bc:	441a      	add	r2, r3
 80078be:	fb92 f3f5 	sdiv	r3, r2, r5
 80078c2:	4418      	add	r0, r3
 80078c4:	bf18      	it	ne
 80078c6:	4240      	negne	r0, r0
 80078c8:	fb05 2313 	mls	r3, r5, r3, r2
 80078cc:	1c72      	adds	r2, r6, #1
 80078ce:	6023      	str	r3, [r4, #0]
 80078d0:	d105      	bne.n	80078de <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	f1c3 0200 	rsb	r2, r3, #0
 80078d8:	db0b      	blt.n	80078f2 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 80078da:	6022      	str	r2, [r4, #0]
 80078dc:	e006      	b.n	80078ec <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 80078de:	2e01      	cmp	r6, #1
 80078e0:	d104      	bne.n	80078ec <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	da02      	bge.n	80078ec <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 80078e6:	442b      	add	r3, r5
 80078e8:	3801      	subs	r0, #1
 80078ea:	6023      	str	r3, [r4, #0]
 80078ec:	b005      	add	sp, #20
 80078ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80078f2:	3801      	subs	r0, #1
 80078f4:	1b52      	subs	r2, r2, r5
 80078f6:	e7f0      	b.n	80078da <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>

080078f8 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 80078f8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80078fc:	4c1c      	ldr	r4, [pc, #112]	@ (8007970 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 80078fe:	6807      	ldr	r7, [r0, #0]
 8007900:	69a3      	ldr	r3, [r4, #24]
 8007902:	4605      	mov	r5, r0
 8007904:	b92b      	cbnz	r3, 8007912 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 8007906:	6840      	ldr	r0, [r0, #4]
 8007908:	e9c5 7000 	strd	r7, r0, [r5]
 800790c:	b004      	add	sp, #16
 800790e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007912:	68a2      	ldr	r2, [r4, #8]
 8007914:	6820      	ldr	r0, [r4, #0]
 8007916:	ae04      	add	r6, sp, #16
 8007918:	f04f 0802 	mov.w	r8, #2
 800791c:	fb93 f1f8 	sdiv	r1, r3, r8
 8007920:	440a      	add	r2, r1
 8007922:	f846 2d04 	str.w	r2, [r6, #-4]!
 8007926:	69e1      	ldr	r1, [r4, #28]
 8007928:	9600      	str	r6, [sp, #0]
 800792a:	463a      	mov	r2, r7
 800792c:	f7ff ff98 	bl	8007860 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8007930:	69a3      	ldr	r3, [r4, #24]
 8007932:	686a      	ldr	r2, [r5, #4]
 8007934:	6a21      	ldr	r1, [r4, #32]
 8007936:	9600      	str	r6, [sp, #0]
 8007938:	4607      	mov	r7, r0
 800793a:	6860      	ldr	r0, [r4, #4]
 800793c:	f7ff ff90 	bl	8007860 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8007940:	6962      	ldr	r2, [r4, #20]
 8007942:	69a3      	ldr	r3, [r4, #24]
 8007944:	fb93 f8f8 	sdiv	r8, r3, r8
 8007948:	4442      	add	r2, r8
 800794a:	9203      	str	r2, [sp, #12]
 800794c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800794e:	682a      	ldr	r2, [r5, #0]
 8007950:	9600      	str	r6, [sp, #0]
 8007952:	4407      	add	r7, r0
 8007954:	68e0      	ldr	r0, [r4, #12]
 8007956:	f7ff ff83 	bl	8007860 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 800795a:	9600      	str	r6, [sp, #0]
 800795c:	4680      	mov	r8, r0
 800795e:	69a3      	ldr	r3, [r4, #24]
 8007960:	686a      	ldr	r2, [r5, #4]
 8007962:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8007964:	6920      	ldr	r0, [r4, #16]
 8007966:	f7ff ff7b 	bl	8007860 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 800796a:	4440      	add	r0, r8
 800796c:	e7cc      	b.n	8007908 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 800796e:	bf00      	nop
 8007970:	20009184 	.word	0x20009184

08007974 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 8007974:	4b07      	ldr	r3, [pc, #28]	@ (8007994 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 8007976:	781b      	ldrb	r3, [r3, #0]
 8007978:	2b01      	cmp	r3, #1
 800797a:	d109      	bne.n	8007990 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 800797c:	f9b1 3000 	ldrsh.w	r3, [r1]
 8007980:	f9b0 2000 	ldrsh.w	r2, [r0]
 8007984:	8003      	strh	r3, [r0, #0]
 8007986:	4b04      	ldr	r3, [pc, #16]	@ (8007998 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 8007988:	881b      	ldrh	r3, [r3, #0]
 800798a:	3b01      	subs	r3, #1
 800798c:	1a9b      	subs	r3, r3, r2
 800798e:	800b      	strh	r3, [r1, #0]
 8007990:	4770      	bx	lr
 8007992:	bf00      	nop
 8007994:	20009170 	.word	0x20009170
 8007998:	2000916c 	.word	0x2000916c

0800799c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 800799c:	b510      	push	{r4, lr}
 800799e:	4b07      	ldr	r3, [pc, #28]	@ (80079bc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 80079a0:	781b      	ldrb	r3, [r3, #0]
 80079a2:	2b01      	cmp	r3, #1
 80079a4:	d108      	bne.n	80079b8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 80079a6:	4b06      	ldr	r3, [pc, #24]	@ (80079c0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 80079a8:	880c      	ldrh	r4, [r1, #0]
 80079aa:	881b      	ldrh	r3, [r3, #0]
 80079ac:	f9b0 2000 	ldrsh.w	r2, [r0]
 80079b0:	3b01      	subs	r3, #1
 80079b2:	1b1b      	subs	r3, r3, r4
 80079b4:	8003      	strh	r3, [r0, #0]
 80079b6:	800a      	strh	r2, [r1, #0]
 80079b8:	bd10      	pop	{r4, pc}
 80079ba:	bf00      	nop
 80079bc:	20009170 	.word	0x20009170
 80079c0:	2000916c 	.word	0x2000916c

080079c4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 80079c4:	4b08      	ldr	r3, [pc, #32]	@ (80079e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 80079c6:	781b      	ldrb	r3, [r3, #0]
 80079c8:	2b01      	cmp	r3, #1
 80079ca:	d10c      	bne.n	80079e6 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 80079cc:	8803      	ldrh	r3, [r0, #0]
 80079ce:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 80079d2:	8842      	ldrh	r2, [r0, #2]
 80079d4:	8002      	strh	r2, [r0, #0]
 80079d6:	185a      	adds	r2, r3, r1
 80079d8:	4b04      	ldr	r3, [pc, #16]	@ (80079ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 80079da:	881b      	ldrh	r3, [r3, #0]
 80079dc:	1a9b      	subs	r3, r3, r2
 80079de:	8043      	strh	r3, [r0, #2]
 80079e0:	88c3      	ldrh	r3, [r0, #6]
 80079e2:	8083      	strh	r3, [r0, #4]
 80079e4:	80c1      	strh	r1, [r0, #6]
 80079e6:	4770      	bx	lr
 80079e8:	20009170 	.word	0x20009170
 80079ec:	2000916c 	.word	0x2000916c

080079f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 80079f0:	b510      	push	{r4, lr}
 80079f2:	4b07      	ldr	r3, [pc, #28]	@ (8007a10 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 80079f4:	781b      	ldrb	r3, [r3, #0]
 80079f6:	2b01      	cmp	r3, #1
 80079f8:	d108      	bne.n	8007a0c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 80079fa:	f9b1 3000 	ldrsh.w	r3, [r1]
 80079fe:	f9b0 4000 	ldrsh.w	r4, [r0]
 8007a02:	8003      	strh	r3, [r0, #0]
 8007a04:	8893      	ldrh	r3, [r2, #4]
 8007a06:	3b01      	subs	r3, #1
 8007a08:	1b1b      	subs	r3, r3, r4
 8007a0a:	800b      	strh	r3, [r1, #0]
 8007a0c:	bd10      	pop	{r4, pc}
 8007a0e:	bf00      	nop
 8007a10:	20009170 	.word	0x20009170

08007a14 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 8007a14:	b510      	push	{r4, lr}
 8007a16:	4b0a      	ldr	r3, [pc, #40]	@ (8007a40 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 8007a18:	781b      	ldrb	r3, [r3, #0]
 8007a1a:	2b01      	cmp	r3, #1
 8007a1c:	460a      	mov	r2, r1
 8007a1e:	d10d      	bne.n	8007a3c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 8007a20:	8881      	ldrh	r1, [r0, #4]
 8007a22:	8803      	ldrh	r3, [r0, #0]
 8007a24:	440b      	add	r3, r1
 8007a26:	4601      	mov	r1, r0
 8007a28:	3b01      	subs	r3, #1
 8007a2a:	f821 3b02 	strh.w	r3, [r1], #2
 8007a2e:	f7ff ffdf 	bl	80079f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 8007a32:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8007a36:	88c2      	ldrh	r2, [r0, #6]
 8007a38:	8082      	strh	r2, [r0, #4]
 8007a3a:	80c3      	strh	r3, [r0, #6]
 8007a3c:	bd10      	pop	{r4, pc}
 8007a3e:	bf00      	nop
 8007a40:	20009170 	.word	0x20009170

08007a44 <_ZN8touchgfx11Application11getInstanceEv>:
 8007a44:	4b01      	ldr	r3, [pc, #4]	@ (8007a4c <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 8007a46:	6818      	ldr	r0, [r3, #0]
 8007a48:	4770      	bx	lr
 8007a4a:	bf00      	nop
 8007a4c:	200091b8 	.word	0x200091b8

08007a50 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 8007a50:	4b03      	ldr	r3, [pc, #12]	@ (8007a60 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 8007a52:	2200      	movs	r2, #0
 8007a54:	801a      	strh	r2, [r3, #0]
 8007a56:	805a      	strh	r2, [r3, #2]
 8007a58:	809a      	strh	r2, [r3, #4]
 8007a5a:	80da      	strh	r2, [r3, #6]
 8007a5c:	4770      	bx	lr
 8007a5e:	bf00      	nop
 8007a60:	200091b0 	.word	0x200091b0

08007a64 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 8007a64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a68:	4606      	mov	r6, r0
 8007a6a:	b09d      	sub	sp, #116	@ 0x74
 8007a6c:	a803      	add	r0, sp, #12
 8007a6e:	4614      	mov	r4, r2
 8007a70:	468a      	mov	sl, r1
 8007a72:	461d      	mov	r5, r3
 8007a74:	f000 f9d0 	bl	8007e18 <_ZN8touchgfx12TextProviderC1Ev>
 8007a78:	6833      	ldr	r3, [r6, #0]
 8007a7a:	4630      	mov	r0, r6
 8007a7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007a7e:	4798      	blx	r3
 8007a80:	6833      	ldr	r3, [r6, #0]
 8007a82:	4607      	mov	r7, r0
 8007a84:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a86:	4630      	mov	r0, r6
 8007a88:	4798      	blx	r3
 8007a8a:	462a      	mov	r2, r5
 8007a8c:	9000      	str	r0, [sp, #0]
 8007a8e:	4621      	mov	r1, r4
 8007a90:	463b      	mov	r3, r7
 8007a92:	a803      	add	r0, sp, #12
 8007a94:	f000 fa13 	bl	8007ebe <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8007a98:	2500      	movs	r5, #0
 8007a9a:	462c      	mov	r4, r5
 8007a9c:	46a9      	mov	r9, r5
 8007a9e:	46a8      	mov	r8, r5
 8007aa0:	f242 0b0b 	movw	fp, #8203	@ 0x200b
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	9302      	str	r3, [sp, #8]
 8007aa8:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 8007aac:	429c      	cmp	r4, r3
 8007aae:	d002      	beq.n	8007ab6 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 8007ab0:	455c      	cmp	r4, fp
 8007ab2:	bf18      	it	ne
 8007ab4:	4625      	movne	r5, r4
 8007ab6:	ab02      	add	r3, sp, #8
 8007ab8:	4632      	mov	r2, r6
 8007aba:	4651      	mov	r1, sl
 8007abc:	a803      	add	r0, sp, #12
 8007abe:	f000 fd19 	bl	80084f4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8007ac2:	4604      	mov	r4, r0
 8007ac4:	b108      	cbz	r0, 8007aca <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 8007ac6:	280a      	cmp	r0, #10
 8007ac8:	d10a      	bne.n	8007ae0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 8007aca:	45c1      	cmp	r9, r8
 8007acc:	bf38      	it	cc
 8007ace:	46c1      	movcc	r9, r8
 8007ad0:	f04f 0800 	mov.w	r8, #0
 8007ad4:	2c00      	cmp	r4, #0
 8007ad6:	d1e5      	bne.n	8007aa4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 8007ad8:	4648      	mov	r0, r9
 8007ada:	b01d      	add	sp, #116	@ 0x74
 8007adc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ae0:	9a02      	ldr	r2, [sp, #8]
 8007ae2:	2a00      	cmp	r2, #0
 8007ae4:	d0de      	beq.n	8007aa4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 8007ae6:	7b57      	ldrb	r7, [r2, #13]
 8007ae8:	6833      	ldr	r3, [r6, #0]
 8007aea:	8894      	ldrh	r4, [r2, #4]
 8007aec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007aee:	007f      	lsls	r7, r7, #1
 8007af0:	f407 7080 	and.w	r0, r7, #256	@ 0x100
 8007af4:	7a97      	ldrb	r7, [r2, #10]
 8007af6:	4629      	mov	r1, r5
 8007af8:	4307      	orrs	r7, r0
 8007afa:	4630      	mov	r0, r6
 8007afc:	4798      	blx	r3
 8007afe:	4438      	add	r0, r7
 8007b00:	4480      	add	r8, r0
 8007b02:	fa1f f888 	uxth.w	r8, r8
 8007b06:	e7e5      	b.n	8007ad4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

08007b08 <_ZNK8touchgfx4Font12getCharWidthEt>:
 8007b08:	b508      	push	{r3, lr}
 8007b0a:	6803      	ldr	r3, [r0, #0]
 8007b0c:	68db      	ldr	r3, [r3, #12]
 8007b0e:	4798      	blx	r3
 8007b10:	b128      	cbz	r0, 8007b1e <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 8007b12:	7b43      	ldrb	r3, [r0, #13]
 8007b14:	7a80      	ldrb	r0, [r0, #10]
 8007b16:	005b      	lsls	r3, r3, #1
 8007b18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b1c:	4318      	orrs	r0, r3
 8007b1e:	bd08      	pop	{r3, pc}

08007b20 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 8007b20:	b40e      	push	{r1, r2, r3}
 8007b22:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b24:	b09e      	sub	sp, #120	@ 0x78
 8007b26:	ab23      	add	r3, sp, #140	@ 0x8c
 8007b28:	4605      	mov	r5, r0
 8007b2a:	f853 4b04 	ldr.w	r4, [r3], #4
 8007b2e:	9303      	str	r3, [sp, #12]
 8007b30:	a805      	add	r0, sp, #20
 8007b32:	f000 f971 	bl	8007e18 <_ZN8touchgfx12TextProviderC1Ev>
 8007b36:	682b      	ldr	r3, [r5, #0]
 8007b38:	4628      	mov	r0, r5
 8007b3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007b3c:	4798      	blx	r3
 8007b3e:	682b      	ldr	r3, [r5, #0]
 8007b40:	4606      	mov	r6, r0
 8007b42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b44:	4628      	mov	r0, r5
 8007b46:	4798      	blx	r3
 8007b48:	4633      	mov	r3, r6
 8007b4a:	ae1e      	add	r6, sp, #120	@ 0x78
 8007b4c:	4621      	mov	r1, r4
 8007b4e:	9000      	str	r0, [sp, #0]
 8007b50:	9a03      	ldr	r2, [sp, #12]
 8007b52:	2400      	movs	r4, #0
 8007b54:	a805      	add	r0, sp, #20
 8007b56:	f000 f9b2 	bl	8007ebe <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8007b5a:	f846 4d68 	str.w	r4, [r6, #-104]!
 8007b5e:	462a      	mov	r2, r5
 8007b60:	4633      	mov	r3, r6
 8007b62:	4621      	mov	r1, r4
 8007b64:	a805      	add	r0, sp, #20
 8007b66:	f000 fcc5 	bl	80084f4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8007b6a:	b1f0      	cbz	r0, 8007baa <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8a>
 8007b6c:	280a      	cmp	r0, #10
 8007b6e:	d018      	beq.n	8007ba2 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x82>
 8007b70:	9f04      	ldr	r7, [sp, #16]
 8007b72:	b1b7      	cbz	r7, 8007ba2 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x82>
 8007b74:	7b78      	ldrb	r0, [r7, #13]
 8007b76:	7a3b      	ldrb	r3, [r7, #8]
 8007b78:	88ea      	ldrh	r2, [r5, #6]
 8007b7a:	00c1      	lsls	r1, r0, #3
 8007b7c:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 8007b80:	4319      	orrs	r1, r3
 8007b82:	0643      	lsls	r3, r0, #25
 8007b84:	bf44      	itt	mi
 8007b86:	f5a1 7300 	submi.w	r3, r1, #512	@ 0x200
 8007b8a:	b219      	sxthmi	r1, r3
 8007b8c:	0100      	lsls	r0, r0, #4
 8007b8e:	79fb      	ldrb	r3, [r7, #7]
 8007b90:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 8007b94:	4303      	orrs	r3, r0
 8007b96:	4413      	add	r3, r2
 8007b98:	1a5b      	subs	r3, r3, r1
 8007b9a:	b21b      	sxth	r3, r3
 8007b9c:	429c      	cmp	r4, r3
 8007b9e:	bfb8      	it	lt
 8007ba0:	461c      	movlt	r4, r3
 8007ba2:	4633      	mov	r3, r6
 8007ba4:	462a      	mov	r2, r5
 8007ba6:	2100      	movs	r1, #0
 8007ba8:	e7dc      	b.n	8007b64 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 8007baa:	b2a0      	uxth	r0, r4
 8007bac:	b01e      	add	sp, #120	@ 0x78
 8007bae:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8007bb2:	b003      	add	sp, #12
 8007bb4:	4770      	bx	lr

08007bb6 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
 8007bb6:	7a43      	ldrb	r3, [r0, #9]
 8007bb8:	8880      	ldrh	r0, [r0, #4]
 8007bba:	4418      	add	r0, r3
 8007bbc:	b280      	uxth	r0, r0
 8007bbe:	4770      	bx	lr

08007bc0 <_ZNK8touchgfx4Font13getFontHeightEv>:
 8007bc0:	6803      	ldr	r3, [r0, #0]
 8007bc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007bc4:	4718      	bx	r3

08007bc6 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 8007bc6:	b40e      	push	{r1, r2, r3}
 8007bc8:	b570      	push	{r4, r5, r6, lr}
 8007bca:	b09d      	sub	sp, #116	@ 0x74
 8007bcc:	ab21      	add	r3, sp, #132	@ 0x84
 8007bce:	4604      	mov	r4, r0
 8007bd0:	f853 5b04 	ldr.w	r5, [r3], #4
 8007bd4:	9302      	str	r3, [sp, #8]
 8007bd6:	a803      	add	r0, sp, #12
 8007bd8:	f000 f91e 	bl	8007e18 <_ZN8touchgfx12TextProviderC1Ev>
 8007bdc:	6823      	ldr	r3, [r4, #0]
 8007bde:	4620      	mov	r0, r4
 8007be0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007be2:	4798      	blx	r3
 8007be4:	6823      	ldr	r3, [r4, #0]
 8007be6:	4606      	mov	r6, r0
 8007be8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007bea:	4620      	mov	r0, r4
 8007bec:	4798      	blx	r3
 8007bee:	4633      	mov	r3, r6
 8007bf0:	9000      	str	r0, [sp, #0]
 8007bf2:	9a02      	ldr	r2, [sp, #8]
 8007bf4:	4629      	mov	r1, r5
 8007bf6:	a803      	add	r0, sp, #12
 8007bf8:	f000 f961 	bl	8007ebe <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8007bfc:	a803      	add	r0, sp, #12
 8007bfe:	f000 fcfb 	bl	80085f8 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8007c02:	2401      	movs	r4, #1
 8007c04:	b2a3      	uxth	r3, r4
 8007c06:	b140      	cbz	r0, 8007c1a <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x54>
 8007c08:	280a      	cmp	r0, #10
 8007c0a:	bf08      	it	eq
 8007c0c:	3301      	addeq	r3, #1
 8007c0e:	a803      	add	r0, sp, #12
 8007c10:	bf08      	it	eq
 8007c12:	b21c      	sxtheq	r4, r3
 8007c14:	f000 fcf0 	bl	80085f8 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8007c18:	e7f4      	b.n	8007c04 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	b01d      	add	sp, #116	@ 0x74
 8007c1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007c22:	b003      	add	sp, #12
 8007c24:	4770      	bx	lr

08007c26 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 8007c26:	b40e      	push	{r1, r2, r3}
 8007c28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c2a:	b09e      	sub	sp, #120	@ 0x78
 8007c2c:	ab23      	add	r3, sp, #140	@ 0x8c
 8007c2e:	4604      	mov	r4, r0
 8007c30:	f853 5b04 	ldr.w	r5, [r3], #4
 8007c34:	9303      	str	r3, [sp, #12]
 8007c36:	a805      	add	r0, sp, #20
 8007c38:	f000 f8ee 	bl	8007e18 <_ZN8touchgfx12TextProviderC1Ev>
 8007c3c:	6823      	ldr	r3, [r4, #0]
 8007c3e:	4620      	mov	r0, r4
 8007c40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007c42:	4798      	blx	r3
 8007c44:	6823      	ldr	r3, [r4, #0]
 8007c46:	4606      	mov	r6, r0
 8007c48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007c4a:	4620      	mov	r0, r4
 8007c4c:	4798      	blx	r3
 8007c4e:	4633      	mov	r3, r6
 8007c50:	4629      	mov	r1, r5
 8007c52:	9000      	str	r0, [sp, #0]
 8007c54:	9a03      	ldr	r2, [sp, #12]
 8007c56:	a805      	add	r0, sp, #20
 8007c58:	ad1e      	add	r5, sp, #120	@ 0x78
 8007c5a:	f000 f930 	bl	8007ebe <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8007c5e:	2100      	movs	r1, #0
 8007c60:	f845 1d68 	str.w	r1, [r5, #-104]!
 8007c64:	4622      	mov	r2, r4
 8007c66:	462b      	mov	r3, r5
 8007c68:	a805      	add	r0, sp, #20
 8007c6a:	f000 fc43 	bl	80084f4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8007c6e:	f647 76ff 	movw	r6, #32767	@ 0x7fff
 8007c72:	b1d8      	cbz	r0, 8007cac <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x86>
 8007c74:	280a      	cmp	r0, #10
 8007c76:	d012      	beq.n	8007c9e <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 8007c78:	9804      	ldr	r0, [sp, #16]
 8007c7a:	b180      	cbz	r0, 8007c9e <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 8007c7c:	7b47      	ldrb	r7, [r0, #13]
 8007c7e:	88e2      	ldrh	r2, [r4, #6]
 8007c80:	00fb      	lsls	r3, r7, #3
 8007c82:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 8007c86:	7a03      	ldrb	r3, [r0, #8]
 8007c88:	430b      	orrs	r3, r1
 8007c8a:	0679      	lsls	r1, r7, #25
 8007c8c:	bf44      	itt	mi
 8007c8e:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8007c92:	b21b      	sxthmi	r3, r3
 8007c94:	1ad3      	subs	r3, r2, r3
 8007c96:	b21b      	sxth	r3, r3
 8007c98:	429e      	cmp	r6, r3
 8007c9a:	bfa8      	it	ge
 8007c9c:	461e      	movge	r6, r3
 8007c9e:	462b      	mov	r3, r5
 8007ca0:	4622      	mov	r2, r4
 8007ca2:	2100      	movs	r1, #0
 8007ca4:	a805      	add	r0, sp, #20
 8007ca6:	f000 fc25 	bl	80084f4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8007caa:	e7e2      	b.n	8007c72 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
 8007cac:	4630      	mov	r0, r6
 8007cae:	b01e      	add	sp, #120	@ 0x78
 8007cb0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8007cb4:	b003      	add	sp, #12
 8007cb6:	4770      	bx	lr

08007cb8 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>:
 8007cb8:	b530      	push	{r4, r5, lr}
 8007cba:	8083      	strh	r3, [r0, #4]
 8007cbc:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8007cc0:	80c3      	strh	r3, [r0, #6]
 8007cc2:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8007cc6:	7203      	strb	r3, [r0, #8]
 8007cc8:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8007ccc:	f89d 5018 	ldrb.w	r5, [sp, #24]
 8007cd0:	7243      	strb	r3, [r0, #9]
 8007cd2:	7a83      	ldrb	r3, [r0, #10]
 8007cd4:	6141      	str	r1, [r0, #20]
 8007cd6:	f365 0306 	bfi	r3, r5, #0, #7
 8007cda:	f89d 501c 	ldrb.w	r5, [sp, #28]
 8007cde:	8302      	strh	r2, [r0, #24]
 8007ce0:	f365 13c7 	bfi	r3, r5, #7, #1
 8007ce4:	7283      	strb	r3, [r0, #10]
 8007ce6:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8007cea:	72c3      	strb	r3, [r0, #11]
 8007cec:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8007cf0:	7303      	strb	r3, [r0, #12]
 8007cf2:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 8007cf6:	81c3      	strh	r3, [r0, #14]
 8007cf8:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 8007cfc:	8203      	strh	r3, [r0, #16]
 8007cfe:	4b01      	ldr	r3, [pc, #4]	@ (8007d04 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt+0x4c>)
 8007d00:	6003      	str	r3, [r0, #0]
 8007d02:	bd30      	pop	{r4, r5, pc}
 8007d04:	0800ca94 	.word	0x0800ca94

08007d08 <_ZNK8touchgfx9ConstFont4findEt>:
 8007d08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d0a:	6944      	ldr	r4, [r0, #20]
 8007d0c:	b3bc      	cbz	r4, 8007d7e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8007d0e:	88a3      	ldrh	r3, [r4, #4]
 8007d10:	8b02      	ldrh	r2, [r0, #24]
 8007d12:	1acb      	subs	r3, r1, r3
 8007d14:	f102 32ff 	add.w	r2, r2, #4294967295
 8007d18:	d431      	bmi.n	8007d7e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8007d1a:	4293      	cmp	r3, r2
 8007d1c:	dd0c      	ble.n	8007d38 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 8007d1e:	230e      	movs	r3, #14
 8007d20:	fb03 4302 	mla	r3, r3, r2, r4
 8007d24:	889b      	ldrh	r3, [r3, #4]
 8007d26:	1a5b      	subs	r3, r3, r1
 8007d28:	1ad3      	subs	r3, r2, r3
 8007d2a:	429a      	cmp	r2, r3
 8007d2c:	db27      	blt.n	8007d7e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	bfbc      	itt	lt
 8007d32:	2302      	movlt	r3, #2
 8007d34:	fb92 f3f3 	sdivlt	r3, r2, r3
 8007d38:	2500      	movs	r5, #0
 8007d3a:	260e      	movs	r6, #14
 8007d3c:	4295      	cmp	r5, r2
 8007d3e:	dc1e      	bgt.n	8007d7e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8007d40:	fb06 4003 	mla	r0, r6, r3, r4
 8007d44:	8887      	ldrh	r7, [r0, #4]
 8007d46:	42b9      	cmp	r1, r7
 8007d48:	d01a      	beq.n	8007d80 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 8007d4a:	d20d      	bcs.n	8007d68 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 8007d4c:	1e5a      	subs	r2, r3, #1
 8007d4e:	4295      	cmp	r5, r2
 8007d50:	dc15      	bgt.n	8007d7e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8007d52:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 8007d56:	1a5b      	subs	r3, r3, r1
 8007d58:	1ad3      	subs	r3, r2, r3
 8007d5a:	429a      	cmp	r2, r3
 8007d5c:	db0f      	blt.n	8007d7e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8007d5e:	429d      	cmp	r5, r3
 8007d60:	ddec      	ble.n	8007d3c <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8007d62:	1953      	adds	r3, r2, r5
 8007d64:	105b      	asrs	r3, r3, #1
 8007d66:	e7e9      	b.n	8007d3c <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8007d68:	1c5d      	adds	r5, r3, #1
 8007d6a:	42aa      	cmp	r2, r5
 8007d6c:	db07      	blt.n	8007d7e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8007d6e:	8a43      	ldrh	r3, [r0, #18]
 8007d70:	1acb      	subs	r3, r1, r3
 8007d72:	442b      	add	r3, r5
 8007d74:	429d      	cmp	r5, r3
 8007d76:	dc02      	bgt.n	8007d7e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8007d78:	429a      	cmp	r2, r3
 8007d7a:	dadf      	bge.n	8007d3c <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8007d7c:	e7f1      	b.n	8007d62 <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 8007d7e:	2000      	movs	r0, #0
 8007d80:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007d82 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 8007d82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d84:	4604      	mov	r4, r0
 8007d86:	4617      	mov	r7, r2
 8007d88:	461e      	mov	r6, r3
 8007d8a:	b911      	cbnz	r1, 8007d92 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 8007d8c:	2500      	movs	r5, #0
 8007d8e:	4628      	mov	r0, r5
 8007d90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d92:	290a      	cmp	r1, #10
 8007d94:	d0fa      	beq.n	8007d8c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8007d96:	f64f 62ff 	movw	r2, #65279	@ 0xfeff
 8007d9a:	4291      	cmp	r1, r2
 8007d9c:	d0f6      	beq.n	8007d8c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8007d9e:	f242 020b 	movw	r2, #8203	@ 0x200b
 8007da2:	4291      	cmp	r1, r2
 8007da4:	d0f2      	beq.n	8007d8c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8007da6:	f7ff ffaf 	bl	8007d08 <_ZNK8touchgfx9ConstFont4findEt>
 8007daa:	4605      	mov	r5, r0
 8007dac:	b950      	cbnz	r0, 8007dc4 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 8007dae:	6823      	ldr	r3, [r4, #0]
 8007db0:	4620      	mov	r0, r4
 8007db2:	691b      	ldr	r3, [r3, #16]
 8007db4:	4798      	blx	r3
 8007db6:	4601      	mov	r1, r0
 8007db8:	4620      	mov	r0, r4
 8007dba:	f7ff ffa5 	bl	8007d08 <_ZNK8touchgfx9ConstFont4findEt>
 8007dbe:	4605      	mov	r5, r0
 8007dc0:	2800      	cmp	r0, #0
 8007dc2:	d0e3      	beq.n	8007d8c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8007dc4:	6823      	ldr	r3, [r4, #0]
 8007dc6:	4629      	mov	r1, r5
 8007dc8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007dca:	4620      	mov	r0, r4
 8007dcc:	4798      	blx	r3
 8007dce:	6038      	str	r0, [r7, #0]
 8007dd0:	6823      	ldr	r3, [r4, #0]
 8007dd2:	4620      	mov	r0, r4
 8007dd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007dd6:	4798      	blx	r3
 8007dd8:	7030      	strb	r0, [r6, #0]
 8007dda:	e7d8      	b.n	8007d8e <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

08007ddc <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 8007ddc:	2000      	movs	r0, #0
 8007dde:	4770      	bx	lr

08007de0 <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 8007de0:	2001      	movs	r0, #1
 8007de2:	4770      	bx	lr

08007de4 <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 8007de4:	2002      	movs	r0, #2
 8007de6:	4770      	bx	lr

08007de8 <_ZN8touchgfx12GestureEventD1Ev>:
 8007de8:	4770      	bx	lr

08007dea <_ZN8touchgfx9DragEventD1Ev>:
 8007dea:	4770      	bx	lr

08007dec <_ZN8touchgfx10ClickEventD1Ev>:
 8007dec:	4770      	bx	lr

08007dee <_ZN8touchgfx10ClickEventD0Ev>:
 8007dee:	b510      	push	{r4, lr}
 8007df0:	210c      	movs	r1, #12
 8007df2:	4604      	mov	r4, r0
 8007df4:	f003 f988 	bl	800b108 <_ZdlPvj>
 8007df8:	4620      	mov	r0, r4
 8007dfa:	bd10      	pop	{r4, pc}

08007dfc <_ZN8touchgfx9DragEventD0Ev>:
 8007dfc:	b510      	push	{r4, lr}
 8007dfe:	2110      	movs	r1, #16
 8007e00:	4604      	mov	r4, r0
 8007e02:	f003 f981 	bl	800b108 <_ZdlPvj>
 8007e06:	4620      	mov	r0, r4
 8007e08:	bd10      	pop	{r4, pc}

08007e0a <_ZN8touchgfx12GestureEventD0Ev>:
 8007e0a:	b510      	push	{r4, lr}
 8007e0c:	210c      	movs	r1, #12
 8007e0e:	4604      	mov	r4, r0
 8007e10:	f003 f97a 	bl	800b108 <_ZdlPvj>
 8007e14:	4620      	mov	r0, r4
 8007e16:	bd10      	pop	{r4, pc}

08007e18 <_ZN8touchgfx12TextProviderC1Ev>:
 8007e18:	b538      	push	{r3, r4, r5, lr}
 8007e1a:	2500      	movs	r5, #0
 8007e1c:	2302      	movs	r3, #2
 8007e1e:	4604      	mov	r4, r0
 8007e20:	e9c0 5500 	strd	r5, r5, [r0]
 8007e24:	7403      	strb	r3, [r0, #16]
 8007e26:	6145      	str	r5, [r0, #20]
 8007e28:	7605      	strb	r5, [r0, #24]
 8007e2a:	83c5      	strh	r5, [r0, #30]
 8007e2c:	8405      	strh	r5, [r0, #32]
 8007e2e:	86c5      	strh	r5, [r0, #54]	@ 0x36
 8007e30:	8705      	strh	r5, [r0, #56]	@ 0x38
 8007e32:	87c5      	strh	r5, [r0, #62]	@ 0x3e
 8007e34:	f8a0 5040 	strh.w	r5, [r0, #64]	@ 0x40
 8007e38:	e9c0 5511 	strd	r5, r5, [r0, #68]	@ 0x44
 8007e3c:	220e      	movs	r2, #14
 8007e3e:	4629      	mov	r1, r5
 8007e40:	304c      	adds	r0, #76	@ 0x4c
 8007e42:	f003 fb88 	bl	800b556 <memset>
 8007e46:	2301      	movs	r3, #1
 8007e48:	4620      	mov	r0, r4
 8007e4a:	f8a4 505a 	strh.w	r5, [r4, #90]	@ 0x5a
 8007e4e:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 8007e52:	f8a4 505e 	strh.w	r5, [r4, #94]	@ 0x5e
 8007e56:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
 8007e5a:	f884 5061 	strb.w	r5, [r4, #97]	@ 0x61
 8007e5e:	f7f9 fda7 	bl	80019b0 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 8007e62:	4620      	mov	r0, r4
 8007e64:	bd38      	pop	{r3, r4, r5, pc}

08007e66 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 8007e66:	b530      	push	{r4, r5, lr}
 8007e68:	2500      	movs	r5, #0
 8007e6a:	2401      	movs	r4, #1
 8007e6c:	6843      	ldr	r3, [r0, #4]
 8007e6e:	b913      	cbnz	r3, 8007e76 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 8007e70:	6803      	ldr	r3, [r0, #0]
 8007e72:	b313      	cbz	r3, 8007eba <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 8007e74:	6043      	str	r3, [r0, #4]
 8007e76:	7e03      	ldrb	r3, [r0, #24]
 8007e78:	b143      	cbz	r3, 8007e8c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 8007e7a:	6943      	ldr	r3, [r0, #20]
 8007e7c:	b12b      	cbz	r3, 8007e8a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8007e7e:	881a      	ldrh	r2, [r3, #0]
 8007e80:	b11a      	cbz	r2, 8007e8a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8007e82:	1c9a      	adds	r2, r3, #2
 8007e84:	6142      	str	r2, [r0, #20]
 8007e86:	8818      	ldrh	r0, [r3, #0]
 8007e88:	bd30      	pop	{r4, r5, pc}
 8007e8a:	7605      	strb	r5, [r0, #24]
 8007e8c:	6843      	ldr	r3, [r0, #4]
 8007e8e:	8819      	ldrh	r1, [r3, #0]
 8007e90:	b199      	cbz	r1, 8007eba <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 8007e92:	1c9a      	adds	r2, r3, #2
 8007e94:	2902      	cmp	r1, #2
 8007e96:	6042      	str	r2, [r0, #4]
 8007e98:	d1f5      	bne.n	8007e86 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 8007e9a:	7c03      	ldrb	r3, [r0, #16]
 8007e9c:	2b01      	cmp	r3, #1
 8007e9e:	d8e5      	bhi.n	8007e6c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8007ea0:	1c5a      	adds	r2, r3, #1
 8007ea2:	3302      	adds	r3, #2
 8007ea4:	7402      	strb	r2, [r0, #16]
 8007ea6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8007eaa:	6143      	str	r3, [r0, #20]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d0dd      	beq.n	8007e6c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8007eb0:	881b      	ldrh	r3, [r3, #0]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d0da      	beq.n	8007e6c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8007eb6:	7604      	strb	r4, [r0, #24]
 8007eb8:	e7d8      	b.n	8007e6c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8007eba:	2000      	movs	r0, #0
 8007ebc:	e7e4      	b.n	8007e88 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

08007ebe <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 8007ebe:	b430      	push	{r4, r5}
 8007ec0:	6001      	str	r1, [r0, #0]
 8007ec2:	2100      	movs	r1, #0
 8007ec4:	6041      	str	r1, [r0, #4]
 8007ec6:	6815      	ldr	r5, [r2, #0]
 8007ec8:	6085      	str	r5, [r0, #8]
 8007eca:	6852      	ldr	r2, [r2, #4]
 8007ecc:	6443      	str	r3, [r0, #68]	@ 0x44
 8007ece:	9b02      	ldr	r3, [sp, #8]
 8007ed0:	60c2      	str	r2, [r0, #12]
 8007ed2:	7401      	strb	r1, [r0, #16]
 8007ed4:	6141      	str	r1, [r0, #20]
 8007ed6:	7601      	strb	r1, [r0, #24]
 8007ed8:	8701      	strh	r1, [r0, #56]	@ 0x38
 8007eda:	8401      	strh	r1, [r0, #32]
 8007edc:	f8a0 1040 	strh.w	r1, [r0, #64]	@ 0x40
 8007ee0:	6483      	str	r3, [r0, #72]	@ 0x48
 8007ee2:	bc30      	pop	{r4, r5}
 8007ee4:	f7f9 bd64 	b.w	80019b0 <_ZN8touchgfx12TextProvider18initializeInternalEv>

08007ee8 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 8007ee8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007eea:	4605      	mov	r5, r0
 8007eec:	4608      	mov	r0, r1
 8007eee:	b1e9      	cbz	r1, 8007f2c <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x44>
 8007ef0:	f105 044c 	add.w	r4, r5, #76	@ 0x4c
 8007ef4:	460b      	mov	r3, r1
 8007ef6:	f101 0708 	add.w	r7, r1, #8
 8007efa:	4622      	mov	r2, r4
 8007efc:	6818      	ldr	r0, [r3, #0]
 8007efe:	6859      	ldr	r1, [r3, #4]
 8007f00:	4626      	mov	r6, r4
 8007f02:	c603      	stmia	r6!, {r0, r1}
 8007f04:	3308      	adds	r3, #8
 8007f06:	42bb      	cmp	r3, r7
 8007f08:	4634      	mov	r4, r6
 8007f0a:	d1f7      	bne.n	8007efc <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 8007f0c:	6818      	ldr	r0, [r3, #0]
 8007f0e:	6030      	str	r0, [r6, #0]
 8007f10:	889b      	ldrh	r3, [r3, #4]
 8007f12:	80b3      	strh	r3, [r6, #4]
 8007f14:	f895 3059 	ldrb.w	r3, [r5, #89]	@ 0x59
 8007f18:	015b      	lsls	r3, r3, #5
 8007f1a:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 8007f1e:	f895 3052 	ldrb.w	r3, [r5, #82]	@ 0x52
 8007f22:	430b      	orrs	r3, r1
 8007f24:	425b      	negs	r3, r3
 8007f26:	f885 3055 	strb.w	r3, [r5, #85]	@ 0x55
 8007f2a:	4610      	mov	r0, r2
 8007f2c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007f2e <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 8007f2e:	b538      	push	{r3, r4, r5, lr}
 8007f30:	460c      	mov	r4, r1
 8007f32:	6811      	ldr	r1, [r2, #0]
 8007f34:	4610      	mov	r0, r2
 8007f36:	68cd      	ldr	r5, [r1, #12]
 8007f38:	4619      	mov	r1, r3
 8007f3a:	47a8      	blx	r5
 8007f3c:	2800      	cmp	r0, #0
 8007f3e:	bf08      	it	eq
 8007f40:	4620      	moveq	r0, r4
 8007f42:	bd38      	pop	{r3, r4, r5, pc}

08007f44 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 8007f44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f48:	468c      	mov	ip, r1
 8007f4a:	4605      	mov	r5, r0
 8007f4c:	4614      	mov	r4, r2
 8007f4e:	b942      	cbnz	r2, 8007f62 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1e>
 8007f50:	f8a5 205a 	strh.w	r2, [r5, #90]	@ 0x5a
 8007f54:	f8a5 205c 	strh.w	r2, [r5, #92]	@ 0x5c
 8007f58:	f8a5 205e 	strh.w	r2, [r5, #94]	@ 0x5e
 8007f5c:	4620      	mov	r0, r4
 8007f5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f62:	7b50      	ldrb	r0, [r2, #13]
 8007f64:	8893      	ldrh	r3, [r2, #4]
 8007f66:	0106      	lsls	r6, r0, #4
 8007f68:	f406 7280 	and.w	r2, r6, #256	@ 0x100
 8007f6c:	79e6      	ldrb	r6, [r4, #7]
 8007f6e:	f46f 6163 	mvn.w	r1, #3632	@ 0xe30
 8007f72:	4316      	orrs	r6, r2
 8007f74:	185a      	adds	r2, r3, r1
 8007f76:	b291      	uxth	r1, r2
 8007f78:	291d      	cmp	r1, #29
 8007f7a:	b2b7      	uxth	r7, r6
 8007f7c:	d87e      	bhi.n	800807c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x138>
 8007f7e:	2201      	movs	r2, #1
 8007f80:	408a      	lsls	r2, r1
 8007f82:	498a      	ldr	r1, [pc, #552]	@ (80081ac <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x268>)
 8007f84:	420a      	tst	r2, r1
 8007f86:	ea4f 06e6 	mov.w	r6, r6, asr #3
 8007f8a:	d12d      	bne.n	8007fe8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
 8007f8c:	f412 7f60 	tst.w	r2, #896	@ 0x380
 8007f90:	d074      	beq.n	800807c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x138>
 8007f92:	f105 024c 	add.w	r2, r5, #76	@ 0x4c
 8007f96:	4623      	mov	r3, r4
 8007f98:	f104 0e08 	add.w	lr, r4, #8
 8007f9c:	4614      	mov	r4, r2
 8007f9e:	6818      	ldr	r0, [r3, #0]
 8007fa0:	6859      	ldr	r1, [r3, #4]
 8007fa2:	4694      	mov	ip, r2
 8007fa4:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8007fa8:	3308      	adds	r3, #8
 8007faa:	4573      	cmp	r3, lr
 8007fac:	4662      	mov	r2, ip
 8007fae:	d1f6      	bne.n	8007f9e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x5a>
 8007fb0:	6818      	ldr	r0, [r3, #0]
 8007fb2:	f8cc 0000 	str.w	r0, [ip]
 8007fb6:	889b      	ldrh	r3, [r3, #4]
 8007fb8:	f8ac 3004 	strh.w	r3, [ip, #4]
 8007fbc:	f8b5 105c 	ldrh.w	r1, [r5, #92]	@ 0x5c
 8007fc0:	f895 0059 	ldrb.w	r0, [r5, #89]	@ 0x59
 8007fc4:	b2b3      	uxth	r3, r6
 8007fc6:	1aca      	subs	r2, r1, r3
 8007fc8:	b292      	uxth	r2, r2
 8007fca:	f885 2054 	strb.w	r2, [r5, #84]	@ 0x54
 8007fce:	10d2      	asrs	r2, r2, #3
 8007fd0:	f020 0060 	bic.w	r0, r0, #96	@ 0x60
 8007fd4:	f002 0260 	and.w	r2, r2, #96	@ 0x60
 8007fd8:	4302      	orrs	r2, r0
 8007fda:	1bcf      	subs	r7, r1, r7
 8007fdc:	f885 2059 	strb.w	r2, [r5, #89]	@ 0x59
 8007fe0:	1afb      	subs	r3, r7, r3
 8007fe2:	f8a5 305c 	strh.w	r3, [r5, #92]	@ 0x5c
 8007fe6:	e7b9      	b.n	8007f5c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x18>
 8007fe8:	f105 024c 	add.w	r2, r5, #76	@ 0x4c
 8007fec:	4623      	mov	r3, r4
 8007fee:	f104 0808 	add.w	r8, r4, #8
 8007ff2:	4614      	mov	r4, r2
 8007ff4:	6818      	ldr	r0, [r3, #0]
 8007ff6:	6859      	ldr	r1, [r3, #4]
 8007ff8:	4696      	mov	lr, r2
 8007ffa:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 8007ffe:	3308      	adds	r3, #8
 8008000:	4543      	cmp	r3, r8
 8008002:	4672      	mov	r2, lr
 8008004:	d1f6      	bne.n	8007ff4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xb0>
 8008006:	6818      	ldr	r0, [r3, #0]
 8008008:	f8ce 0000 	str.w	r0, [lr]
 800800c:	889b      	ldrh	r3, [r3, #4]
 800800e:	f8ae 3004 	strh.w	r3, [lr, #4]
 8008012:	8eeb      	ldrh	r3, [r5, #54]	@ 0x36
 8008014:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8008018:	8c59      	ldrh	r1, [r3, #34]	@ 0x22
 800801a:	f640 6333 	movw	r3, #3635	@ 0xe33
 800801e:	4299      	cmp	r1, r3
 8008020:	d111      	bne.n	8008046 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x102>
 8008022:	f8dc 3000 	ldr.w	r3, [ip]
 8008026:	4660      	mov	r0, ip
 8008028:	68db      	ldr	r3, [r3, #12]
 800802a:	4798      	blx	r3
 800802c:	7b41      	ldrb	r1, [r0, #13]
 800802e:	00cb      	lsls	r3, r1, #3
 8008030:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8008034:	7a03      	ldrb	r3, [r0, #8]
 8008036:	4313      	orrs	r3, r2
 8008038:	064a      	lsls	r2, r1, #25
 800803a:	bf44      	itt	mi
 800803c:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8008040:	b21b      	sxthmi	r3, r3
 8008042:	f8a5 305a 	strh.w	r3, [r5, #90]	@ 0x5a
 8008046:	f8b5 305a 	ldrh.w	r3, [r5, #90]	@ 0x5a
 800804a:	f895 2059 	ldrb.w	r2, [r5, #89]	@ 0x59
 800804e:	443b      	add	r3, r7
 8008050:	4433      	add	r3, r6
 8008052:	b29b      	uxth	r3, r3
 8008054:	f8a5 305a 	strh.w	r3, [r5, #90]	@ 0x5a
 8008058:	f885 3054 	strb.w	r3, [r5, #84]	@ 0x54
 800805c:	10db      	asrs	r3, r3, #3
 800805e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8008062:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008066:	4313      	orrs	r3, r2
 8008068:	f885 3059 	strb.w	r3, [r5, #89]	@ 0x59
 800806c:	f895 205e 	ldrb.w	r2, [r5, #94]	@ 0x5e
 8008070:	f895 3055 	ldrb.w	r3, [r5, #85]	@ 0x55
 8008074:	1a9b      	subs	r3, r3, r2
 8008076:	f885 3055 	strb.w	r3, [r5, #85]	@ 0x55
 800807a:	e76f      	b.n	8007f5c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x18>
 800807c:	f023 0204 	bic.w	r2, r3, #4
 8008080:	f640 611b 	movw	r1, #3611	@ 0xe1b
 8008084:	428a      	cmp	r2, r1
 8008086:	d003      	beq.n	8008090 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x14c>
 8008088:	f640 621d 	movw	r2, #3613	@ 0xe1d
 800808c:	4293      	cmp	r3, r2
 800808e:	d137      	bne.n	8008100 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1bc>
 8008090:	f105 064c 	add.w	r6, r5, #76	@ 0x4c
 8008094:	4622      	mov	r2, r4
 8008096:	f104 0808 	add.w	r8, r4, #8
 800809a:	4634      	mov	r4, r6
 800809c:	6810      	ldr	r0, [r2, #0]
 800809e:	6851      	ldr	r1, [r2, #4]
 80080a0:	46b6      	mov	lr, r6
 80080a2:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 80080a6:	3208      	adds	r2, #8
 80080a8:	4542      	cmp	r2, r8
 80080aa:	4676      	mov	r6, lr
 80080ac:	d1f6      	bne.n	800809c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x158>
 80080ae:	6810      	ldr	r0, [r2, #0]
 80080b0:	f8ce 0000 	str.w	r0, [lr]
 80080b4:	8892      	ldrh	r2, [r2, #4]
 80080b6:	f8ae 2004 	strh.w	r2, [lr, #4]
 80080ba:	3b01      	subs	r3, #1
 80080bc:	b29b      	uxth	r3, r3
 80080be:	4662      	mov	r2, ip
 80080c0:	4621      	mov	r1, r4
 80080c2:	4628      	mov	r0, r5
 80080c4:	f7ff ff33 	bl	8007f2e <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 80080c8:	7b41      	ldrb	r1, [r0, #13]
 80080ca:	00cb      	lsls	r3, r1, #3
 80080cc:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 80080d0:	7a03      	ldrb	r3, [r0, #8]
 80080d2:	0648      	lsls	r0, r1, #25
 80080d4:	ea43 0302 	orr.w	r3, r3, r2
 80080d8:	bf44      	itt	mi
 80080da:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 80080de:	b21b      	sxthmi	r3, r3
 80080e0:	f8a5 305a 	strh.w	r3, [r5, #90]	@ 0x5a
 80080e4:	f895 3059 	ldrb.w	r3, [r5, #89]	@ 0x59
 80080e8:	f895 2056 	ldrb.w	r2, [r5, #86]	@ 0x56
 80080ec:	005b      	lsls	r3, r3, #1
 80080ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80080f2:	4313      	orrs	r3, r2
 80080f4:	115a      	asrs	r2, r3, #5
 80080f6:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 80080fa:	f8a5 305e 	strh.w	r3, [r5, #94]	@ 0x5e
 80080fe:	e046      	b.n	800818e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x24a>
 8008100:	00c2      	lsls	r2, r0, #3
 8008102:	f402 7180 	and.w	r1, r2, #256	@ 0x100
 8008106:	7a22      	ldrb	r2, [r4, #8]
 8008108:	430a      	orrs	r2, r1
 800810a:	0641      	lsls	r1, r0, #25
 800810c:	bf44      	itt	mi
 800810e:	f5a2 7200 	submi.w	r2, r2, #512	@ 0x200
 8008112:	b212      	sxthmi	r2, r2
 8008114:	f8a5 205a 	strh.w	r2, [r5, #90]	@ 0x5a
 8008118:	f640 6109 	movw	r1, #3593	@ 0xe09
 800811c:	f023 0210 	bic.w	r2, r3, #16
 8008120:	428a      	cmp	r2, r1
 8008122:	d003      	beq.n	800812c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1e8>
 8008124:	f640 6213 	movw	r2, #3603	@ 0xe13
 8008128:	4293      	cmp	r3, r2
 800812a:	d13d      	bne.n	80081a8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x264>
 800812c:	f105 024c 	add.w	r2, r5, #76	@ 0x4c
 8008130:	f104 0808 	add.w	r8, r4, #8
 8008134:	4696      	mov	lr, r2
 8008136:	6820      	ldr	r0, [r4, #0]
 8008138:	6861      	ldr	r1, [r4, #4]
 800813a:	4616      	mov	r6, r2
 800813c:	c603      	stmia	r6!, {r0, r1}
 800813e:	3408      	adds	r4, #8
 8008140:	4544      	cmp	r4, r8
 8008142:	4632      	mov	r2, r6
 8008144:	d1f7      	bne.n	8008136 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f2>
 8008146:	6820      	ldr	r0, [r4, #0]
 8008148:	6030      	str	r0, [r6, #0]
 800814a:	88a1      	ldrh	r1, [r4, #4]
 800814c:	80b1      	strh	r1, [r6, #4]
 800814e:	f895 6059 	ldrb.w	r6, [r5, #89]	@ 0x59
 8008152:	0076      	lsls	r6, r6, #1
 8008154:	f406 7280 	and.w	r2, r6, #256	@ 0x100
 8008158:	f895 6056 	ldrb.w	r6, [r5, #86]	@ 0x56
 800815c:	4316      	orrs	r6, r2
 800815e:	f640 6213 	movw	r2, #3603	@ 0xe13
 8008162:	4293      	cmp	r3, r2
 8008164:	bf1a      	itte	ne
 8008166:	f103 33ff 	addne.w	r3, r3, #4294967295
 800816a:	b29b      	uxthne	r3, r3
 800816c:	f640 630c 	movweq	r3, #3596	@ 0xe0c
 8008170:	4662      	mov	r2, ip
 8008172:	4671      	mov	r1, lr
 8008174:	4628      	mov	r0, r5
 8008176:	4674      	mov	r4, lr
 8008178:	f7ff fed9 	bl	8007f2e <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 800817c:	7b43      	ldrb	r3, [r0, #13]
 800817e:	7a82      	ldrb	r2, [r0, #10]
 8008180:	005b      	lsls	r3, r3, #1
 8008182:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008186:	4313      	orrs	r3, r2
 8008188:	1af6      	subs	r6, r6, r3
 800818a:	f8a5 605e 	strh.w	r6, [r5, #94]	@ 0x5e
 800818e:	7b61      	ldrb	r1, [r4, #13]
 8008190:	00cb      	lsls	r3, r1, #3
 8008192:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8008196:	7a23      	ldrb	r3, [r4, #8]
 8008198:	4313      	orrs	r3, r2
 800819a:	064a      	lsls	r2, r1, #25
 800819c:	bf44      	itt	mi
 800819e:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 80081a2:	b21b      	sxthmi	r3, r3
 80081a4:	1bdb      	subs	r3, r3, r7
 80081a6:	e71c      	b.n	8007fe2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9e>
 80081a8:	2300      	movs	r3, #0
 80081aa:	e7a6      	b.n	80080fa <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1b6>
 80081ac:	3fc00079 	.word	0x3fc00079

080081b0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 80081b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80081b4:	4604      	mov	r4, r0
 80081b6:	b942      	cbnz	r2, 80081ca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 80081b8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80081bc:	f8a0 305a 	strh.w	r3, [r0, #90]	@ 0x5a
 80081c0:	f8a0 305c 	strh.w	r3, [r0, #92]	@ 0x5c
 80081c4:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
 80081c8:	e047      	b.n	800825a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 80081ca:	7b51      	ldrb	r1, [r2, #13]
 80081cc:	8893      	ldrh	r3, [r2, #4]
 80081ce:	010d      	lsls	r5, r1, #4
 80081d0:	f405 7080 	and.w	r0, r5, #256	@ 0x100
 80081d4:	79d5      	ldrb	r5, [r2, #7]
 80081d6:	4305      	orrs	r5, r0
 80081d8:	2d04      	cmp	r5, #4
 80081da:	bfcc      	ite	gt
 80081dc:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 80081e0:	f04f 0e01 	movle.w	lr, #1
 80081e4:	f5b3 6fdd 	cmp.w	r3, #1768	@ 0x6e8
 80081e8:	f200 80ab 	bhi.w	8008342 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 80081ec:	f240 60e7 	movw	r0, #1767	@ 0x6e7
 80081f0:	4283      	cmp	r3, r0
 80081f2:	d216      	bcs.n	8008222 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80081f4:	f240 605b 	movw	r0, #1627	@ 0x65b
 80081f8:	4283      	cmp	r3, r0
 80081fa:	d859      	bhi.n	80082b0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 80081fc:	f240 6057 	movw	r0, #1623	@ 0x657
 8008200:	4283      	cmp	r3, r0
 8008202:	d20e      	bcs.n	8008222 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8008204:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 8008208:	d24a      	bcs.n	80082a0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 800820a:	f240 604e 	movw	r0, #1614	@ 0x64e
 800820e:	4283      	cmp	r3, r0
 8008210:	d207      	bcs.n	8008222 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8008212:	f240 601a 	movw	r0, #1562	@ 0x61a
 8008216:	4283      	cmp	r3, r0
 8008218:	d02a      	beq.n	8008270 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800821a:	d821      	bhi.n	8008260 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 800821c:	f5b3 6fc2 	cmp.w	r3, #1552	@ 0x610
 8008220:	d35b      	bcc.n	80082da <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8008222:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	@ 0x5a
 8008226:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 800822a:	f040 80d0 	bne.w	80083ce <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 800822e:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	@ 0x5c
 8008232:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 8008236:	f040 80ca 	bne.w	80083ce <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 800823a:	00cb      	lsls	r3, r1, #3
 800823c:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 8008240:	7a13      	ldrb	r3, [r2, #8]
 8008242:	0649      	lsls	r1, r1, #25
 8008244:	ea43 0300 	orr.w	r3, r3, r0
 8008248:	bf44      	itt	mi
 800824a:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 800824e:	b21b      	sxthmi	r3, r3
 8008250:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 8008254:	1b5d      	subs	r5, r3, r5
 8008256:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 800825a:	4610      	mov	r0, r2
 800825c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008260:	f240 604b 	movw	r0, #1611	@ 0x64b
 8008264:	4283      	cmp	r3, r0
 8008266:	d338      	bcc.n	80082da <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8008268:	f240 604c 	movw	r0, #1612	@ 0x64c
 800826c:	4283      	cmp	r3, r0
 800826e:	d9d8      	bls.n	8008222 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8008270:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	@ 0x5a
 8008274:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	@ 0x5c
 8008278:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 800827c:	f040 80f2 	bne.w	8008464 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b4>
 8008280:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8008284:	f040 80ee 	bne.w	8008464 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b4>
 8008288:	00cb      	lsls	r3, r1, #3
 800828a:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 800828e:	7a13      	ldrb	r3, [r2, #8]
 8008290:	064e      	lsls	r6, r1, #25
 8008292:	ea43 0300 	orr.w	r3, r3, r0
 8008296:	bf44      	itt	mi
 8008298:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 800829c:	b21b      	sxthmi	r3, r3
 800829e:	e7d9      	b.n	8008254 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 80082a0:	f240 6054 	movw	r0, #1620	@ 0x654
 80082a4:	4283      	cmp	r3, r0
 80082a6:	d8e3      	bhi.n	8008270 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80082a8:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 80082ac:	d9e0      	bls.n	8008270 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80082ae:	e7b8      	b.n	8008222 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80082b0:	f240 6074 	movw	r0, #1652	@ 0x674
 80082b4:	4283      	cmp	r3, r0
 80082b6:	d0b4      	beq.n	8008222 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80082b8:	d82d      	bhi.n	8008316 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 80082ba:	f240 605e 	movw	r0, #1630	@ 0x65e
 80082be:	4283      	cmp	r3, r0
 80082c0:	d804      	bhi.n	80082cc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 80082c2:	f240 605d 	movw	r0, #1629	@ 0x65d
 80082c6:	4283      	cmp	r3, r0
 80082c8:	d3d2      	bcc.n	8008270 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80082ca:	e7aa      	b.n	8008222 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80082cc:	f240 605f 	movw	r0, #1631	@ 0x65f
 80082d0:	4283      	cmp	r3, r0
 80082d2:	d0cd      	beq.n	8008270 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80082d4:	f5b3 6fce 	cmp.w	r3, #1648	@ 0x670
 80082d8:	d0a3      	beq.n	8008222 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80082da:	00cb      	lsls	r3, r1, #3
 80082dc:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 80082e0:	7a13      	ldrb	r3, [r2, #8]
 80082e2:	0649      	lsls	r1, r1, #25
 80082e4:	ea43 0300 	orr.w	r3, r3, r0
 80082e8:	bf44      	itt	mi
 80082ea:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 80082ee:	b21b      	sxthmi	r3, r3
 80082f0:	1b5d      	subs	r5, r3, r5
 80082f2:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 80082f6:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 80082fa:	7b53      	ldrb	r3, [r2, #13]
 80082fc:	015b      	lsls	r3, r3, #5
 80082fe:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 8008302:	7993      	ldrb	r3, [r2, #6]
 8008304:	430b      	orrs	r3, r1
 8008306:	005b      	lsls	r3, r3, #1
 8008308:	2105      	movs	r1, #5
 800830a:	fb93 f3f1 	sdiv	r3, r3, r1
 800830e:	f992 1009 	ldrsb.w	r1, [r2, #9]
 8008312:	440b      	add	r3, r1
 8008314:	e756      	b.n	80081c4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 8008316:	f240 60e2 	movw	r0, #1762	@ 0x6e2
 800831a:	4283      	cmp	r3, r0
 800831c:	d809      	bhi.n	8008332 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 800831e:	f240 60df 	movw	r0, #1759	@ 0x6df
 8008322:	4283      	cmp	r3, r0
 8008324:	f4bf af7d 	bcs.w	8008222 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8008328:	f2a3 63d6 	subw	r3, r3, #1750	@ 0x6d6
 800832c:	2b05      	cmp	r3, #5
 800832e:	d8d4      	bhi.n	80082da <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8008330:	e777      	b.n	8008222 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8008332:	f240 60e3 	movw	r0, #1763	@ 0x6e3
 8008336:	4283      	cmp	r3, r0
 8008338:	d09a      	beq.n	8008270 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800833a:	f240 60e4 	movw	r0, #1764	@ 0x6e4
 800833e:	4283      	cmp	r3, r0
 8008340:	e7ca      	b.n	80082d8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 8008342:	f5b3 6f0f 	cmp.w	r3, #2288	@ 0x8f0
 8008346:	d22b      	bcs.n	80083a0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 8008348:	f640 00ed 	movw	r0, #2285	@ 0x8ed
 800834c:	4283      	cmp	r3, r0
 800834e:	d28f      	bcs.n	8008270 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8008350:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 8008354:	4283      	cmp	r3, r0
 8008356:	d816      	bhi.n	8008386 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 8008358:	f640 00e4 	movw	r0, #2276	@ 0x8e4
 800835c:	4283      	cmp	r3, r0
 800835e:	f4bf af60 	bcs.w	8008222 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8008362:	f240 60ec 	movw	r0, #1772	@ 0x6ec
 8008366:	4283      	cmp	r3, r0
 8008368:	d80a      	bhi.n	8008380 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 800836a:	f240 60eb 	movw	r0, #1771	@ 0x6eb
 800836e:	4283      	cmp	r3, r0
 8008370:	f4bf af57 	bcs.w	8008222 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8008374:	f240 60ea 	movw	r0, #1770	@ 0x6ea
 8008378:	4283      	cmp	r3, r0
 800837a:	f43f af79 	beq.w	8008270 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800837e:	e7ac      	b.n	80082da <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8008380:	f240 60ed 	movw	r0, #1773	@ 0x6ed
 8008384:	e7f8      	b.n	8008378 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 8008386:	f640 00e8 	movw	r0, #2280	@ 0x8e8
 800838a:	4283      	cmp	r3, r0
 800838c:	d802      	bhi.n	8008394 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 800838e:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 8008392:	e798      	b.n	80082c6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 8008394:	f640 00e9 	movw	r0, #2281	@ 0x8e9
 8008398:	4283      	cmp	r3, r0
 800839a:	f47f af42 	bne.w	8008222 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800839e:	e767      	b.n	8008270 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80083a0:	f640 00f6 	movw	r0, #2294	@ 0x8f6
 80083a4:	4283      	cmp	r3, r0
 80083a6:	f43f af63 	beq.w	8008270 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80083aa:	d802      	bhi.n	80083b2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 80083ac:	f640 00f2 	movw	r0, #2290	@ 0x8f2
 80083b0:	e7f2      	b.n	8008398 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 80083b2:	f640 00fa 	movw	r0, #2298	@ 0x8fa
 80083b6:	4283      	cmp	r3, r0
 80083b8:	d805      	bhi.n	80083c6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 80083ba:	f640 00f9 	movw	r0, #2297	@ 0x8f9
 80083be:	4283      	cmp	r3, r0
 80083c0:	f4ff af2f 	bcc.w	8008222 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80083c4:	e754      	b.n	8008270 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80083c6:	f640 00fe 	movw	r0, #2302	@ 0x8fe
 80083ca:	4283      	cmp	r3, r0
 80083cc:	e7af      	b.n	800832e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 80083ce:	f104 0c4c 	add.w	ip, r4, #76	@ 0x4c
 80083d2:	4617      	mov	r7, r2
 80083d4:	f102 0808 	add.w	r8, r2, #8
 80083d8:	4666      	mov	r6, ip
 80083da:	6838      	ldr	r0, [r7, #0]
 80083dc:	6879      	ldr	r1, [r7, #4]
 80083de:	46e6      	mov	lr, ip
 80083e0:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 80083e4:	3708      	adds	r7, #8
 80083e6:	4547      	cmp	r7, r8
 80083e8:	46f4      	mov	ip, lr
 80083ea:	d1f6      	bne.n	80083da <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 80083ec:	6838      	ldr	r0, [r7, #0]
 80083ee:	f8ce 0000 	str.w	r0, [lr]
 80083f2:	88b9      	ldrh	r1, [r7, #4]
 80083f4:	f8ae 1004 	strh.w	r1, [lr, #4]
 80083f8:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
 80083fc:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 8008400:	d009      	beq.n	8008416 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x266>
 8008402:	7b51      	ldrb	r1, [r2, #13]
 8008404:	7992      	ldrb	r2, [r2, #6]
 8008406:	0149      	lsls	r1, r1, #5
 8008408:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 800840c:	4311      	orrs	r1, r2
 800840e:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8008412:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 8008416:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 800841a:	b2ad      	uxth	r5, r5
 800841c:	d00d      	beq.n	800843a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28a>
 800841e:	442b      	add	r3, r5
 8008420:	b29b      	uxth	r3, r3
 8008422:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 8008426:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 800842a:	10db      	asrs	r3, r3, #3
 800842c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8008430:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008434:	4313      	orrs	r3, r2
 8008436:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 800843a:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 800843e:	00cb      	lsls	r3, r1, #3
 8008440:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8008444:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 8008448:	064f      	lsls	r7, r1, #25
 800844a:	ea43 0302 	orr.w	r3, r3, r2
 800844e:	bf44      	itt	mi
 8008450:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8008454:	b21b      	sxthmi	r3, r3
 8008456:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 800845a:	1b5b      	subs	r3, r3, r5
 800845c:	f8a4 305c 	strh.w	r3, [r4, #92]	@ 0x5c
 8008460:	4632      	mov	r2, r6
 8008462:	e6fa      	b.n	800825a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 8008464:	f104 0c4c 	add.w	ip, r4, #76	@ 0x4c
 8008468:	4617      	mov	r7, r2
 800846a:	f102 0908 	add.w	r9, r2, #8
 800846e:	4666      	mov	r6, ip
 8008470:	6838      	ldr	r0, [r7, #0]
 8008472:	6879      	ldr	r1, [r7, #4]
 8008474:	46e0      	mov	r8, ip
 8008476:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 800847a:	3708      	adds	r7, #8
 800847c:	454f      	cmp	r7, r9
 800847e:	46c4      	mov	ip, r8
 8008480:	d1f6      	bne.n	8008470 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c0>
 8008482:	6838      	ldr	r0, [r7, #0]
 8008484:	f8c8 0000 	str.w	r0, [r8]
 8008488:	88b9      	ldrh	r1, [r7, #4]
 800848a:	f8a8 1004 	strh.w	r1, [r8, #4]
 800848e:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
 8008492:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 8008496:	d009      	beq.n	80084ac <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2fc>
 8008498:	7b51      	ldrb	r1, [r2, #13]
 800849a:	7992      	ldrb	r2, [r2, #6]
 800849c:	0149      	lsls	r1, r1, #5
 800849e:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 80084a2:	4311      	orrs	r1, r2
 80084a4:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 80084a8:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 80084ac:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 80084b0:	d00e      	beq.n	80084d0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x320>
 80084b2:	eba3 030e 	sub.w	r3, r3, lr
 80084b6:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 80084ba:	b29b      	uxth	r3, r3
 80084bc:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 80084c0:	10db      	asrs	r3, r3, #3
 80084c2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80084c6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80084ca:	4313      	orrs	r3, r2
 80084cc:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 80084d0:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 80084d4:	00cb      	lsls	r3, r1, #3
 80084d6:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 80084da:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 80084de:	0648      	lsls	r0, r1, #25
 80084e0:	ea43 0302 	orr.w	r3, r3, r2
 80084e4:	bf44      	itt	mi
 80084e6:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 80084ea:	b21b      	sxthmi	r3, r3
 80084ec:	1b5d      	subs	r5, r3, r5
 80084ee:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 80084f2:	e7b5      	b.n	8008460 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b0>

080084f4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 80084f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084f8:	461e      	mov	r6, r3
 80084fa:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 80084fc:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8008500:	4604      	mov	r4, r0
 8008502:	4617      	mov	r7, r2
 8008504:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 8008508:	f7f9 fa10 	bl	800192c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 800850c:	4605      	mov	r5, r0
 800850e:	b918      	cbnz	r0, 8008518 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 8008510:	6030      	str	r0, [r6, #0]
 8008512:	4628      	mov	r0, r5
 8008514:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008518:	683b      	ldr	r3, [r7, #0]
 800851a:	4601      	mov	r1, r0
 800851c:	68db      	ldr	r3, [r3, #12]
 800851e:	4638      	mov	r0, r7
 8008520:	4798      	blx	r3
 8008522:	f5a8 63c0 	sub.w	r3, r8, #1536	@ 0x600
 8008526:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800852a:	4602      	mov	r2, r0
 800852c:	6030      	str	r0, [r6, #0]
 800852e:	d213      	bcs.n	8008558 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 8008530:	4643      	mov	r3, r8
 8008532:	4639      	mov	r1, r7
 8008534:	4620      	mov	r0, r4
 8008536:	f7ff fe3b 	bl	80081b0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 800853a:	6030      	str	r0, [r6, #0]
 800853c:	6833      	ldr	r3, [r6, #0]
 800853e:	b143      	cbz	r3, 8008552 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 8008540:	7b5a      	ldrb	r2, [r3, #13]
 8008542:	7a9b      	ldrb	r3, [r3, #10]
 8008544:	0052      	lsls	r2, r2, #1
 8008546:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 800854a:	4313      	orrs	r3, r2
 800854c:	bf0c      	ite	eq
 800854e:	2301      	moveq	r3, #1
 8008550:	2300      	movne	r3, #0
 8008552:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
 8008556:	e7dc      	b.n	8008512 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 8008558:	f5a5 6360 	sub.w	r3, r5, #3584	@ 0xe00
 800855c:	b29b      	uxth	r3, r3
 800855e:	2b7f      	cmp	r3, #127	@ 0x7f
 8008560:	d804      	bhi.n	800856c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 8008562:	4639      	mov	r1, r7
 8008564:	4620      	mov	r0, r4
 8008566:	f7ff fced 	bl	8007f44 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 800856a:	e7e6      	b.n	800853a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 800856c:	f894 3061 	ldrb.w	r3, [r4, #97]	@ 0x61
 8008570:	2b00      	cmp	r3, #0
 8008572:	d0e3      	beq.n	800853c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 8008574:	f640 1302 	movw	r3, #2306	@ 0x902
 8008578:	429d      	cmp	r5, r3
 800857a:	d1df      	bne.n	800853c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 800857c:	4601      	mov	r1, r0
 800857e:	4620      	mov	r0, r4
 8008580:	f7ff fcb2 	bl	8007ee8 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8008584:	e7d9      	b.n	800853a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

08008586 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 8008586:	b510      	push	{r4, lr}
 8008588:	4604      	mov	r4, r0
 800858a:	f8b4 1040 	ldrh.w	r1, [r4, #64]	@ 0x40
 800858e:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 8008590:	b1f1      	cbz	r1, 80085d0 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4a>
 8008592:	2b0a      	cmp	r3, #10
 8008594:	d02f      	beq.n	80085f6 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x70>
 8008596:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 8008598:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 800859c:	3901      	subs	r1, #1
 800859e:	8f40      	ldrh	r0, [r0, #58]	@ 0x3a
 80085a0:	f8a4 1040 	strh.w	r1, [r4, #64]	@ 0x40
 80085a4:	1c51      	adds	r1, r2, #1
 80085a6:	b289      	uxth	r1, r1
 80085a8:	2901      	cmp	r1, #1
 80085aa:	bf84      	itt	hi
 80085ac:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80085b0:	87e2      	strhhi	r2, [r4, #62]	@ 0x3e
 80085b2:	f103 0201 	add.w	r2, r3, #1
 80085b6:	8722      	strh	r2, [r4, #56]	@ 0x38
 80085b8:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 80085ba:	bf98      	it	ls
 80085bc:	87e1      	strhls	r1, [r4, #62]	@ 0x3e
 80085be:	4413      	add	r3, r2
 80085c0:	b29b      	uxth	r3, r3
 80085c2:	2b09      	cmp	r3, #9
 80085c4:	bf88      	it	hi
 80085c6:	3b0a      	subhi	r3, #10
 80085c8:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80085cc:	8458      	strh	r0, [r3, #34]	@ 0x22
 80085ce:	e7dc      	b.n	800858a <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 80085d0:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 80085d2:	2b0a      	cmp	r3, #10
 80085d4:	d00f      	beq.n	80085f6 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x70>
 80085d6:	4620      	mov	r0, r4
 80085d8:	f7ff fc45 	bl	8007e66 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 80085dc:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 80085de:	1c5a      	adds	r2, r3, #1
 80085e0:	8722      	strh	r2, [r4, #56]	@ 0x38
 80085e2:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 80085e4:	4413      	add	r3, r2
 80085e6:	b29b      	uxth	r3, r3
 80085e8:	2b09      	cmp	r3, #9
 80085ea:	bf88      	it	hi
 80085ec:	3b0a      	subhi	r3, #10
 80085ee:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80085f2:	8458      	strh	r0, [r3, #34]	@ 0x22
 80085f4:	e7ec      	b.n	80085d0 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4a>
 80085f6:	bd10      	pop	{r4, pc}

080085f8 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 80085f8:	b538      	push	{r3, r4, r5, lr}
 80085fa:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 80085fc:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 8008600:	4604      	mov	r4, r0
 8008602:	8c55      	ldrh	r5, [r2, #34]	@ 0x22
 8008604:	8f02      	ldrh	r2, [r0, #56]	@ 0x38
 8008606:	3a01      	subs	r2, #1
 8008608:	8702      	strh	r2, [r0, #56]	@ 0x38
 800860a:	1c5a      	adds	r2, r3, #1
 800860c:	b292      	uxth	r2, r2
 800860e:	2a09      	cmp	r2, #9
 8008610:	bf86      	itte	hi
 8008612:	3b09      	subhi	r3, #9
 8008614:	86c3      	strhhi	r3, [r0, #54]	@ 0x36
 8008616:	86c2      	strhls	r2, [r0, #54]	@ 0x36
 8008618:	f7ff ffb5 	bl	8008586 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 800861c:	8c23      	ldrh	r3, [r4, #32]
 800861e:	2b01      	cmp	r3, #1
 8008620:	bf9c      	itt	ls
 8008622:	3301      	addls	r3, #1
 8008624:	8423      	strhls	r3, [r4, #32]
 8008626:	8be3      	ldrh	r3, [r4, #30]
 8008628:	b90b      	cbnz	r3, 800862e <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 800862a:	2302      	movs	r3, #2
 800862c:	83e3      	strh	r3, [r4, #30]
 800862e:	8be3      	ldrh	r3, [r4, #30]
 8008630:	3b01      	subs	r3, #1
 8008632:	b29b      	uxth	r3, r3
 8008634:	83e3      	strh	r3, [r4, #30]
 8008636:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 800863a:	4628      	mov	r0, r5
 800863c:	8365      	strh	r5, [r4, #26]
 800863e:	bd38      	pop	{r3, r4, r5, pc}

08008640 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 8008640:	428a      	cmp	r2, r1
 8008642:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008646:	8ec7      	ldrh	r7, [r0, #54]	@ 0x36
 8008648:	d931      	bls.n	80086ae <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x6e>
 800864a:	8f05      	ldrh	r5, [r0, #56]	@ 0x38
 800864c:	f8b0 8040 	ldrh.w	r8, [r0, #64]	@ 0x40
 8008650:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	@ 0x3e
 8008654:	19ee      	adds	r6, r5, r7
 8008656:	1a54      	subs	r4, r2, r1
 8008658:	3e01      	subs	r6, #1
 800865a:	fa1f fe84 	uxth.w	lr, r4
 800865e:	b2b4      	uxth	r4, r6
 8008660:	eba4 090e 	sub.w	r9, r4, lr
 8008664:	fa1f f989 	uxth.w	r9, r9
 8008668:	2c09      	cmp	r4, #9
 800866a:	4626      	mov	r6, r4
 800866c:	bf88      	it	hi
 800866e:	f1a4 060a 	subhi.w	r6, r4, #10
 8008672:	f1bc 0f00 	cmp.w	ip, #0
 8008676:	bf08      	it	eq
 8008678:	f04f 0c02 	moveq.w	ip, #2
 800867c:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 8008680:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008684:	fa1f fc8c 	uxth.w	ip, ip
 8008688:	3c01      	subs	r4, #1
 800868a:	f8b6 a022 	ldrh.w	sl, [r6, #34]	@ 0x22
 800868e:	b2a4      	uxth	r4, r4
 8008690:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 8008694:	454c      	cmp	r4, r9
 8008696:	f8a6 a03a 	strh.w	sl, [r6, #58]	@ 0x3a
 800869a:	d1e5      	bne.n	8008668 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 800869c:	eba5 050e 	sub.w	r5, r5, lr
 80086a0:	eb0e 0408 	add.w	r4, lr, r8
 80086a4:	8705      	strh	r5, [r0, #56]	@ 0x38
 80086a6:	f8a0 4040 	strh.w	r4, [r0, #64]	@ 0x40
 80086aa:	f8a0 c03e 	strh.w	ip, [r0, #62]	@ 0x3e
 80086ae:	8f04      	ldrh	r4, [r0, #56]	@ 0x38
 80086b0:	1a64      	subs	r4, r4, r1
 80086b2:	4439      	add	r1, r7
 80086b4:	b289      	uxth	r1, r1
 80086b6:	2909      	cmp	r1, #9
 80086b8:	bf88      	it	hi
 80086ba:	390a      	subhi	r1, #10
 80086bc:	8704      	strh	r4, [r0, #56]	@ 0x38
 80086be:	86c1      	strh	r1, [r0, #54]	@ 0x36
 80086c0:	250a      	movs	r5, #10
 80086c2:	b18a      	cbz	r2, 80086e8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xa8>
 80086c4:	8f01      	ldrh	r1, [r0, #56]	@ 0x38
 80086c6:	3a01      	subs	r2, #1
 80086c8:	b292      	uxth	r2, r2
 80086ca:	3101      	adds	r1, #1
 80086cc:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 80086d0:	8701      	strh	r1, [r0, #56]	@ 0x38
 80086d2:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 80086d4:	b901      	cbnz	r1, 80086d8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x98>
 80086d6:	86c5      	strh	r5, [r0, #54]	@ 0x36
 80086d8:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 80086da:	3901      	subs	r1, #1
 80086dc:	b289      	uxth	r1, r1
 80086de:	86c1      	strh	r1, [r0, #54]	@ 0x36
 80086e0:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 80086e4:	844c      	strh	r4, [r1, #34]	@ 0x22
 80086e6:	e7ec      	b.n	80086c2 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x82>
 80086e8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086ec:	f7ff bf4b 	b.w	8008586 <_ZN8touchgfx12TextProvider15fillInputBufferEv>

080086f0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 80086f0:	b570      	push	{r4, r5, r6, lr}
 80086f2:	2500      	movs	r5, #0
 80086f4:	4295      	cmp	r5, r2
 80086f6:	d011      	beq.n	800871c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 80086f8:	8bc4      	ldrh	r4, [r0, #30]
 80086fa:	f831 6b02 	ldrh.w	r6, [r1], #2
 80086fe:	4414      	add	r4, r2
 8008700:	3c01      	subs	r4, #1
 8008702:	1b64      	subs	r4, r4, r5
 8008704:	b2a4      	uxth	r4, r4
 8008706:	2c01      	cmp	r4, #1
 8008708:	bf88      	it	hi
 800870a:	3c02      	subhi	r4, #2
 800870c:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8008710:	8b64      	ldrh	r4, [r4, #26]
 8008712:	42b4      	cmp	r4, r6
 8008714:	d117      	bne.n	8008746 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 8008716:	3501      	adds	r5, #1
 8008718:	b2ad      	uxth	r5, r5
 800871a:	e7eb      	b.n	80086f4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 800871c:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8008720:	2400      	movs	r4, #0
 8008722:	4413      	add	r3, r2
 8008724:	b2a2      	uxth	r2, r4
 8008726:	429a      	cmp	r2, r3
 8008728:	da0f      	bge.n	800874a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 800872a:	8ec6      	ldrh	r6, [r0, #54]	@ 0x36
 800872c:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 8008730:	4432      	add	r2, r6
 8008732:	b292      	uxth	r2, r2
 8008734:	2a09      	cmp	r2, #9
 8008736:	bf88      	it	hi
 8008738:	3a0a      	subhi	r2, #10
 800873a:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 800873e:	3401      	adds	r4, #1
 8008740:	8c52      	ldrh	r2, [r2, #34]	@ 0x22
 8008742:	42aa      	cmp	r2, r5
 8008744:	d0ee      	beq.n	8008724 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 8008746:	2000      	movs	r0, #0
 8008748:	bd70      	pop	{r4, r5, r6, pc}
 800874a:	2001      	movs	r0, #1
 800874c:	e7fc      	b.n	8008748 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

0800874e <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 800874e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008752:	4605      	mov	r5, r0
 8008754:	4616      	mov	r6, r2
 8008756:	1c8c      	adds	r4, r1, #2
 8008758:	8809      	ldrh	r1, [r1, #0]
 800875a:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 800875e:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 8008762:	42b3      	cmp	r3, r6
 8008764:	d124      	bne.n	80087b0 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 8008766:	f3c1 2903 	ubfx	r9, r1, #8, #4
 800876a:	f3c1 1803 	ubfx	r8, r1, #4, #4
 800876e:	f001 070f 	and.w	r7, r1, #15
 8008772:	f8cd 8000 	str.w	r8, [sp]
 8008776:	464b      	mov	r3, r9
 8008778:	4652      	mov	r2, sl
 800877a:	4621      	mov	r1, r4
 800877c:	4628      	mov	r0, r5
 800877e:	f7ff ffb7 	bl	80086f0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 8008782:	4683      	mov	fp, r0
 8008784:	b168      	cbz	r0, 80087a2 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 8008786:	eb0a 0109 	add.w	r1, sl, r9
 800878a:	4441      	add	r1, r8
 800878c:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 8008790:	463a      	mov	r2, r7
 8008792:	4649      	mov	r1, r9
 8008794:	4628      	mov	r0, r5
 8008796:	f7ff ff53 	bl	8008640 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 800879a:	4658      	mov	r0, fp
 800879c:	b003      	add	sp, #12
 800879e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087a2:	eb07 010a 	add.w	r1, r7, sl
 80087a6:	4449      	add	r1, r9
 80087a8:	4441      	add	r1, r8
 80087aa:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 80087ae:	e7d2      	b.n	8008756 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 80087b0:	f04f 0b00 	mov.w	fp, #0
 80087b4:	e7f1      	b.n	800879a <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

080087b6 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 80087b6:	b570      	push	{r4, r5, r6, lr}
 80087b8:	8810      	ldrh	r0, [r2, #0]
 80087ba:	4298      	cmp	r0, r3
 80087bc:	d817      	bhi.n	80087ee <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 80087be:	1e48      	subs	r0, r1, #1
 80087c0:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 80087c4:	4298      	cmp	r0, r3
 80087c6:	d312      	bcc.n	80087ee <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 80087c8:	2400      	movs	r4, #0
 80087ca:	428c      	cmp	r4, r1
 80087cc:	d20f      	bcs.n	80087ee <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 80087ce:	1860      	adds	r0, r4, r1
 80087d0:	1040      	asrs	r0, r0, #1
 80087d2:	0085      	lsls	r5, r0, #2
 80087d4:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 80087d8:	42b3      	cmp	r3, r6
 80087da:	d902      	bls.n	80087e2 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 80087dc:	3001      	adds	r0, #1
 80087de:	b284      	uxth	r4, r0
 80087e0:	e7f3      	b.n	80087ca <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 80087e2:	d201      	bcs.n	80087e8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 80087e4:	b281      	uxth	r1, r0
 80087e6:	e7f0      	b.n	80087ca <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 80087e8:	442a      	add	r2, r5
 80087ea:	8850      	ldrh	r0, [r2, #2]
 80087ec:	bd70      	pop	{r4, r5, r6, pc}
 80087ee:	2000      	movs	r0, #0
 80087f0:	e7fc      	b.n	80087ec <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

080087f2 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 80087f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087f6:	6c45      	ldr	r5, [r0, #68]	@ 0x44
 80087f8:	886f      	ldrh	r7, [r5, #2]
 80087fa:	4604      	mov	r4, r0
 80087fc:	087f      	lsrs	r7, r7, #1
 80087fe:	260b      	movs	r6, #11
 8008800:	3e01      	subs	r6, #1
 8008802:	d013      	beq.n	800882c <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 8008804:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8008806:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800880a:	462a      	mov	r2, r5
 800880c:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 8008810:	4639      	mov	r1, r7
 8008812:	4643      	mov	r3, r8
 8008814:	4620      	mov	r0, r4
 8008816:	f7ff ffce 	bl	80087b6 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 800881a:	b138      	cbz	r0, 800882c <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 800881c:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 8008820:	4642      	mov	r2, r8
 8008822:	4620      	mov	r0, r4
 8008824:	f7ff ff93 	bl	800874e <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 8008828:	2800      	cmp	r0, #0
 800882a:	d1e9      	bne.n	8008800 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 800882c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008830 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 8008830:	b570      	push	{r4, r5, r6, lr}
 8008832:	694a      	ldr	r2, [r1, #20]
 8008834:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 8008836:	684b      	ldr	r3, [r1, #4]
 8008838:	6ace      	ldr	r6, [r1, #44]	@ 0x2c
 800883a:	1b54      	subs	r4, r2, r5
 800883c:	f000 8106 	beq.w	8008a4c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 8008840:	1b9b      	subs	r3, r3, r6
 8008842:	d003      	beq.n	800884c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8008844:	4363      	muls	r3, r4
 8008846:	2210      	movs	r2, #16
 8008848:	fb93 f3f2 	sdiv	r3, r3, r2
 800884c:	680c      	ldr	r4, [r1, #0]
 800884e:	698a      	ldr	r2, [r1, #24]
 8008850:	1b65      	subs	r5, r4, r5
 8008852:	f000 80fd 	beq.w	8008a50 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 8008856:	1b92      	subs	r2, r2, r6
 8008858:	d003      	beq.n	8008862 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 800885a:	436a      	muls	r2, r5
 800885c:	2410      	movs	r4, #16
 800885e:	fb92 f2f4 	sdiv	r2, r2, r4
 8008862:	1a9b      	subs	r3, r3, r2
 8008864:	ee07 3a90 	vmov	s15, r3
 8008868:	ed9f 4a88 	vldr	s8, [pc, #544]	@ 8008a8c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 800886c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008870:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008874:	ee67 7a84 	vmul.f32	s15, s15, s8
 8008878:	460a      	mov	r2, r1
 800887a:	ee87 3a27 	vdiv.f32	s6, s14, s15
 800887e:	4603      	mov	r3, r0
 8008880:	f100 040c 	add.w	r4, r0, #12
 8008884:	eeb1 6a43 	vneg.f32	s12, s6
 8008888:	edd2 7a02 	vldr	s15, [r2, #8]
 800888c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8008890:	3214      	adds	r2, #20
 8008892:	ece3 6a01 	vstmia	r3!, {s13}
 8008896:	ed52 7a02 	vldr	s15, [r2, #-8]
 800889a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800889e:	429c      	cmp	r4, r3
 80088a0:	edc3 7a02 	vstr	s15, [r3, #8]
 80088a4:	ed52 7a01 	vldr	s15, [r2, #-4]
 80088a8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80088ac:	edc3 7a05 	vstr	s15, [r3, #20]
 80088b0:	d1ea      	bne.n	8008888 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 80088b2:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 80088b4:	698b      	ldr	r3, [r1, #24]
 80088b6:	edd0 4a02 	vldr	s9, [r0, #8]
 80088ba:	edd0 3a00 	vldr	s7, [r0]
 80088be:	edd0 6a01 	vldr	s13, [r0, #4]
 80088c2:	ed90 5a05 	vldr	s10, [r0, #20]
 80088c6:	ed90 2a03 	vldr	s4, [r0, #12]
 80088ca:	edd0 5a04 	vldr	s11, [r0, #16]
 80088ce:	ed90 1a07 	vldr	s2, [r0, #28]
 80088d2:	edd0 2a06 	vldr	s5, [r0, #24]
 80088d6:	1a9b      	subs	r3, r3, r2
 80088d8:	ee07 3a90 	vmov	s15, r3
 80088dc:	684b      	ldr	r3, [r1, #4]
 80088de:	1a9b      	subs	r3, r3, r2
 80088e0:	ee07 3a10 	vmov	s14, r3
 80088e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80088e8:	ee76 6ae4 	vsub.f32	s13, s13, s9
 80088ec:	ee67 7a84 	vmul.f32	s15, s15, s8
 80088f0:	ee73 4ae4 	vsub.f32	s9, s7, s9
 80088f4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80088f8:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 80088fc:	ee27 7a04 	vmul.f32	s14, s14, s8
 8008900:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8008904:	eee6 7a87 	vfma.f32	s15, s13, s14
 8008908:	ee32 5a45 	vsub.f32	s10, s4, s10
 800890c:	ee67 7a83 	vmul.f32	s15, s15, s6
 8008910:	edc0 7a09 	vstr	s15, [r0, #36]	@ 0x24
 8008914:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 8008916:	694a      	ldr	r2, [r1, #20]
 8008918:	1b13      	subs	r3, r2, r4
 800891a:	ee07 3a10 	vmov	s14, r3
 800891e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8008922:	680b      	ldr	r3, [r1, #0]
 8008924:	ee27 7a04 	vmul.f32	s14, s14, s8
 8008928:	1b1b      	subs	r3, r3, r4
 800892a:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 800892e:	ee07 3a10 	vmov	s14, r3
 8008932:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8008936:	ee27 7a04 	vmul.f32	s14, s14, s8
 800893a:	eee6 4a87 	vfma.f32	s9, s13, s14
 800893e:	ee64 4a86 	vmul.f32	s9, s9, s12
 8008942:	edc0 4a0a 	vstr	s9, [r0, #40]	@ 0x28
 8008946:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8008948:	698b      	ldr	r3, [r1, #24]
 800894a:	1a9b      	subs	r3, r3, r2
 800894c:	ee06 3a90 	vmov	s13, r3
 8008950:	684b      	ldr	r3, [r1, #4]
 8008952:	1a9b      	subs	r3, r3, r2
 8008954:	ee07 3a10 	vmov	s14, r3
 8008958:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800895c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8008960:	ee66 6a84 	vmul.f32	s13, s13, s8
 8008964:	ee27 7a04 	vmul.f32	s14, s14, s8
 8008968:	ee65 6a66 	vnmul.f32	s13, s10, s13
 800896c:	eee5 6a87 	vfma.f32	s13, s11, s14
 8008970:	ee66 6a83 	vmul.f32	s13, s13, s6
 8008974:	edc0 6a0b 	vstr	s13, [r0, #44]	@ 0x2c
 8008978:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 800897a:	694a      	ldr	r2, [r1, #20]
 800897c:	1b13      	subs	r3, r2, r4
 800897e:	ee07 3a10 	vmov	s14, r3
 8008982:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8008986:	680b      	ldr	r3, [r1, #0]
 8008988:	ee27 7a04 	vmul.f32	s14, s14, s8
 800898c:	1b1b      	subs	r3, r3, r4
 800898e:	ee25 5a47 	vnmul.f32	s10, s10, s14
 8008992:	ee07 3a10 	vmov	s14, r3
 8008996:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800899a:	ee27 7a04 	vmul.f32	s14, s14, s8
 800899e:	eea5 5a87 	vfma.f32	s10, s11, s14
 80089a2:	edd0 5a08 	vldr	s11, [r0, #32]
 80089a6:	ee25 5a06 	vmul.f32	s10, s10, s12
 80089aa:	ee31 1a65 	vsub.f32	s2, s2, s11
 80089ae:	ed80 5a0c 	vstr	s10, [r0, #48]	@ 0x30
 80089b2:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 80089b4:	698b      	ldr	r3, [r1, #24]
 80089b6:	1a9b      	subs	r3, r3, r2
 80089b8:	ee07 3a10 	vmov	s14, r3
 80089bc:	684b      	ldr	r3, [r1, #4]
 80089be:	1a9b      	subs	r3, r3, r2
 80089c0:	ee01 3a90 	vmov	s3, r3
 80089c4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80089c8:	ee72 5ae5 	vsub.f32	s11, s5, s11
 80089cc:	ee27 7a04 	vmul.f32	s14, s14, s8
 80089d0:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 80089d4:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 80089d8:	ee61 1a84 	vmul.f32	s3, s3, s8
 80089dc:	eea1 7a21 	vfma.f32	s14, s2, s3
 80089e0:	ee27 7a03 	vmul.f32	s14, s14, s6
 80089e4:	ed80 7a0d 	vstr	s14, [r0, #52]	@ 0x34
 80089e8:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 80089ea:	694a      	ldr	r2, [r1, #20]
 80089ec:	1b13      	subs	r3, r2, r4
 80089ee:	ee03 3a10 	vmov	s6, r3
 80089f2:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 80089f6:	680b      	ldr	r3, [r1, #0]
 80089f8:	ee23 3a04 	vmul.f32	s6, s6, s8
 80089fc:	1b1b      	subs	r3, r3, r4
 80089fe:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 8008a02:	ee03 3a10 	vmov	s6, r3
 8008a06:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 8008a0a:	ee23 4a04 	vmul.f32	s8, s6, s8
 8008a0e:	eee1 5a04 	vfma.f32	s11, s2, s8
 8008a12:	ee25 6a86 	vmul.f32	s12, s11, s12
 8008a16:	ee62 5a67 	vnmul.f32	s11, s4, s15
 8008a1a:	ed80 6a0e 	vstr	s12, [r0, #56]	@ 0x38
 8008a1e:	eee3 5aa6 	vfma.f32	s11, s7, s13
 8008a22:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 8008a26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a2a:	dd13      	ble.n	8008a54 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 8008a2c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008a30:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 8008a34:	63c3      	str	r3, [r0, #60]	@ 0x3c
 8008a36:	eee3 7a87 	vfma.f32	s15, s7, s14
 8008a3a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008a3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a42:	dd15      	ble.n	8008a70 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 8008a44:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008a48:	6403      	str	r3, [r0, #64]	@ 0x40
 8008a4a:	bd70      	pop	{r4, r5, r6, pc}
 8008a4c:	4623      	mov	r3, r4
 8008a4e:	e6fd      	b.n	800884c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8008a50:	462a      	mov	r2, r5
 8008a52:	e706      	b.n	8008862 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 8008a54:	d502      	bpl.n	8008a5c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 8008a56:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8008a5a:	e7e9      	b.n	8008a30 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 8008a5c:	ee22 2a64 	vnmul.f32	s4, s4, s9
 8008a60:	eea3 2a85 	vfma.f32	s4, s7, s10
 8008a64:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 8008a68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a6c:	dade      	bge.n	8008a2c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 8008a6e:	e7f2      	b.n	8008a56 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 8008a70:	d502      	bpl.n	8008a78 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 8008a72:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8008a76:	e7e7      	b.n	8008a48 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 8008a78:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 8008a7c:	eee3 4a86 	vfma.f32	s9, s7, s12
 8008a80:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 8008a84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a88:	dadc      	bge.n	8008a44 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 8008a8a:	e7f2      	b.n	8008a72 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 8008a8c:	3d800000 	.word	0x3d800000

08008a90 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 8008a90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a94:	2714      	movs	r7, #20
 8008a96:	435f      	muls	r7, r3
 8008a98:	eb02 0c07 	add.w	ip, r2, r7
 8008a9c:	f8dc 5004 	ldr.w	r5, [ip, #4]
 8008aa0:	f115 0e0f 	adds.w	lr, r5, #15
 8008aa4:	f100 80a2 	bmi.w	8008bec <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 8008aa8:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 8008aac:	9c08      	ldr	r4, [sp, #32]
 8008aae:	f8c0 e014 	str.w	lr, [r0, #20]
 8008ab2:	2614      	movs	r6, #20
 8008ab4:	4366      	muls	r6, r4
 8008ab6:	eb02 0806 	add.w	r8, r2, r6
 8008aba:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008abe:	f115 040f 	adds.w	r4, r5, #15
 8008ac2:	f100 809f 	bmi.w	8008c04 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
 8008ac6:	1124      	asrs	r4, r4, #4
 8008ac8:	eba4 040e 	sub.w	r4, r4, lr
 8008acc:	6184      	str	r4, [r0, #24]
 8008ace:	2c00      	cmp	r4, #0
 8008ad0:	f000 808a 	beq.w	8008be8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
 8008ad4:	f8dc 9004 	ldr.w	r9, [ip, #4]
 8008ad8:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8008adc:	5995      	ldr	r5, [r2, r6]
 8008ade:	eba4 0809 	sub.w	r8, r4, r9
 8008ae2:	59d4      	ldr	r4, [r2, r7]
 8008ae4:	eba5 0a04 	sub.w	sl, r5, r4
 8008ae8:	ea4f 150a 	mov.w	r5, sl, lsl #4
 8008aec:	fb0e fe05 	mul.w	lr, lr, r5
 8008af0:	fb0a ee19 	mls	lr, sl, r9, lr
 8008af4:	fb08 e404 	mla	r4, r8, r4, lr
 8008af8:	ea4f 1608 	mov.w	r6, r8, lsl #4
 8008afc:	3c01      	subs	r4, #1
 8008afe:	19a4      	adds	r4, r4, r6
 8008b00:	f100 808c 	bmi.w	8008c1c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
 8008b04:	fb94 fef6 	sdiv	lr, r4, r6
 8008b08:	f8c0 e000 	str.w	lr, [r0]
 8008b0c:	fb06 441e 	mls	r4, r6, lr, r4
 8008b10:	6104      	str	r4, [r0, #16]
 8008b12:	2d00      	cmp	r5, #0
 8008b14:	f2c0 8095 	blt.w	8008c42 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
 8008b18:	fb95 f4f6 	sdiv	r4, r5, r6
 8008b1c:	6044      	str	r4, [r0, #4]
 8008b1e:	fb06 5514 	mls	r5, r6, r4, r5
 8008b22:	6085      	str	r5, [r0, #8]
 8008b24:	60c6      	str	r6, [r0, #12]
 8008b26:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8008b2a:	6945      	ldr	r5, [r0, #20]
 8008b2c:	59d2      	ldr	r2, [r2, r7]
 8008b2e:	eddf 6a4d 	vldr	s13, [pc, #308]	@ 8008c64 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
 8008b32:	ed91 6a0a 	vldr	s12, [r1, #40]	@ 0x28
 8008b36:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 8008b3a:	ee07 4a10 	vmov	s14, r4
 8008b3e:	6804      	ldr	r4, [r0, #0]
 8008b40:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 8008b44:	ee07 2a90 	vmov	s15, r2
 8008b48:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8008b4c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008b50:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8008b54:	ee27 7a26 	vmul.f32	s14, s14, s13
 8008b58:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008b5c:	edd3 6a00 	vldr	s13, [r3]
 8008b60:	eee6 6a07 	vfma.f32	s13, s12, s14
 8008b64:	ed91 6a09 	vldr	s12, [r1, #36]	@ 0x24
 8008b68:	eee6 6a27 	vfma.f32	s13, s12, s15
 8008b6c:	edc0 6a07 	vstr	s13, [r0, #28]
 8008b70:	edd0 6a01 	vldr	s13, [r0, #4]
 8008b74:	edd1 5a09 	vldr	s11, [r1, #36]	@ 0x24
 8008b78:	ed91 6a0a 	vldr	s12, [r1, #40]	@ 0x28
 8008b7c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8008b80:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8008b84:	ed80 6a08 	vstr	s12, [r0, #32]
 8008b88:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
 8008b8a:	6242      	str	r2, [r0, #36]	@ 0x24
 8008b8c:	edd1 5a0c 	vldr	s11, [r1, #48]	@ 0x30
 8008b90:	ed93 6a03 	vldr	s12, [r3, #12]
 8008b94:	eea5 6a87 	vfma.f32	s12, s11, s14
 8008b98:	edd1 5a0b 	vldr	s11, [r1, #44]	@ 0x2c
 8008b9c:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8008ba0:	ed80 6a0a 	vstr	s12, [r0, #40]	@ 0x28
 8008ba4:	edd1 5a0b 	vldr	s11, [r1, #44]	@ 0x2c
 8008ba8:	ed91 6a0c 	vldr	s12, [r1, #48]	@ 0x30
 8008bac:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8008bb0:	ed80 6a0b 	vstr	s12, [r0, #44]	@ 0x2c
 8008bb4:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8008bb6:	6302      	str	r2, [r0, #48]	@ 0x30
 8008bb8:	ed93 6a06 	vldr	s12, [r3, #24]
 8008bbc:	edd1 5a0e 	vldr	s11, [r1, #56]	@ 0x38
 8008bc0:	eea5 6a87 	vfma.f32	s12, s11, s14
 8008bc4:	eeb0 7a46 	vmov.f32	s14, s12
 8008bc8:	ed91 6a0d 	vldr	s12, [r1, #52]	@ 0x34
 8008bcc:	eea6 7a27 	vfma.f32	s14, s12, s15
 8008bd0:	ed80 7a0d 	vstr	s14, [r0, #52]	@ 0x34
 8008bd4:	ed91 7a0d 	vldr	s14, [r1, #52]	@ 0x34
 8008bd8:	edd1 7a0e 	vldr	s15, [r1, #56]	@ 0x38
 8008bdc:	eee6 7a87 	vfma.f32	s15, s13, s14
 8008be0:	edc0 7a0e 	vstr	s15, [r0, #56]	@ 0x38
 8008be4:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 8008be6:	63c3      	str	r3, [r0, #60]	@ 0x3c
 8008be8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bec:	f1c5 0501 	rsb	r5, r5, #1
 8008bf0:	f015 050f 	ands.w	r5, r5, #15
 8008bf4:	bf18      	it	ne
 8008bf6:	2501      	movne	r5, #1
 8008bf8:	2410      	movs	r4, #16
 8008bfa:	fb9e fef4 	sdiv	lr, lr, r4
 8008bfe:	ebae 0e05 	sub.w	lr, lr, r5
 8008c02:	e753      	b.n	8008aac <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
 8008c04:	f1c5 0501 	rsb	r5, r5, #1
 8008c08:	f015 050f 	ands.w	r5, r5, #15
 8008c0c:	bf18      	it	ne
 8008c0e:	2501      	movne	r5, #1
 8008c10:	f04f 0910 	mov.w	r9, #16
 8008c14:	fb94 f4f9 	sdiv	r4, r4, r9
 8008c18:	1b64      	subs	r4, r4, r5
 8008c1a:	e755      	b.n	8008ac8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
 8008c1c:	4264      	negs	r4, r4
 8008c1e:	fb94 fef6 	sdiv	lr, r4, r6
 8008c22:	f1ce 0800 	rsb	r8, lr, #0
 8008c26:	fb06 441e 	mls	r4, r6, lr, r4
 8008c2a:	f8c0 8000 	str.w	r8, [r0]
 8008c2e:	6104      	str	r4, [r0, #16]
 8008c30:	2c00      	cmp	r4, #0
 8008c32:	f43f af6e 	beq.w	8008b12 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
 8008c36:	ea6f 0e0e 	mvn.w	lr, lr
 8008c3a:	f8c0 e000 	str.w	lr, [r0]
 8008c3e:	1b34      	subs	r4, r6, r4
 8008c40:	e766      	b.n	8008b10 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
 8008c42:	426d      	negs	r5, r5
 8008c44:	fb95 f4f6 	sdiv	r4, r5, r6
 8008c48:	f1c4 0e00 	rsb	lr, r4, #0
 8008c4c:	fb06 5514 	mls	r5, r6, r4, r5
 8008c50:	f8c0 e004 	str.w	lr, [r0, #4]
 8008c54:	6085      	str	r5, [r0, #8]
 8008c56:	2d00      	cmp	r5, #0
 8008c58:	f43f af64 	beq.w	8008b24 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
 8008c5c:	43e4      	mvns	r4, r4
 8008c5e:	6044      	str	r4, [r0, #4]
 8008c60:	1b75      	subs	r5, r6, r5
 8008c62:	e75e      	b.n	8008b22 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
 8008c64:	3d800000 	.word	0x3d800000

08008c68 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 8008c68:	4b06      	ldr	r3, [pc, #24]	@ (8008c84 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 8008c6a:	881a      	ldrh	r2, [r3, #0]
 8008c6c:	4282      	cmp	r2, r0
 8008c6e:	d807      	bhi.n	8008c80 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 8008c70:	4b05      	ldr	r3, [pc, #20]	@ (8008c88 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 8008c72:	881b      	ldrh	r3, [r3, #0]
 8008c74:	4413      	add	r3, r2
 8008c76:	4298      	cmp	r0, r3
 8008c78:	bfac      	ite	ge
 8008c7a:	2000      	movge	r0, #0
 8008c7c:	2001      	movlt	r0, #1
 8008c7e:	4770      	bx	lr
 8008c80:	2000      	movs	r0, #0
 8008c82:	4770      	bx	lr
 8008c84:	200091c4 	.word	0x200091c4
 8008c88:	200091c6 	.word	0x200091c6

08008c8c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 8008c8c:	b508      	push	{r3, lr}
 8008c8e:	4601      	mov	r1, r0
 8008c90:	f7ff ffea 	bl	8008c68 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 8008c94:	b118      	cbz	r0, 8008c9e <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 8008c96:	4b02      	ldr	r3, [pc, #8]	@ (8008ca0 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8008c9e:	bd08      	pop	{r3, pc}
 8008ca0:	200091bc 	.word	0x200091bc

08008ca4 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 8008ca4:	4a12      	ldr	r2, [pc, #72]	@ (8008cf0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
 8008ca6:	8803      	ldrh	r3, [r0, #0]
 8008ca8:	8812      	ldrh	r2, [r2, #0]
 8008caa:	4293      	cmp	r3, r2
 8008cac:	d207      	bcs.n	8008cbe <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
 8008cae:	4a11      	ldr	r2, [pc, #68]	@ (8008cf4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 8008cb0:	6812      	ldr	r2, [r2, #0]
 8008cb2:	2114      	movs	r1, #20
 8008cb4:	fb01 2303 	mla	r3, r1, r3, r2
 8008cb8:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 8008cbc:	4770      	bx	lr
 8008cbe:	490e      	ldr	r1, [pc, #56]	@ (8008cf8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 8008cc0:	8809      	ldrh	r1, [r1, #0]
 8008cc2:	4411      	add	r1, r2
 8008cc4:	428b      	cmp	r3, r1
 8008cc6:	da04      	bge.n	8008cd2 <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
 8008cc8:	1a9b      	subs	r3, r3, r2
 8008cca:	4a0c      	ldr	r2, [pc, #48]	@ (8008cfc <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 8008ccc:	210e      	movs	r1, #14
 8008cce:	6812      	ldr	r2, [r2, #0]
 8008cd0:	e7f0      	b.n	8008cb4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
 8008cd2:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8008cd6:	4293      	cmp	r3, r2
 8008cd8:	d108      	bne.n	8008cec <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
 8008cda:	4b09      	ldr	r3, [pc, #36]	@ (8008d00 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 8008cdc:	781b      	ldrb	r3, [r3, #0]
 8008cde:	b91b      	cbnz	r3, 8008ce8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
 8008ce0:	4b08      	ldr	r3, [pc, #32]	@ (8008d04 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 8008ce2:	f9b3 0000 	ldrsh.w	r0, [r3]
 8008ce6:	4770      	bx	lr
 8008ce8:	4b07      	ldr	r3, [pc, #28]	@ (8008d08 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 8008cea:	e7fa      	b.n	8008ce2 <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
 8008cec:	2000      	movs	r0, #0
 8008cee:	4770      	bx	lr
 8008cf0:	200091c4 	.word	0x200091c4
 8008cf4:	200091c8 	.word	0x200091c8
 8008cf8:	200091c6 	.word	0x200091c6
 8008cfc:	200091c0 	.word	0x200091c0
 8008d00:	20009170 	.word	0x20009170
 8008d04:	20009172 	.word	0x20009172
 8008d08:	20009174 	.word	0x20009174

08008d0c <_ZNK8touchgfx6Bitmap9getHeightEv>:
 8008d0c:	4a12      	ldr	r2, [pc, #72]	@ (8008d58 <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
 8008d0e:	8803      	ldrh	r3, [r0, #0]
 8008d10:	8812      	ldrh	r2, [r2, #0]
 8008d12:	4293      	cmp	r3, r2
 8008d14:	d207      	bcs.n	8008d26 <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
 8008d16:	4a11      	ldr	r2, [pc, #68]	@ (8008d5c <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 8008d18:	6812      	ldr	r2, [r2, #0]
 8008d1a:	2114      	movs	r1, #20
 8008d1c:	fb01 2303 	mla	r3, r1, r3, r2
 8008d20:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 8008d24:	4770      	bx	lr
 8008d26:	490e      	ldr	r1, [pc, #56]	@ (8008d60 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 8008d28:	8809      	ldrh	r1, [r1, #0]
 8008d2a:	4411      	add	r1, r2
 8008d2c:	428b      	cmp	r3, r1
 8008d2e:	da04      	bge.n	8008d3a <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
 8008d30:	1a9b      	subs	r3, r3, r2
 8008d32:	4a0c      	ldr	r2, [pc, #48]	@ (8008d64 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 8008d34:	210e      	movs	r1, #14
 8008d36:	6812      	ldr	r2, [r2, #0]
 8008d38:	e7f0      	b.n	8008d1c <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
 8008d3a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8008d3e:	4293      	cmp	r3, r2
 8008d40:	d108      	bne.n	8008d54 <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
 8008d42:	4b09      	ldr	r3, [pc, #36]	@ (8008d68 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 8008d44:	781b      	ldrb	r3, [r3, #0]
 8008d46:	b91b      	cbnz	r3, 8008d50 <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
 8008d48:	4b08      	ldr	r3, [pc, #32]	@ (8008d6c <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 8008d4a:	f9b3 0000 	ldrsh.w	r0, [r3]
 8008d4e:	4770      	bx	lr
 8008d50:	4b07      	ldr	r3, [pc, #28]	@ (8008d70 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 8008d52:	e7fa      	b.n	8008d4a <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
 8008d54:	2000      	movs	r0, #0
 8008d56:	4770      	bx	lr
 8008d58:	200091c4 	.word	0x200091c4
 8008d5c:	200091c8 	.word	0x200091c8
 8008d60:	200091c6 	.word	0x200091c6
 8008d64:	200091c0 	.word	0x200091c0
 8008d68:	20009170 	.word	0x20009170
 8008d6c:	20009174 	.word	0x20009174
 8008d70:	20009172 	.word	0x20009172

08008d74 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 8008d74:	b530      	push	{r4, r5, lr}
 8008d76:	4a22      	ldr	r2, [pc, #136]	@ (8008e00 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
 8008d78:	880b      	ldrh	r3, [r1, #0]
 8008d7a:	8812      	ldrh	r2, [r2, #0]
 8008d7c:	4293      	cmp	r3, r2
 8008d7e:	d213      	bcs.n	8008da8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x34>
 8008d80:	4a20      	ldr	r2, [pc, #128]	@ (8008e04 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 8008d82:	6812      	ldr	r2, [r2, #0]
 8008d84:	2114      	movs	r1, #20
 8008d86:	fb01 2303 	mla	r3, r1, r3, r2
 8008d8a:	8a1a      	ldrh	r2, [r3, #16]
 8008d8c:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 8008d90:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 8008d94:	8a5b      	ldrh	r3, [r3, #18]
 8008d96:	8004      	strh	r4, [r0, #0]
 8008d98:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8008d9c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008da0:	8041      	strh	r1, [r0, #2]
 8008da2:	8082      	strh	r2, [r0, #4]
 8008da4:	80c3      	strh	r3, [r0, #6]
 8008da6:	e024      	b.n	8008df2 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x7e>
 8008da8:	4917      	ldr	r1, [pc, #92]	@ (8008e08 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 8008daa:	8809      	ldrh	r1, [r1, #0]
 8008dac:	4411      	add	r1, r2
 8008dae:	428b      	cmp	r3, r1
 8008db0:	da10      	bge.n	8008dd4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x60>
 8008db2:	1a9b      	subs	r3, r3, r2
 8008db4:	220e      	movs	r2, #14
 8008db6:	4353      	muls	r3, r2
 8008db8:	4a14      	ldr	r2, [pc, #80]	@ (8008e0c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 8008dba:	6811      	ldr	r1, [r2, #0]
 8008dbc:	18ca      	adds	r2, r1, r3
 8008dbe:	5ecd      	ldrsh	r5, [r1, r3]
 8008dc0:	f9b2 4002 	ldrsh.w	r4, [r2, #2]
 8008dc4:	f9b2 1004 	ldrsh.w	r1, [r2, #4]
 8008dc8:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
 8008dcc:	8005      	strh	r5, [r0, #0]
 8008dce:	8044      	strh	r4, [r0, #2]
 8008dd0:	8081      	strh	r1, [r0, #4]
 8008dd2:	e7e7      	b.n	8008da4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 8008dd4:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8008dd8:	4293      	cmp	r3, r2
 8008dda:	d10b      	bne.n	8008df4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>
 8008ddc:	4b0c      	ldr	r3, [pc, #48]	@ (8008e10 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 8008dde:	f9b3 1000 	ldrsh.w	r1, [r3]
 8008de2:	4b0c      	ldr	r3, [pc, #48]	@ (8008e14 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 8008de4:	8081      	strh	r1, [r0, #4]
 8008de6:	f9b3 2000 	ldrsh.w	r2, [r3]
 8008dea:	80c2      	strh	r2, [r0, #6]
 8008dec:	2300      	movs	r3, #0
 8008dee:	8003      	strh	r3, [r0, #0]
 8008df0:	8043      	strh	r3, [r0, #2]
 8008df2:	bd30      	pop	{r4, r5, pc}
 8008df4:	2300      	movs	r3, #0
 8008df6:	8003      	strh	r3, [r0, #0]
 8008df8:	8043      	strh	r3, [r0, #2]
 8008dfa:	8083      	strh	r3, [r0, #4]
 8008dfc:	e7d2      	b.n	8008da4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 8008dfe:	bf00      	nop
 8008e00:	200091c4 	.word	0x200091c4
 8008e04:	200091c8 	.word	0x200091c8
 8008e08:	200091c6 	.word	0x200091c6
 8008e0c:	200091c0 	.word	0x200091c0
 8008e10:	2000916c 	.word	0x2000916c
 8008e14:	2000916e 	.word	0x2000916e

08008e18 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 8008e18:	4a17      	ldr	r2, [pc, #92]	@ (8008e78 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x60>)
 8008e1a:	8803      	ldrh	r3, [r0, #0]
 8008e1c:	8812      	ldrh	r2, [r2, #0]
 8008e1e:	4293      	cmp	r3, r2
 8008e20:	d213      	bcs.n	8008e4a <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x32>
 8008e22:	4a16      	ldr	r2, [pc, #88]	@ (8008e7c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 8008e24:	6812      	ldr	r2, [r2, #0]
 8008e26:	2114      	movs	r1, #20
 8008e28:	fb01 2303 	mla	r3, r1, r3, r2
 8008e2c:	8a1a      	ldrh	r2, [r3, #16]
 8008e2e:	8919      	ldrh	r1, [r3, #8]
 8008e30:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8008e34:	428a      	cmp	r2, r1
 8008e36:	db1d      	blt.n	8008e74 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 8008e38:	8a58      	ldrh	r0, [r3, #18]
 8008e3a:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8008e3e:	895b      	ldrh	r3, [r3, #10]
 8008e40:	4298      	cmp	r0, r3
 8008e42:	bfac      	ite	ge
 8008e44:	2000      	movge	r0, #0
 8008e46:	2001      	movlt	r0, #1
 8008e48:	4770      	bx	lr
 8008e4a:	490d      	ldr	r1, [pc, #52]	@ (8008e80 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 8008e4c:	8809      	ldrh	r1, [r1, #0]
 8008e4e:	4411      	add	r1, r2
 8008e50:	428b      	cmp	r3, r1
 8008e52:	da0d      	bge.n	8008e70 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x58>
 8008e54:	1a9b      	subs	r3, r3, r2
 8008e56:	4a0b      	ldr	r2, [pc, #44]	@ (8008e84 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 8008e58:	6812      	ldr	r2, [r2, #0]
 8008e5a:	210e      	movs	r1, #14
 8008e5c:	fb01 2303 	mla	r3, r1, r3, r2
 8008e60:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 8008e64:	891a      	ldrh	r2, [r3, #8]
 8008e66:	4291      	cmp	r1, r2
 8008e68:	db04      	blt.n	8008e74 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 8008e6a:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 8008e6e:	e7e6      	b.n	8008e3e <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x26>
 8008e70:	2000      	movs	r0, #0
 8008e72:	4770      	bx	lr
 8008e74:	2001      	movs	r0, #1
 8008e76:	4770      	bx	lr
 8008e78:	200091c4 	.word	0x200091c4
 8008e7c:	200091c8 	.word	0x200091c8
 8008e80:	200091c6 	.word	0x200091c6
 8008e84:	200091c0 	.word	0x200091c0

08008e88 <_ZNK8touchgfx6Bitmap7getDataEv>:
 8008e88:	4a12      	ldr	r2, [pc, #72]	@ (8008ed4 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 8008e8a:	8803      	ldrh	r3, [r0, #0]
 8008e8c:	8811      	ldrh	r1, [r2, #0]
 8008e8e:	428b      	cmp	r3, r1
 8008e90:	d20b      	bcs.n	8008eaa <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
 8008e92:	4a11      	ldr	r2, [pc, #68]	@ (8008ed8 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 8008e94:	6812      	ldr	r2, [r2, #0]
 8008e96:	b112      	cbz	r2, 8008e9e <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 8008e98:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8008e9c:	b9c0      	cbnz	r0, 8008ed0 <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
 8008e9e:	4a0f      	ldr	r2, [pc, #60]	@ (8008edc <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 8008ea0:	6811      	ldr	r1, [r2, #0]
 8008ea2:	2214      	movs	r2, #20
 8008ea4:	4353      	muls	r3, r2
 8008ea6:	58c8      	ldr	r0, [r1, r3]
 8008ea8:	4770      	bx	lr
 8008eaa:	4a0d      	ldr	r2, [pc, #52]	@ (8008ee0 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 8008eac:	8812      	ldrh	r2, [r2, #0]
 8008eae:	440a      	add	r2, r1
 8008eb0:	4293      	cmp	r3, r2
 8008eb2:	da04      	bge.n	8008ebe <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
 8008eb4:	4a08      	ldr	r2, [pc, #32]	@ (8008ed8 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 8008eb6:	6812      	ldr	r2, [r2, #0]
 8008eb8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8008ebc:	4770      	bx	lr
 8008ebe:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8008ec2:	4293      	cmp	r3, r2
 8008ec4:	d103      	bne.n	8008ece <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 8008ec6:	4b07      	ldr	r3, [pc, #28]	@ (8008ee4 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 8008ecc:	4770      	bx	lr
 8008ece:	2000      	movs	r0, #0
 8008ed0:	4770      	bx	lr
 8008ed2:	bf00      	nop
 8008ed4:	200091c4 	.word	0x200091c4
 8008ed8:	200091bc 	.word	0x200091bc
 8008edc:	200091c8 	.word	0x200091c8
 8008ee0:	200091c6 	.word	0x200091c6
 8008ee4:	20009178 	.word	0x20009178

08008ee8 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 8008ee8:	4b24      	ldr	r3, [pc, #144]	@ (8008f7c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 8008eea:	8802      	ldrh	r2, [r0, #0]
 8008eec:	8818      	ldrh	r0, [r3, #0]
 8008eee:	4282      	cmp	r2, r0
 8008ef0:	d221      	bcs.n	8008f36 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 8008ef2:	4b23      	ldr	r3, [pc, #140]	@ (8008f80 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 8008ef4:	6819      	ldr	r1, [r3, #0]
 8008ef6:	2314      	movs	r3, #20
 8008ef8:	fb03 1302 	mla	r3, r3, r2, r1
 8008efc:	6858      	ldr	r0, [r3, #4]
 8008efe:	2800      	cmp	r0, #0
 8008f00:	d03a      	beq.n	8008f78 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 8008f02:	4920      	ldr	r1, [pc, #128]	@ (8008f84 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 8008f04:	6809      	ldr	r1, [r1, #0]
 8008f06:	2900      	cmp	r1, #0
 8008f08:	d036      	beq.n	8008f78 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 8008f0a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8008f0e:	2900      	cmp	r1, #0
 8008f10:	d032      	beq.n	8008f78 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 8008f12:	891a      	ldrh	r2, [r3, #8]
 8008f14:	8958      	ldrh	r0, [r3, #10]
 8008f16:	4350      	muls	r0, r2
 8008f18:	7c5a      	ldrb	r2, [r3, #17]
 8008f1a:	7cdb      	ldrb	r3, [r3, #19]
 8008f1c:	0952      	lsrs	r2, r2, #5
 8008f1e:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8008f22:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8008f26:	2b0b      	cmp	r3, #11
 8008f28:	bf18      	it	ne
 8008f2a:	0040      	lslne	r0, r0, #1
 8008f2c:	3003      	adds	r0, #3
 8008f2e:	f020 0003 	bic.w	r0, r0, #3
 8008f32:	4408      	add	r0, r1
 8008f34:	4770      	bx	lr
 8008f36:	4b14      	ldr	r3, [pc, #80]	@ (8008f88 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 8008f38:	881b      	ldrh	r3, [r3, #0]
 8008f3a:	4403      	add	r3, r0
 8008f3c:	429a      	cmp	r2, r3
 8008f3e:	da1a      	bge.n	8008f76 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 8008f40:	4b12      	ldr	r3, [pc, #72]	@ (8008f8c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	1a10      	subs	r0, r2, r0
 8008f46:	210e      	movs	r1, #14
 8008f48:	fb01 3000 	mla	r0, r1, r0, r3
 8008f4c:	7b03      	ldrb	r3, [r0, #12]
 8008f4e:	f003 031f 	and.w	r3, r3, #31
 8008f52:	2b0b      	cmp	r3, #11
 8008f54:	d10b      	bne.n	8008f6e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
 8008f56:	8903      	ldrh	r3, [r0, #8]
 8008f58:	8940      	ldrh	r0, [r0, #10]
 8008f5a:	4358      	muls	r0, r3
 8008f5c:	4b09      	ldr	r3, [pc, #36]	@ (8008f84 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 8008f5e:	6819      	ldr	r1, [r3, #0]
 8008f60:	3003      	adds	r0, #3
 8008f62:	f020 0303 	bic.w	r3, r0, #3
 8008f66:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 8008f6a:	4418      	add	r0, r3
 8008f6c:	4770      	bx	lr
 8008f6e:	2b0d      	cmp	r3, #13
 8008f70:	d101      	bne.n	8008f76 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 8008f72:	300d      	adds	r0, #13
 8008f74:	4770      	bx	lr
 8008f76:	2000      	movs	r0, #0
 8008f78:	4770      	bx	lr
 8008f7a:	bf00      	nop
 8008f7c:	200091c4 	.word	0x200091c4
 8008f80:	200091c8 	.word	0x200091c8
 8008f84:	200091bc 	.word	0x200091bc
 8008f88:	200091c6 	.word	0x200091c6
 8008f8c:	200091c0 	.word	0x200091c0

08008f90 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 8008f90:	b510      	push	{r4, lr}
 8008f92:	4b1f      	ldr	r3, [pc, #124]	@ (8009010 <_ZNK8touchgfx6Bitmap9getFormatEv+0x80>)
 8008f94:	8802      	ldrh	r2, [r0, #0]
 8008f96:	881b      	ldrh	r3, [r3, #0]
 8008f98:	429a      	cmp	r2, r3
 8008f9a:	d21a      	bcs.n	8008fd2 <_ZNK8touchgfx6Bitmap9getFormatEv+0x42>
 8008f9c:	4b1d      	ldr	r3, [pc, #116]	@ (8009014 <_ZNK8touchgfx6Bitmap9getFormatEv+0x84>)
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	2114      	movs	r1, #20
 8008fa2:	fb01 3102 	mla	r1, r1, r2, r3
 8008fa6:	7c4b      	ldrb	r3, [r1, #17]
 8008fa8:	0958      	lsrs	r0, r3, #5
 8008faa:	7ccb      	ldrb	r3, [r1, #19]
 8008fac:	491a      	ldr	r1, [pc, #104]	@ (8009018 <_ZNK8touchgfx6Bitmap9getFormatEv+0x88>)
 8008fae:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8008fb2:	6809      	ldr	r1, [r1, #0]
 8008fb4:	ea43 03c0 	orr.w	r3, r3, r0, lsl #3
 8008fb8:	b2d8      	uxtb	r0, r3
 8008fba:	b149      	cbz	r1, 8008fd0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 8008fbc:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8008fc0:	b132      	cbz	r2, 8008fd0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 8008fc2:	2b0e      	cmp	r3, #14
 8008fc4:	d021      	beq.n	800900a <_ZNK8touchgfx6Bitmap9getFormatEv+0x7a>
 8008fc6:	280f      	cmp	r0, #15
 8008fc8:	d01d      	beq.n	8009006 <_ZNK8touchgfx6Bitmap9getFormatEv+0x76>
 8008fca:	2810      	cmp	r0, #16
 8008fcc:	bf08      	it	eq
 8008fce:	2002      	moveq	r0, #2
 8008fd0:	bd10      	pop	{r4, pc}
 8008fd2:	4912      	ldr	r1, [pc, #72]	@ (800901c <_ZNK8touchgfx6Bitmap9getFormatEv+0x8c>)
 8008fd4:	8809      	ldrh	r1, [r1, #0]
 8008fd6:	4419      	add	r1, r3
 8008fd8:	428a      	cmp	r2, r1
 8008fda:	da09      	bge.n	8008ff0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>
 8008fdc:	1ad3      	subs	r3, r2, r3
 8008fde:	4a10      	ldr	r2, [pc, #64]	@ (8009020 <_ZNK8touchgfx6Bitmap9getFormatEv+0x90>)
 8008fe0:	6812      	ldr	r2, [r2, #0]
 8008fe2:	210e      	movs	r1, #14
 8008fe4:	fb01 2303 	mla	r3, r1, r3, r2
 8008fe8:	7b18      	ldrb	r0, [r3, #12]
 8008fea:	f000 001f 	and.w	r0, r0, #31
 8008fee:	e7ef      	b.n	8008fd0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 8008ff0:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 8008ff4:	429a      	cmp	r2, r3
 8008ff6:	d108      	bne.n	800900a <_ZNK8touchgfx6Bitmap9getFormatEv+0x7a>
 8008ff8:	f7f8 fb52 	bl	80016a0 <_ZN8touchgfx3HAL3lcdEv>
 8008ffc:	6803      	ldr	r3, [r0, #0]
 8008ffe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009002:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009004:	4718      	bx	r3
 8009006:	2001      	movs	r0, #1
 8009008:	e7e2      	b.n	8008fd0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 800900a:	2000      	movs	r0, #0
 800900c:	e7e0      	b.n	8008fd0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 800900e:	bf00      	nop
 8009010:	200091c4 	.word	0x200091c4
 8009014:	200091c8 	.word	0x200091c8
 8009018:	200091bc 	.word	0x200091bc
 800901c:	200091c6 	.word	0x200091c6
 8009020:	200091c0 	.word	0x200091c0

08009024 <_ZNK8touchgfx8LCD16bpp8bitDepthEv>:
 8009024:	2010      	movs	r0, #16
 8009026:	4770      	bx	lr

08009028 <_ZNK8touchgfx8LCD16bpp17framebufferFormatEv>:
 8009028:	2000      	movs	r0, #0
 800902a:	4770      	bx	lr

0800902c <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv>:
 800902c:	4b02      	ldr	r3, [pc, #8]	@ (8009038 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0xc>)
 800902e:	8818      	ldrh	r0, [r3, #0]
 8009030:	0040      	lsls	r0, r0, #1
 8009032:	b280      	uxth	r0, r0
 8009034:	4770      	bx	lr
 8009036:	bf00      	nop
 8009038:	20009172 	.word	0x20009172

0800903c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 800903c:	2bff      	cmp	r3, #255	@ 0xff
 800903e:	d05e      	beq.n	80090fe <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc2>
 8009040:	2a0b      	cmp	r2, #11
 8009042:	d058      	beq.n	80090f6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xba>
 8009044:	d80e      	bhi.n	8009064 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 8009046:	2a03      	cmp	r2, #3
 8009048:	d04d      	beq.n	80090e6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xaa>
 800904a:	d804      	bhi.n	8009056 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 800904c:	2a01      	cmp	r2, #1
 800904e:	d04c      	beq.n	80090ea <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xae>
 8009050:	d94d      	bls.n	80090ee <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xb2>
 8009052:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8009054:	e031      	b.n	80090ba <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8009056:	2a09      	cmp	r2, #9
 8009058:	d04d      	beq.n	80090f6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xba>
 800905a:	d84a      	bhi.n	80090f2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xb6>
 800905c:	2a08      	cmp	r2, #8
 800905e:	d048      	beq.n	80090f2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xb6>
 8009060:	2300      	movs	r3, #0
 8009062:	e02a      	b.n	80090ba <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8009064:	2a2f      	cmp	r2, #47	@ 0x2f
 8009066:	d02c      	beq.n	80090c2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x86>
 8009068:	d811      	bhi.n	800908e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x52>
 800906a:	2a2d      	cmp	r2, #45	@ 0x2d
 800906c:	d018      	beq.n	80090a0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x64>
 800906e:	d831      	bhi.n	80090d4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x98>
 8009070:	2a2c      	cmp	r2, #44	@ 0x2c
 8009072:	d1f5      	bne.n	8009060 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8009074:	684a      	ldr	r2, [r1, #4]
 8009076:	7813      	ldrb	r3, [r2, #0]
 8009078:	7852      	ldrb	r2, [r2, #1]
 800907a:	2a00      	cmp	r2, #0
 800907c:	d1f0      	bne.n	8009060 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 800907e:	2b01      	cmp	r3, #1
 8009080:	d01d      	beq.n	80090be <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 8009082:	2b00      	cmp	r3, #0
 8009084:	d02d      	beq.n	80090e2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 8009086:	2b02      	cmp	r3, #2
 8009088:	d1ea      	bne.n	8009060 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 800908a:	68c3      	ldr	r3, [r0, #12]
 800908c:	e015      	b.n	80090ba <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 800908e:	2a31      	cmp	r2, #49	@ 0x31
 8009090:	d004      	beq.n	800909c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x60>
 8009092:	d332      	bcc.n	80090fa <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbe>
 8009094:	2a32      	cmp	r2, #50	@ 0x32
 8009096:	d030      	beq.n	80090fa <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbe>
 8009098:	2a33      	cmp	r2, #51	@ 0x33
 800909a:	d1e1      	bne.n	8009060 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 800909c:	6f43      	ldr	r3, [r0, #116]	@ 0x74
 800909e:	e00c      	b.n	80090ba <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 80090a0:	684a      	ldr	r2, [r1, #4]
 80090a2:	7813      	ldrb	r3, [r2, #0]
 80090a4:	7852      	ldrb	r2, [r2, #1]
 80090a6:	2a00      	cmp	r2, #0
 80090a8:	d1da      	bne.n	8009060 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80090aa:	2b01      	cmp	r3, #1
 80090ac:	d004      	beq.n	80090b8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7c>
 80090ae:	d30f      	bcc.n	80090d0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x94>
 80090b0:	2b02      	cmp	r3, #2
 80090b2:	d1d5      	bne.n	8009060 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80090b4:	6943      	ldr	r3, [r0, #20]
 80090b6:	e000      	b.n	80090ba <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 80090b8:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80090ba:	4618      	mov	r0, r3
 80090bc:	4770      	bx	lr
 80090be:	69c3      	ldr	r3, [r0, #28]
 80090c0:	e7fb      	b.n	80090ba <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 80090c2:	684b      	ldr	r3, [r1, #4]
 80090c4:	781a      	ldrb	r2, [r3, #0]
 80090c6:	785b      	ldrb	r3, [r3, #1]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d1c9      	bne.n	8009060 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80090cc:	2a00      	cmp	r2, #0
 80090ce:	d1f4      	bne.n	80090ba <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 80090d0:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80090d2:	e7f2      	b.n	80090ba <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 80090d4:	684b      	ldr	r3, [r1, #4]
 80090d6:	781a      	ldrb	r2, [r3, #0]
 80090d8:	785b      	ldrb	r3, [r3, #1]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d1c0      	bne.n	8009060 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80090de:	2a00      	cmp	r2, #0
 80090e0:	d1eb      	bne.n	80090ba <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 80090e2:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80090e4:	e7e9      	b.n	80090ba <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 80090e6:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 80090e8:	e7e7      	b.n	80090ba <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 80090ea:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 80090ec:	e7e5      	b.n	80090ba <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 80090ee:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 80090f0:	e7e3      	b.n	80090ba <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 80090f2:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 80090f4:	e7e1      	b.n	80090ba <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 80090f6:	6e43      	ldr	r3, [r0, #100]	@ 0x64
 80090f8:	e7df      	b.n	80090ba <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 80090fa:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 80090fc:	e7dd      	b.n	80090ba <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 80090fe:	2a0b      	cmp	r2, #11
 8009100:	d059      	beq.n	80091b6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x17a>
 8009102:	d80e      	bhi.n	8009122 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe6>
 8009104:	2a03      	cmp	r2, #3
 8009106:	d050      	beq.n	80091aa <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x16e>
 8009108:	d804      	bhi.n	8009114 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xd8>
 800910a:	2a01      	cmp	r2, #1
 800910c:	d04f      	beq.n	80091ae <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x172>
 800910e:	d950      	bls.n	80091b2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x176>
 8009110:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8009112:	e7d2      	b.n	80090ba <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8009114:	2a09      	cmp	r2, #9
 8009116:	d04e      	beq.n	80091b6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x17a>
 8009118:	d801      	bhi.n	800911e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe2>
 800911a:	2a08      	cmp	r2, #8
 800911c:	d1a0      	bne.n	8009060 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 800911e:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8009120:	e7cb      	b.n	80090ba <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8009122:	2a2f      	cmp	r2, #47	@ 0x2f
 8009124:	d02d      	beq.n	8009182 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x146>
 8009126:	d811      	bhi.n	800914c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x110>
 8009128:	2a2d      	cmp	r2, #45	@ 0x2d
 800912a:	d018      	beq.n	800915e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x122>
 800912c:	d833      	bhi.n	8009196 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x15a>
 800912e:	2a2c      	cmp	r2, #44	@ 0x2c
 8009130:	d196      	bne.n	8009060 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8009132:	684a      	ldr	r2, [r1, #4]
 8009134:	7813      	ldrb	r3, [r2, #0]
 8009136:	7852      	ldrb	r2, [r2, #1]
 8009138:	2a00      	cmp	r2, #0
 800913a:	d191      	bne.n	8009060 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 800913c:	2b01      	cmp	r3, #1
 800913e:	d01e      	beq.n	800917e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 8009140:	2b00      	cmp	r3, #0
 8009142:	d030      	beq.n	80091a6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x16a>
 8009144:	2b02      	cmp	r3, #2
 8009146:	d18b      	bne.n	8009060 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8009148:	6903      	ldr	r3, [r0, #16]
 800914a:	e7b6      	b.n	80090ba <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 800914c:	2a31      	cmp	r2, #49	@ 0x31
 800914e:	d004      	beq.n	800915a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11e>
 8009150:	d333      	bcc.n	80091ba <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x17e>
 8009152:	2a32      	cmp	r2, #50	@ 0x32
 8009154:	d031      	beq.n	80091ba <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x17e>
 8009156:	2a33      	cmp	r2, #51	@ 0x33
 8009158:	d182      	bne.n	8009060 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 800915a:	6f83      	ldr	r3, [r0, #120]	@ 0x78
 800915c:	e7ad      	b.n	80090ba <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 800915e:	684a      	ldr	r2, [r1, #4]
 8009160:	7813      	ldrb	r3, [r2, #0]
 8009162:	7852      	ldrb	r2, [r2, #1]
 8009164:	2a00      	cmp	r2, #0
 8009166:	f47f af7b 	bne.w	8009060 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 800916a:	2b01      	cmp	r3, #1
 800916c:	d005      	beq.n	800917a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 800916e:	d310      	bcc.n	8009192 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x156>
 8009170:	2b02      	cmp	r3, #2
 8009172:	f47f af75 	bne.w	8009060 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8009176:	6983      	ldr	r3, [r0, #24]
 8009178:	e79f      	b.n	80090ba <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 800917a:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800917c:	e79d      	b.n	80090ba <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 800917e:	6a03      	ldr	r3, [r0, #32]
 8009180:	e79b      	b.n	80090ba <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8009182:	684b      	ldr	r3, [r1, #4]
 8009184:	781a      	ldrb	r2, [r3, #0]
 8009186:	785b      	ldrb	r3, [r3, #1]
 8009188:	2b00      	cmp	r3, #0
 800918a:	f47f af69 	bne.w	8009060 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 800918e:	2a00      	cmp	r2, #0
 8009190:	d193      	bne.n	80090ba <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8009192:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8009194:	e791      	b.n	80090ba <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8009196:	684b      	ldr	r3, [r1, #4]
 8009198:	781a      	ldrb	r2, [r3, #0]
 800919a:	785b      	ldrb	r3, [r3, #1]
 800919c:	2b00      	cmp	r3, #0
 800919e:	f47f af5f 	bne.w	8009060 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80091a2:	2a00      	cmp	r2, #0
 80091a4:	d189      	bne.n	80090ba <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 80091a6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80091a8:	e787      	b.n	80090ba <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 80091aa:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 80091ac:	e785      	b.n	80090ba <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 80091ae:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 80091b0:	e783      	b.n	80090ba <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 80091b2:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 80091b4:	e781      	b.n	80090ba <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 80091b6:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 80091b8:	e77f      	b.n	80090ba <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 80091ba:	6f03      	ldr	r3, [r0, #112]	@ 0x70
 80091bc:	e77d      	b.n	80090ba <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>

080091be <_ZN8touchgfx8LCD16bppD1Ev>:
 80091be:	4770      	bx	lr

080091c0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 80091c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80091c4:	b088      	sub	sp, #32
 80091c6:	ac08      	add	r4, sp, #32
 80091c8:	4606      	mov	r6, r0
 80091ca:	f824 3d0c 	strh.w	r3, [r4, #-12]!
 80091ce:	4620      	mov	r0, r4
 80091d0:	4688      	mov	r8, r1
 80091d2:	4691      	mov	r9, r2
 80091d4:	f7ff fe58 	bl	8008e88 <_ZNK8touchgfx6Bitmap7getDataEv>
 80091d8:	6833      	ldr	r3, [r6, #0]
 80091da:	4605      	mov	r5, r0
 80091dc:	4620      	mov	r0, r4
 80091de:	699f      	ldr	r7, [r3, #24]
 80091e0:	f7ff fd60 	bl	8008ca4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80091e4:	4682      	mov	sl, r0
 80091e6:	4620      	mov	r0, r4
 80091e8:	f7ff fd90 	bl	8008d0c <_ZNK8touchgfx6Bitmap9getHeightEv>
 80091ec:	9500      	str	r5, [sp, #0]
 80091ee:	e9cd a001 	strd	sl, r0, [sp, #4]
 80091f2:	464b      	mov	r3, r9
 80091f4:	a806      	add	r0, sp, #24
 80091f6:	4642      	mov	r2, r8
 80091f8:	4631      	mov	r1, r6
 80091fa:	47b8      	blx	r7
 80091fc:	4628      	mov	r0, r5
 80091fe:	b008      	add	sp, #32
 8009200:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08009204 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 8009204:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009208:	2300      	movs	r3, #0
 800920a:	9300      	str	r3, [sp, #0]
 800920c:	4b3d      	ldr	r3, [pc, #244]	@ (8009304 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x100>)
 800920e:	781b      	ldrb	r3, [r3, #0]
 8009210:	2b00      	cmp	r3, #0
 8009212:	d137      	bne.n	8009284 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x80>
 8009214:	4a3c      	ldr	r2, [pc, #240]	@ (8009308 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 8009216:	f9b2 2000 	ldrsh.w	r2, [r2]
 800921a:	f8ad 2004 	strh.w	r2, [sp, #4]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d132      	bne.n	8009288 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x84>
 8009222:	4b3a      	ldr	r3, [pc, #232]	@ (800930c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 8009224:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009228:	6808      	ldr	r0, [r1, #0]
 800922a:	6849      	ldr	r1, [r1, #4]
 800922c:	f8ad 3006 	strh.w	r3, [sp, #6]
 8009230:	ac02      	add	r4, sp, #8
 8009232:	ab02      	add	r3, sp, #8
 8009234:	c303      	stmia	r3!, {r0, r1}
 8009236:	4669      	mov	r1, sp
 8009238:	4620      	mov	r0, r4
 800923a:	f7fe fbeb 	bl	8007a14 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 800923e:	4668      	mov	r0, sp
 8009240:	f7fe fbc0 	bl	80079c4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8009244:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8009248:	f8bd 2000 	ldrh.w	r2, [sp]
 800924c:	4d30      	ldr	r5, [pc, #192]	@ (8009310 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x10c>)
 800924e:	4413      	add	r3, r2
 8009250:	f8ad 3008 	strh.w	r3, [sp, #8]
 8009254:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8009258:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 800925c:	6828      	ldr	r0, [r5, #0]
 800925e:	4413      	add	r3, r2
 8009260:	f8ad 300a 	strh.w	r3, [sp, #10]
 8009264:	6803      	ldr	r3, [r0, #0]
 8009266:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009268:	4798      	blx	r3
 800926a:	f010 0f01 	tst.w	r0, #1
 800926e:	462f      	mov	r7, r5
 8009270:	d00c      	beq.n	800928c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x88>
 8009272:	6828      	ldr	r0, [r5, #0]
 8009274:	6803      	ldr	r3, [r0, #0]
 8009276:	e894 0006 	ldmia.w	r4, {r1, r2}
 800927a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800927c:	4798      	blx	r3
 800927e:	b004      	add	sp, #16
 8009280:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009284:	4a21      	ldr	r2, [pc, #132]	@ (800930c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 8009286:	e7c6      	b.n	8009216 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
 8009288:	4b1f      	ldr	r3, [pc, #124]	@ (8009308 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 800928a:	e7cb      	b.n	8009224 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
 800928c:	6838      	ldr	r0, [r7, #0]
 800928e:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 8009292:	6803      	ldr	r3, [r0, #0]
 8009294:	f9bd 500e 	ldrsh.w	r5, [sp, #14]
 8009298:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800929a:	4798      	blx	r3
 800929c:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 80092a0:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80092a4:	f8bd 6004 	ldrh.w	r6, [sp, #4]
 80092a8:	fb16 3602 	smlabb	r6, r6, r2, r3
 80092ac:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 80092b0:	6838      	ldr	r0, [r7, #0]
 80092b2:	6803      	ldr	r3, [r0, #0]
 80092b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092b6:	4798      	blx	r3
 80092b8:	4a13      	ldr	r2, [pc, #76]	@ (8009308 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 80092ba:	f9bd 400a 	ldrsh.w	r4, [sp, #10]
 80092be:	8813      	ldrh	r3, [r2, #0]
 80092c0:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 80092c4:	fb03 1404 	mla	r4, r3, r4, r1
 80092c8:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 80092cc:	435d      	muls	r5, r3
 80092ce:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 80092d2:	ea4f 0848 	mov.w	r8, r8, lsl #1
 80092d6:	4691      	mov	r9, r2
 80092d8:	6838      	ldr	r0, [r7, #0]
 80092da:	42ac      	cmp	r4, r5
 80092dc:	6803      	ldr	r3, [r0, #0]
 80092de:	d20e      	bcs.n	80092fe <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xfa>
 80092e0:	f8d3 a038 	ldr.w	sl, [r3, #56]	@ 0x38
 80092e4:	4632      	mov	r2, r6
 80092e6:	4643      	mov	r3, r8
 80092e8:	4621      	mov	r1, r4
 80092ea:	47d0      	blx	sl
 80092ec:	f8b9 3000 	ldrh.w	r3, [r9]
 80092f0:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80092f4:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 80092f8:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 80092fc:	e7ec      	b.n	80092d8 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd4>
 80092fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009300:	4798      	blx	r3
 8009302:	e7bc      	b.n	800927e <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
 8009304:	20009170 	.word	0x20009170
 8009308:	20009172 	.word	0x20009172
 800930c:	20009174 	.word	0x20009174
 8009310:	20009178 	.word	0x20009178

08009314 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 8009314:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009318:	b08b      	sub	sp, #44	@ 0x2c
 800931a:	460f      	mov	r7, r1
 800931c:	f89d b050 	ldrb.w	fp, [sp, #80]	@ 0x50
 8009320:	f89d 4054 	ldrb.w	r4, [sp, #84]	@ 0x54
 8009324:	4616      	mov	r6, r2
 8009326:	f1bb 0f00 	cmp.w	fp, #0
 800932a:	d04a      	beq.n	80093c2 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xae>
 800932c:	6810      	ldr	r0, [r2, #0]
 800932e:	6851      	ldr	r1, [r2, #4]
 8009330:	ad06      	add	r5, sp, #24
 8009332:	c503      	stmia	r5!, {r0, r1}
 8009334:	6818      	ldr	r0, [r3, #0]
 8009336:	6859      	ldr	r1, [r3, #4]
 8009338:	ad08      	add	r5, sp, #32
 800933a:	c503      	stmia	r5!, {r0, r1}
 800933c:	a806      	add	r0, sp, #24
 800933e:	f7fe fb41 	bl	80079c4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8009342:	4631      	mov	r1, r6
 8009344:	a808      	add	r0, sp, #32
 8009346:	f7fe fb65 	bl	8007a14 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 800934a:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 800934e:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 8009352:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 8009356:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	@ 0x24
 800935a:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	@ 0x26
 800935e:	fb16 2103 	smlabb	r1, r6, r3, r2
 8009362:	eb07 0641 	add.w	r6, r7, r1, lsl #1
 8009366:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 800936a:	4f5f      	ldr	r7, [pc, #380]	@ (80094e8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 800936c:	440a      	add	r2, r1
 800936e:	f8ad 2020 	strh.w	r2, [sp, #32]
 8009372:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8009376:	6838      	ldr	r0, [r7, #0]
 8009378:	4413      	add	r3, r2
 800937a:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 800937e:	6803      	ldr	r3, [r0, #0]
 8009380:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009382:	4798      	blx	r3
 8009384:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 8009388:	46b9      	mov	r9, r7
 800938a:	d11d      	bne.n	80093c8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb4>
 800938c:	b9fc      	cbnz	r4, 80093ce <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 800938e:	f010 0f01 	tst.w	r0, #1
 8009392:	d01c      	beq.n	80093ce <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 8009394:	f8d9 0000 	ldr.w	r0, [r9]
 8009398:	f8bd 3022 	ldrh.w	r3, [sp, #34]	@ 0x22
 800939c:	6801      	ldr	r1, [r0, #0]
 800939e:	f8cd b00c 	str.w	fp, [sp, #12]
 80093a2:	2700      	movs	r7, #0
 80093a4:	e9cd 4704 	strd	r4, r7, [sp, #16]
 80093a8:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 80093ac:	9402      	str	r4, [sp, #8]
 80093ae:	b2ad      	uxth	r5, r5
 80093b0:	fa1f f488 	uxth.w	r4, r8
 80093b4:	9501      	str	r5, [sp, #4]
 80093b6:	9400      	str	r4, [sp, #0]
 80093b8:	6c8c      	ldr	r4, [r1, #72]	@ 0x48
 80093ba:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80093be:	4631      	mov	r1, r6
 80093c0:	47a0      	blx	r4
 80093c2:	b00b      	add	sp, #44	@ 0x2c
 80093c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093c8:	f010 0f04 	tst.w	r0, #4
 80093cc:	e7e1      	b.n	8009392 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x7e>
 80093ce:	f8d9 0000 	ldr.w	r0, [r9]
 80093d2:	6803      	ldr	r3, [r0, #0]
 80093d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093d6:	4798      	blx	r3
 80093d8:	4b44      	ldr	r3, [pc, #272]	@ (80094ec <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d8>)
 80093da:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	@ 0x22
 80093de:	881a      	ldrh	r2, [r3, #0]
 80093e0:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 80093e4:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 80093e8:	fb02 1404 	mla	r4, r2, r4, r1
 80093ec:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 80093f0:	469a      	mov	sl, r3
 80093f2:	fb05 f502 	mul.w	r5, r5, r2
 80093f6:	ea4f 0748 	mov.w	r7, r8, lsl #1
 80093fa:	d059      	beq.n	80094b0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x19c>
 80093fc:	f1cb 09ff 	rsb	r9, fp, #255	@ 0xff
 8009400:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 8009404:	fa1f f28b 	uxth.w	r2, fp
 8009408:	fa1f f989 	uxth.w	r9, r9
 800940c:	469e      	mov	lr, r3
 800940e:	42ac      	cmp	r4, r5
 8009410:	d264      	bcs.n	80094dc <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 8009412:	eb04 0a07 	add.w	sl, r4, r7
 8009416:	4554      	cmp	r4, sl
 8009418:	d23d      	bcs.n	8009496 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x182>
 800941a:	8821      	ldrh	r1, [r4, #0]
 800941c:	f836 3b02 	ldrh.w	r3, [r6], #2
 8009420:	1208      	asrs	r0, r1, #8
 8009422:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8009426:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 800942a:	fb10 f009 	smulbb	r0, r0, r9
 800942e:	ea4f 0be1 	mov.w	fp, r1, asr #3
 8009432:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 8009436:	00c9      	lsls	r1, r1, #3
 8009438:	fb0c 0c02 	mla	ip, ip, r2, r0
 800943c:	f00b 0bfc 	and.w	fp, fp, #252	@ 0xfc
 8009440:	10d8      	asrs	r0, r3, #3
 8009442:	b2c9      	uxtb	r1, r1
 8009444:	00db      	lsls	r3, r3, #3
 8009446:	fa1f fc8c 	uxth.w	ip, ip
 800944a:	fb1b fb09 	smulbb	fp, fp, r9
 800944e:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 8009452:	b2db      	uxtb	r3, r3
 8009454:	fb11 f109 	smulbb	r1, r1, r9
 8009458:	fb00 b002 	mla	r0, r0, r2, fp
 800945c:	fb03 1302 	mla	r3, r3, r2, r1
 8009460:	f10c 0b01 	add.w	fp, ip, #1
 8009464:	b29b      	uxth	r3, r3
 8009466:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 800946a:	b280      	uxth	r0, r0
 800946c:	f40c 4b78 	and.w	fp, ip, #63488	@ 0xf800
 8009470:	f103 0c01 	add.w	ip, r3, #1
 8009474:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8009478:	1c43      	adds	r3, r0, #1
 800947a:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 800947e:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8009482:	0940      	lsrs	r0, r0, #5
 8009484:	ea4c 0c0b 	orr.w	ip, ip, fp
 8009488:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 800948c:	ea4c 0c00 	orr.w	ip, ip, r0
 8009490:	f824 cb02 	strh.w	ip, [r4], #2
 8009494:	e7bf      	b.n	8009416 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x102>
 8009496:	f8be 3000 	ldrh.w	r3, [lr]
 800949a:	eba3 0308 	sub.w	r3, r3, r8
 800949e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80094a2:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 80094a6:	eba3 0308 	sub.w	r3, r3, r8
 80094aa:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 80094ae:	e7ae      	b.n	800940e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfa>
 80094b0:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 80094b4:	f8d9 0000 	ldr.w	r0, [r9]
 80094b8:	42ac      	cmp	r4, r5
 80094ba:	6803      	ldr	r3, [r0, #0]
 80094bc:	d20e      	bcs.n	80094dc <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 80094be:	f8d3 8038 	ldr.w	r8, [r3, #56]	@ 0x38
 80094c2:	4632      	mov	r2, r6
 80094c4:	463b      	mov	r3, r7
 80094c6:	4621      	mov	r1, r4
 80094c8:	47c0      	blx	r8
 80094ca:	f8ba 3000 	ldrh.w	r3, [sl]
 80094ce:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80094d2:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 80094d6:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 80094da:	e7eb      	b.n	80094b4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1a0>
 80094dc:	4b02      	ldr	r3, [pc, #8]	@ (80094e8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 80094de:	6818      	ldr	r0, [r3, #0]
 80094e0:	6803      	ldr	r3, [r0, #0]
 80094e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80094e4:	4798      	blx	r3
 80094e6:	e76c      	b.n	80093c2 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xae>
 80094e8:	20009178 	.word	0x20009178
 80094ec:	20009172 	.word	0x20009172

080094f0 <_ZN8touchgfx8LCD16bppD0Ev>:
 80094f0:	b510      	push	{r4, lr}
 80094f2:	218c      	movs	r1, #140	@ 0x8c
 80094f4:	4604      	mov	r4, r0
 80094f6:	f001 fe07 	bl	800b108 <_ZdlPvj>
 80094fa:	4620      	mov	r0, r4
 80094fc:	bd10      	pop	{r4, pc}
	...

08009500 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 8009500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009504:	b091      	sub	sp, #68	@ 0x44
 8009506:	469b      	mov	fp, r3
 8009508:	f10d 0828 	add.w	r8, sp, #40	@ 0x28
 800950c:	4616      	mov	r6, r2
 800950e:	f9bd 906c 	ldrsh.w	r9, [sp, #108]	@ 0x6c
 8009512:	f9b3 2000 	ldrsh.w	r2, [r3]
 8009516:	f9bd 7070 	ldrsh.w	r7, [sp, #112]	@ 0x70
 800951a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800951e:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 8009522:	4604      	mov	r4, r0
 8009524:	460d      	mov	r5, r1
 8009526:	4640      	mov	r0, r8
 8009528:	4659      	mov	r1, fp
 800952a:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 800952e:	f8ad 902c 	strh.w	r9, [sp, #44]	@ 0x2c
 8009532:	f8ad 702e 	strh.w	r7, [sp, #46]	@ 0x2e
 8009536:	f7fc fc0b 	bl	8005d50 <_ZN8touchgfx4RectaNERKS0_>
 800953a:	4631      	mov	r1, r6
 800953c:	4640      	mov	r0, r8
 800953e:	f7fc fc07 	bl	8005d50 <_ZN8touchgfx4RectaNERKS0_>
 8009542:	4b74      	ldr	r3, [pc, #464]	@ (8009714 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x214>)
 8009544:	8818      	ldrh	r0, [r3, #0]
 8009546:	4b74      	ldr	r3, [pc, #464]	@ (8009718 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x218>)
 8009548:	8819      	ldrh	r1, [r3, #0]
 800954a:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	@ 0x28
 800954e:	2b00      	cmp	r3, #0
 8009550:	b202      	sxth	r2, r0
 8009552:	b20e      	sxth	r6, r1
 8009554:	da07      	bge.n	8009566 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x66>
 8009556:	f8bd c02c 	ldrh.w	ip, [sp, #44]	@ 0x2c
 800955a:	4463      	add	r3, ip
 800955c:	f8ad 302c 	strh.w	r3, [sp, #44]	@ 0x2c
 8009560:	2300      	movs	r3, #0
 8009562:	f8ad 3028 	strh.w	r3, [sp, #40]	@ 0x28
 8009566:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	@ 0x28
 800956a:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	@ 0x2c
 800956e:	1ad2      	subs	r2, r2, r3
 8009570:	4594      	cmp	ip, r2
 8009572:	bfc4      	itt	gt
 8009574:	1ac2      	subgt	r2, r0, r3
 8009576:	f8ad 202c 	strhgt.w	r2, [sp, #44]	@ 0x2c
 800957a:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 800957e:	2a00      	cmp	r2, #0
 8009580:	da07      	bge.n	8009592 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x92>
 8009582:	f8bd c02e 	ldrh.w	ip, [sp, #46]	@ 0x2e
 8009586:	4462      	add	r2, ip
 8009588:	f8ad 202e 	strh.w	r2, [sp, #46]	@ 0x2e
 800958c:	2200      	movs	r2, #0
 800958e:	f8ad 202a 	strh.w	r2, [sp, #42]	@ 0x2a
 8009592:	f9bd a02a 	ldrsh.w	sl, [sp, #42]	@ 0x2a
 8009596:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	@ 0x2e
 800959a:	eba6 060a 	sub.w	r6, r6, sl
 800959e:	42b2      	cmp	r2, r6
 80095a0:	bfc4      	itt	gt
 80095a2:	eba1 020a 	subgt.w	r2, r1, sl
 80095a6:	f8ad 202e 	strhgt.w	r2, [sp, #46]	@ 0x2e
 80095aa:	4a5c      	ldr	r2, [pc, #368]	@ (800971c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x21c>)
 80095ac:	7812      	ldrb	r2, [r2, #0]
 80095ae:	b9a2      	cbnz	r2, 80095da <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xda>
 80095b0:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	@ 0x2c
 80095b4:	4286      	cmp	r6, r0
 80095b6:	4640      	mov	r0, r8
 80095b8:	9303      	str	r3, [sp, #12]
 80095ba:	bf14      	ite	ne
 80095bc:	2600      	movne	r6, #0
 80095be:	2601      	moveq	r6, #1
 80095c0:	f7fc fc09 	bl	8005dd6 <_ZNK8touchgfx4Rect7isEmptyEv>
 80095c4:	9b03      	ldr	r3, [sp, #12]
 80095c6:	b160      	cbz	r0, 80095e2 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xe2>
 80095c8:	2300      	movs	r3, #0
 80095ca:	8023      	strh	r3, [r4, #0]
 80095cc:	8063      	strh	r3, [r4, #2]
 80095ce:	80a3      	strh	r3, [r4, #4]
 80095d0:	4620      	mov	r0, r4
 80095d2:	80e3      	strh	r3, [r4, #6]
 80095d4:	b011      	add	sp, #68	@ 0x44
 80095d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095da:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	@ 0x2e
 80095de:	428e      	cmp	r6, r1
 80095e0:	e7e9      	b.n	80095b6 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb6>
 80095e2:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 80095e6:	9205      	str	r2, [sp, #20]
 80095e8:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	@ 0x2e
 80095ec:	9206      	str	r2, [sp, #24]
 80095ee:	f8bb 2000 	ldrh.w	r2, [fp]
 80095f2:	900e      	str	r0, [sp, #56]	@ 0x38
 80095f4:	1a9b      	subs	r3, r3, r2
 80095f6:	b21b      	sxth	r3, r3
 80095f8:	9303      	str	r3, [sp, #12]
 80095fa:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 80095fe:	f8ad 903c 	strh.w	r9, [sp, #60]	@ 0x3c
 8009602:	ebaa 0a03 	sub.w	sl, sl, r3
 8009606:	fa0f f38a 	sxth.w	r3, sl
 800960a:	9304      	str	r3, [sp, #16]
 800960c:	9b03      	ldr	r3, [sp, #12]
 800960e:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
 8009612:	9b04      	ldr	r3, [sp, #16]
 8009614:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8009618:	9b05      	ldr	r3, [sp, #20]
 800961a:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 800961e:	a90e      	add	r1, sp, #56	@ 0x38
 8009620:	9b06      	ldr	r3, [sp, #24]
 8009622:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 8009626:	a80c      	add	r0, sp, #48	@ 0x30
 8009628:	f8ad 703e 	strh.w	r7, [sp, #62]	@ 0x3e
 800962c:	f7fe f9f2 	bl	8007a14 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8009630:	4640      	mov	r0, r8
 8009632:	f7fe f9c7 	bl	80079c4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8009636:	a80e      	add	r0, sp, #56	@ 0x38
 8009638:	f7fe f9c4 	bl	80079c4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 800963c:	4b38      	ldr	r3, [pc, #224]	@ (8009720 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>)
 800963e:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	@ 0x3c
 8009642:	881b      	ldrh	r3, [r3, #0]
 8009644:	9307      	str	r3, [sp, #28]
 8009646:	682b      	ldr	r3, [r5, #0]
 8009648:	f8df b0d8 	ldr.w	fp, [pc, #216]	@ 8009724 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
 800964c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800964e:	4628      	mov	r0, r5
 8009650:	4798      	blx	r3
 8009652:	f8bd 5032 	ldrh.w	r5, [sp, #50]	@ 0x32
 8009656:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 800965a:	4681      	mov	r9, r0
 800965c:	fb1a 3305 	smlabb	r3, sl, r5, r3
 8009660:	f8db 0000 	ldr.w	r0, [fp]
 8009664:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 8009666:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 800966a:	6803      	ldr	r3, [r0, #0]
 800966c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800966e:	4798      	blx	r3
 8009670:	4607      	mov	r7, r0
 8009672:	f8db 0000 	ldr.w	r0, [fp]
 8009676:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	@ 0x28
 800967a:	6803      	ldr	r3, [r0, #0]
 800967c:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 8009680:	9109      	str	r1, [sp, #36]	@ 0x24
 8009682:	9208      	str	r2, [sp, #32]
 8009684:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009686:	4798      	blx	r3
 8009688:	f010 0f01 	tst.w	r0, #1
 800968c:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 8009690:	d012      	beq.n	80096b8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1b8>
 8009692:	f8db 0000 	ldr.w	r0, [fp]
 8009696:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	@ 0x34
 800969a:	6803      	ldr	r3, [r0, #0]
 800969c:	9200      	str	r2, [sp, #0]
 800969e:	6f1e      	ldr	r6, [r3, #112]	@ 0x70
 80096a0:	e898 0006 	ldmia.w	r8, {r1, r2}
 80096a4:	462b      	mov	r3, r5
 80096a6:	47b0      	blx	r6
 80096a8:	9b03      	ldr	r3, [sp, #12]
 80096aa:	8023      	strh	r3, [r4, #0]
 80096ac:	9b04      	ldr	r3, [sp, #16]
 80096ae:	8063      	strh	r3, [r4, #2]
 80096b0:	9b05      	ldr	r3, [sp, #20]
 80096b2:	80a3      	strh	r3, [r4, #4]
 80096b4:	9b06      	ldr	r3, [sp, #24]
 80096b6:	e78b      	b.n	80095d0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xd0>
 80096b8:	fb09 f202 	mul.w	r2, r9, r2
 80096bc:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 80096c0:	440f      	add	r7, r1
 80096c2:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	@ 0x36
 80096c6:	b166      	cbz	r6, 80096e2 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
 80096c8:	9a07      	ldr	r2, [sp, #28]
 80096ca:	4592      	cmp	sl, r2
 80096cc:	d109      	bne.n	80096e2 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
 80096ce:	f8db 0000 	ldr.w	r0, [fp]
 80096d2:	6802      	ldr	r2, [r0, #0]
 80096d4:	fb09 f303 	mul.w	r3, r9, r3
 80096d8:	6b96      	ldr	r6, [r2, #56]	@ 0x38
 80096da:	4629      	mov	r1, r5
 80096dc:	463a      	mov	r2, r7
 80096de:	47b0      	blx	r6
 80096e0:	e7e2      	b.n	80096a8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
 80096e2:	fb0a f303 	mul.w	r3, sl, r3
 80096e6:	f8df b03c 	ldr.w	fp, [pc, #60]	@ 8009724 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
 80096ea:	eb05 0843 	add.w	r8, r5, r3, lsl #1
 80096ee:	ea4f 064a 	mov.w	r6, sl, lsl #1
 80096f2:	4545      	cmp	r5, r8
 80096f4:	d2d8      	bcs.n	80096a8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
 80096f6:	f8db 0000 	ldr.w	r0, [fp]
 80096fa:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 80096fe:	6802      	ldr	r2, [r0, #0]
 8009700:	4629      	mov	r1, r5
 8009702:	f8d2 a038 	ldr.w	sl, [r2, #56]	@ 0x38
 8009706:	005b      	lsls	r3, r3, #1
 8009708:	463a      	mov	r2, r7
 800970a:	47d0      	blx	sl
 800970c:	444f      	add	r7, r9
 800970e:	4435      	add	r5, r6
 8009710:	e7ef      	b.n	80096f2 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f2>
 8009712:	bf00      	nop
 8009714:	2000916c 	.word	0x2000916c
 8009718:	2000916e 	.word	0x2000916e
 800971c:	20009170 	.word	0x20009170
 8009720:	20009172 	.word	0x20009172
 8009724:	20009178 	.word	0x20009178

08009728 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 8009728:	b5f0      	push	{r4, r5, r6, r7, lr}
 800972a:	4606      	mov	r6, r0
 800972c:	b087      	sub	sp, #28
 800972e:	460c      	mov	r4, r1
 8009730:	4617      	mov	r7, r2
 8009732:	461d      	mov	r5, r3
 8009734:	b333      	cbz	r3, 8009784 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 8009736:	4608      	mov	r0, r1
 8009738:	f7fc fb4d 	bl	8005dd6 <_ZNK8touchgfx4Rect7isEmptyEv>
 800973c:	bb10      	cbnz	r0, 8009784 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 800973e:	6820      	ldr	r0, [r4, #0]
 8009740:	6861      	ldr	r1, [r4, #4]
 8009742:	4c1c      	ldr	r4, [pc, #112]	@ (80097b4 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x8c>)
 8009744:	ab04      	add	r3, sp, #16
 8009746:	c303      	stmia	r3!, {r0, r1}
 8009748:	a804      	add	r0, sp, #16
 800974a:	f7fe f93b 	bl	80079c4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 800974e:	6820      	ldr	r0, [r4, #0]
 8009750:	6803      	ldr	r3, [r0, #0]
 8009752:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009754:	4798      	blx	r3
 8009756:	2dff      	cmp	r5, #255	@ 0xff
 8009758:	d016      	beq.n	8009788 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x60>
 800975a:	f010 0f08 	tst.w	r0, #8
 800975e:	6820      	ldr	r0, [r4, #0]
 8009760:	d015      	beq.n	800978e <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 8009762:	2400      	movs	r4, #0
 8009764:	6801      	ldr	r1, [r0, #0]
 8009766:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800976a:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 800976e:	e9cd 5402 	strd	r5, r4, [sp, #8]
 8009772:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 8009776:	9401      	str	r4, [sp, #4]
 8009778:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 800977c:	9400      	str	r4, [sp, #0]
 800977e:	6e4c      	ldr	r4, [r1, #100]	@ 0x64
 8009780:	4639      	mov	r1, r7
 8009782:	47a0      	blx	r4
 8009784:	b007      	add	sp, #28
 8009786:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009788:	f010 0f02 	tst.w	r0, #2
 800978c:	e7e7      	b.n	800975e <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x36>
 800978e:	6803      	ldr	r3, [r0, #0]
 8009790:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009792:	4798      	blx	r3
 8009794:	4b08      	ldr	r3, [pc, #32]	@ (80097b8 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 8009796:	881a      	ldrh	r2, [r3, #0]
 8009798:	6833      	ldr	r3, [r6, #0]
 800979a:	e9cd 7500 	strd	r7, r5, [sp]
 800979e:	4601      	mov	r1, r0
 80097a0:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 80097a2:	4630      	mov	r0, r6
 80097a4:	ab04      	add	r3, sp, #16
 80097a6:	47a8      	blx	r5
 80097a8:	6820      	ldr	r0, [r4, #0]
 80097aa:	6803      	ldr	r3, [r0, #0]
 80097ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80097ae:	4798      	blx	r3
 80097b0:	e7e8      	b.n	8009784 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 80097b2:	bf00      	nop
 80097b4:	20009178 	.word	0x20009178
 80097b8:	20009172 	.word	0x20009172

080097bc <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 80097bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80097c0:	f89d 7024 	ldrb.w	r7, [sp, #36]	@ 0x24
 80097c4:	9e08      	ldr	r6, [sp, #32]
 80097c6:	4688      	mov	r8, r1
 80097c8:	4614      	mov	r4, r2
 80097ca:	461d      	mov	r5, r3
 80097cc:	2f00      	cmp	r7, #0
 80097ce:	f000 80a9 	beq.w	8009924 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 80097d2:	4618      	mov	r0, r3
 80097d4:	f7fc faff 	bl	8005dd6 <_ZNK8touchgfx4Rect7isEmptyEv>
 80097d8:	2800      	cmp	r0, #0
 80097da:	f040 80a3 	bne.w	8009924 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 80097de:	f9b5 1000 	ldrsh.w	r1, [r5]
 80097e2:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 80097e6:	f9b5 0004 	ldrsh.w	r0, [r5, #4]
 80097ea:	f9b5 5006 	ldrsh.w	r5, [r5, #6]
 80097ee:	fb04 1303 	mla	r3, r4, r3, r1
 80097f2:	eb08 0143 	add.w	r1, r8, r3, lsl #1
 80097f6:	4365      	muls	r5, r4
 80097f8:	2fff      	cmp	r7, #255	@ 0xff
 80097fa:	eba4 0200 	sub.w	r2, r4, r0
 80097fe:	eb01 0545 	add.w	r5, r1, r5, lsl #1
 8009802:	ea4f 2816 	mov.w	r8, r6, lsr #8
 8009806:	d04a      	beq.n	800989e <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe2>
 8009808:	b2bc      	uxth	r4, r7
 800980a:	f1c7 0cff 	rsb	ip, r7, #255	@ 0xff
 800980e:	f3c6 4e07 	ubfx	lr, r6, #16, #8
 8009812:	fa5f f788 	uxtb.w	r7, r8
 8009816:	b2f3      	uxtb	r3, r6
 8009818:	0040      	lsls	r0, r0, #1
 800981a:	fb0e fe04 	mul.w	lr, lr, r4
 800981e:	4367      	muls	r7, r4
 8009820:	4363      	muls	r3, r4
 8009822:	ea4f 0842 	mov.w	r8, r2, lsl #1
 8009826:	fa1f fc8c 	uxth.w	ip, ip
 800982a:	42a9      	cmp	r1, r5
 800982c:	d27a      	bcs.n	8009924 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 800982e:	eb01 0900 	add.w	r9, r1, r0
 8009832:	4549      	cmp	r1, r9
 8009834:	d231      	bcs.n	800989a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xde>
 8009836:	880a      	ldrh	r2, [r1, #0]
 8009838:	1214      	asrs	r4, r2, #8
 800983a:	10d6      	asrs	r6, r2, #3
 800983c:	f004 04f8 	and.w	r4, r4, #248	@ 0xf8
 8009840:	00d2      	lsls	r2, r2, #3
 8009842:	b2d2      	uxtb	r2, r2
 8009844:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 8009848:	fb14 f40c 	smulbb	r4, r4, ip
 800984c:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8009850:	4474      	add	r4, lr
 8009852:	fb12 f20c 	smulbb	r2, r2, ip
 8009856:	b2a4      	uxth	r4, r4
 8009858:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 800985c:	441a      	add	r2, r3
 800985e:	b292      	uxth	r2, r2
 8009860:	f104 0a01 	add.w	sl, r4, #1
 8009864:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 8009868:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 800986c:	fb16 f60c 	smulbb	r6, r6, ip
 8009870:	f102 0a01 	add.w	sl, r2, #1
 8009874:	443e      	add	r6, r7
 8009876:	eb0a 2212 	add.w	r2, sl, r2, lsr #8
 800987a:	b2b6      	uxth	r6, r6
 800987c:	f404 4478 	and.w	r4, r4, #63488	@ 0xf800
 8009880:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8009884:	4322      	orrs	r2, r4
 8009886:	1c74      	adds	r4, r6, #1
 8009888:	eb04 2616 	add.w	r6, r4, r6, lsr #8
 800988c:	0976      	lsrs	r6, r6, #5
 800988e:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 8009892:	4332      	orrs	r2, r6
 8009894:	f821 2b02 	strh.w	r2, [r1], #2
 8009898:	e7cb      	b.n	8009832 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x76>
 800989a:	4441      	add	r1, r8
 800989c:	e7c5      	b.n	800982a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x6e>
 800989e:	4f22      	ldr	r7, [pc, #136]	@ (8009928 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>)
 80098a0:	0973      	lsrs	r3, r6, #5
 80098a2:	ea08 0707 	and.w	r7, r8, r7
 80098a6:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 80098aa:	433b      	orrs	r3, r7
 80098ac:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 80098b0:	4333      	orrs	r3, r6
 80098b2:	07e7      	lsls	r7, r4, #31
 80098b4:	b29b      	uxth	r3, r3
 80098b6:	d50b      	bpl.n	80098d0 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x114>
 80098b8:	0040      	lsls	r0, r0, #1
 80098ba:	0052      	lsls	r2, r2, #1
 80098bc:	42a9      	cmp	r1, r5
 80098be:	d231      	bcs.n	8009924 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 80098c0:	180c      	adds	r4, r1, r0
 80098c2:	42a1      	cmp	r1, r4
 80098c4:	d202      	bcs.n	80098cc <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x110>
 80098c6:	f821 3b02 	strh.w	r3, [r1], #2
 80098ca:	e7fa      	b.n	80098c2 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x106>
 80098cc:	4411      	add	r1, r2
 80098ce:	e7f5      	b.n	80098bc <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x100>
 80098d0:	078e      	lsls	r6, r1, #30
 80098d2:	d008      	beq.n	80098e6 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12a>
 80098d4:	0066      	lsls	r6, r4, #1
 80098d6:	460a      	mov	r2, r1
 80098d8:	42aa      	cmp	r2, r5
 80098da:	d202      	bcs.n	80098e2 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x126>
 80098dc:	8013      	strh	r3, [r2, #0]
 80098de:	4432      	add	r2, r6
 80098e0:	e7fa      	b.n	80098d8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x11c>
 80098e2:	3102      	adds	r1, #2
 80098e4:	3801      	subs	r0, #1
 80098e6:	07c2      	lsls	r2, r0, #31
 80098e8:	d50b      	bpl.n	8009902 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x146>
 80098ea:	f100 4200 	add.w	r2, r0, #2147483648	@ 0x80000000
 80098ee:	3a01      	subs	r2, #1
 80098f0:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 80098f4:	0066      	lsls	r6, r4, #1
 80098f6:	42aa      	cmp	r2, r5
 80098f8:	d202      	bcs.n	8009900 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x144>
 80098fa:	8013      	strh	r3, [r2, #0]
 80098fc:	4432      	add	r2, r6
 80098fe:	e7fa      	b.n	80098f6 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x13a>
 8009900:	3801      	subs	r0, #1
 8009902:	b178      	cbz	r0, 8009924 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 8009904:	1040      	asrs	r0, r0, #1
 8009906:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
 800990a:	0080      	lsls	r0, r0, #2
 800990c:	0064      	lsls	r4, r4, #1
 800990e:	42a9      	cmp	r1, r5
 8009910:	d208      	bcs.n	8009924 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 8009912:	180e      	adds	r6, r1, r0
 8009914:	460a      	mov	r2, r1
 8009916:	42b2      	cmp	r2, r6
 8009918:	d202      	bcs.n	8009920 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x164>
 800991a:	f842 3b04 	str.w	r3, [r2], #4
 800991e:	e7fa      	b.n	8009916 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x15a>
 8009920:	4421      	add	r1, r4
 8009922:	e7f4      	b.n	800990e <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x152>
 8009924:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009928:	00fff800 	.word	0x00fff800

0800992c <_ZN8touchgfx8LCD16bppC1Ev>:
 800992c:	2200      	movs	r2, #0
 800992e:	4912      	ldr	r1, [pc, #72]	@ (8009978 <_ZN8touchgfx8LCD16bppC1Ev+0x4c>)
 8009930:	6001      	str	r1, [r0, #0]
 8009932:	e9c0 2201 	strd	r2, r2, [r0, #4]
 8009936:	e9c0 2203 	strd	r2, r2, [r0, #12]
 800993a:	e9c0 2205 	strd	r2, r2, [r0, #20]
 800993e:	e9c0 2207 	strd	r2, r2, [r0, #28]
 8009942:	e9c0 2209 	strd	r2, r2, [r0, #36]	@ 0x24
 8009946:	e9c0 220b 	strd	r2, r2, [r0, #44]	@ 0x2c
 800994a:	e9c0 220d 	strd	r2, r2, [r0, #52]	@ 0x34
 800994e:	e9c0 220f 	strd	r2, r2, [r0, #60]	@ 0x3c
 8009952:	e9c0 2211 	strd	r2, r2, [r0, #68]	@ 0x44
 8009956:	e9c0 2213 	strd	r2, r2, [r0, #76]	@ 0x4c
 800995a:	e9c0 2215 	strd	r2, r2, [r0, #84]	@ 0x54
 800995e:	e9c0 2217 	strd	r2, r2, [r0, #92]	@ 0x5c
 8009962:	e9c0 2219 	strd	r2, r2, [r0, #100]	@ 0x64
 8009966:	e9c0 221b 	strd	r2, r2, [r0, #108]	@ 0x6c
 800996a:	e9c0 221d 	strd	r2, r2, [r0, #116]	@ 0x74
 800996e:	e9c0 221f 	strd	r2, r2, [r0, #124]	@ 0x7c
 8009972:	e9c0 2221 	strd	r2, r2, [r0, #132]	@ 0x84
 8009976:	4770      	bx	lr
 8009978:	0800cb38 	.word	0x0800cb38

0800997c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 800997c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009980:	460d      	mov	r5, r1
 8009982:	b08d      	sub	sp, #52	@ 0x34
 8009984:	4604      	mov	r4, r0
 8009986:	6808      	ldr	r0, [r1, #0]
 8009988:	6849      	ldr	r1, [r1, #4]
 800998a:	4699      	mov	r9, r3
 800998c:	ab08      	add	r3, sp, #32
 800998e:	c303      	stmia	r3!, {r0, r1}
 8009990:	6810      	ldr	r0, [r2, #0]
 8009992:	6851      	ldr	r1, [r2, #4]
 8009994:	ab0a      	add	r3, sp, #40	@ 0x28
 8009996:	c303      	stmia	r3!, {r0, r1}
 8009998:	a808      	add	r0, sp, #32
 800999a:	f7fe f813 	bl	80079c4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 800999e:	4629      	mov	r1, r5
 80099a0:	a80a      	add	r0, sp, #40	@ 0x28
 80099a2:	f7fe f837 	bl	8007a14 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80099a6:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	@ 0x28
 80099aa:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	@ 0x2a
 80099ae:	f8bd 1024 	ldrh.w	r1, [sp, #36]	@ 0x24
 80099b2:	4d63      	ldr	r5, [pc, #396]	@ (8009b40 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 80099b4:	f9bd 802c 	ldrsh.w	r8, [sp, #44]	@ 0x2c
 80099b8:	6828      	ldr	r0, [r5, #0]
 80099ba:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	@ 0x2e
 80099be:	fb11 2103 	smlabb	r1, r1, r3, r2
 80099c2:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 80099c6:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 80099ca:	440a      	add	r2, r1
 80099cc:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 80099d0:	f8bd 2022 	ldrh.w	r2, [sp, #34]	@ 0x22
 80099d4:	4413      	add	r3, r2
 80099d6:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 80099da:	6803      	ldr	r3, [r0, #0]
 80099dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80099de:	4798      	blx	r3
 80099e0:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 80099e4:	d119      	bne.n	8009a1a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9e>
 80099e6:	f010 0f20 	tst.w	r0, #32
 80099ea:	6828      	ldr	r0, [r5, #0]
 80099ec:	d018      	beq.n	8009a20 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa4>
 80099ee:	2500      	movs	r5, #0
 80099f0:	6801      	ldr	r1, [r0, #0]
 80099f2:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 80099f6:	f8bd 2028 	ldrh.w	r2, [sp, #40]	@ 0x28
 80099fa:	e9cd 9503 	strd	r9, r5, [sp, #12]
 80099fe:	f8bd 5024 	ldrh.w	r5, [sp, #36]	@ 0x24
 8009a02:	9502      	str	r5, [sp, #8]
 8009a04:	b2b6      	uxth	r6, r6
 8009a06:	fa1f f588 	uxth.w	r5, r8
 8009a0a:	9601      	str	r6, [sp, #4]
 8009a0c:	9500      	str	r5, [sp, #0]
 8009a0e:	6d4d      	ldr	r5, [r1, #84]	@ 0x54
 8009a10:	4621      	mov	r1, r4
 8009a12:	47a8      	blx	r5
 8009a14:	b00d      	add	sp, #52	@ 0x34
 8009a16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a1a:	f010 0f40 	tst.w	r0, #64	@ 0x40
 8009a1e:	e7e4      	b.n	80099ea <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 8009a20:	6803      	ldr	r3, [r0, #0]
 8009a22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a24:	4798      	blx	r3
 8009a26:	4947      	ldr	r1, [pc, #284]	@ (8009b44 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c8>)
 8009a28:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 8009a2c:	880b      	ldrh	r3, [r1, #0]
 8009a2e:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	@ 0x28
 8009a32:	fb03 5202 	mla	r2, r3, r2, r5
 8009a36:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8009a3a:	4373      	muls	r3, r6
 8009a3c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8009a40:	9307      	str	r3, [sp, #28]
 8009a42:	ea4f 0348 	mov.w	r3, r8, lsl #1
 8009a46:	9306      	str	r3, [sp, #24]
 8009a48:	468a      	mov	sl, r1
 8009a4a:	9b07      	ldr	r3, [sp, #28]
 8009a4c:	4298      	cmp	r0, r3
 8009a4e:	d270      	bcs.n	8009b32 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b6>
 8009a50:	9b06      	ldr	r3, [sp, #24]
 8009a52:	4621      	mov	r1, r4
 8009a54:	eb00 0b03 	add.w	fp, r0, r3
 8009a58:	4558      	cmp	r0, fp
 8009a5a:	d25d      	bcs.n	8009b18 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x19c>
 8009a5c:	f851 4b04 	ldr.w	r4, [r1], #4
 8009a60:	0e23      	lsrs	r3, r4, #24
 8009a62:	d014      	beq.n	8009a8e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 8009a64:	2bff      	cmp	r3, #255	@ 0xff
 8009a66:	ea4f 2c14 	mov.w	ip, r4, lsr #8
 8009a6a:	d112      	bne.n	8009a92 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 8009a6c:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 8009a70:	d10f      	bne.n	8009a92 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 8009a72:	0963      	lsrs	r3, r4, #5
 8009a74:	f42c 6cff 	bic.w	ip, ip, #2040	@ 0x7f8
 8009a78:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8009a7c:	f02c 0c07 	bic.w	ip, ip, #7
 8009a80:	ea43 0c0c 	orr.w	ip, r3, ip
 8009a84:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 8009a88:	ea4c 0404 	orr.w	r4, ip, r4
 8009a8c:	8004      	strh	r4, [r0, #0]
 8009a8e:	3002      	adds	r0, #2
 8009a90:	e7e2      	b.n	8009a58 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xdc>
 8009a92:	fb09 f303 	mul.w	r3, r9, r3
 8009a96:	8807      	ldrh	r7, [r0, #0]
 8009a98:	1c5a      	adds	r2, r3, #1
 8009a9a:	eb02 2223 	add.w	r2, r2, r3, asr #8
 8009a9e:	1212      	asrs	r2, r2, #8
 8009aa0:	123e      	asrs	r6, r7, #8
 8009aa2:	b293      	uxth	r3, r2
 8009aa4:	f3c4 4e07 	ubfx	lr, r4, #16, #8
 8009aa8:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 8009aac:	43d2      	mvns	r2, r2
 8009aae:	b2d2      	uxtb	r2, r2
 8009ab0:	10fd      	asrs	r5, r7, #3
 8009ab2:	fb1e fe03 	smulbb	lr, lr, r3
 8009ab6:	00ff      	lsls	r7, r7, #3
 8009ab8:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 8009abc:	fb06 e602 	mla	r6, r6, r2, lr
 8009ac0:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 8009ac4:	b2ff      	uxtb	r7, r7
 8009ac6:	fa5f fc8c 	uxtb.w	ip, ip
 8009aca:	b2e4      	uxtb	r4, r4
 8009acc:	b2b6      	uxth	r6, r6
 8009ace:	fb1c fc03 	smulbb	ip, ip, r3
 8009ad2:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 8009ad6:	ea47 1757 	orr.w	r7, r7, r7, lsr #5
 8009ada:	fb14 f403 	smulbb	r4, r4, r3
 8009ade:	fb05 c502 	mla	r5, r5, r2, ip
 8009ae2:	f106 0e01 	add.w	lr, r6, #1
 8009ae6:	fb07 4702 	mla	r7, r7, r2, r4
 8009aea:	b2ad      	uxth	r5, r5
 8009aec:	b2bf      	uxth	r7, r7
 8009aee:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 8009af2:	f406 4e78 	and.w	lr, r6, #63488	@ 0xf800
 8009af6:	f105 0c01 	add.w	ip, r5, #1
 8009afa:	1c7e      	adds	r6, r7, #1
 8009afc:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 8009b00:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8009b04:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8009b08:	096d      	lsrs	r5, r5, #5
 8009b0a:	ea46 060e 	orr.w	r6, r6, lr
 8009b0e:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8009b12:	432e      	orrs	r6, r5
 8009b14:	8006      	strh	r6, [r0, #0]
 8009b16:	e7ba      	b.n	8009a8e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 8009b18:	f8ba 3000 	ldrh.w	r3, [sl]
 8009b1c:	f9bd 4024 	ldrsh.w	r4, [sp, #36]	@ 0x24
 8009b20:	eba3 0308 	sub.w	r3, r3, r8
 8009b24:	eba4 0408 	sub.w	r4, r4, r8
 8009b28:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8009b2c:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 8009b30:	e78b      	b.n	8009a4a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xce>
 8009b32:	4b03      	ldr	r3, [pc, #12]	@ (8009b40 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 8009b34:	6818      	ldr	r0, [r3, #0]
 8009b36:	6803      	ldr	r3, [r0, #0]
 8009b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b3a:	4798      	blx	r3
 8009b3c:	e76a      	b.n	8009a14 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x98>
 8009b3e:	bf00      	nop
 8009b40:	20009178 	.word	0x20009178
 8009b44:	20009172 	.word	0x20009172

08009b48 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>:
 8009b48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009b4c:	460c      	mov	r4, r1
 8009b4e:	b085      	sub	sp, #20
 8009b50:	6810      	ldr	r0, [r2, #0]
 8009b52:	6851      	ldr	r1, [r2, #4]
 8009b54:	466d      	mov	r5, sp
 8009b56:	c503      	stmia	r5!, {r0, r1}
 8009b58:	6818      	ldr	r0, [r3, #0]
 8009b5a:	6859      	ldr	r1, [r3, #4]
 8009b5c:	4616      	mov	r6, r2
 8009b5e:	c503      	stmia	r5!, {r0, r1}
 8009b60:	4668      	mov	r0, sp
 8009b62:	f7fd ff2f 	bl	80079c4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8009b66:	4631      	mov	r1, r6
 8009b68:	a802      	add	r0, sp, #8
 8009b6a:	f7fd ff53 	bl	8007a14 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8009b6e:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 8009b72:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8009b76:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 8009b7a:	4d28      	ldr	r5, [pc, #160]	@ (8009c1c <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd4>)
 8009b7c:	4e28      	ldr	r6, [pc, #160]	@ (8009c20 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd8>)
 8009b7e:	6828      	ldr	r0, [r5, #0]
 8009b80:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 8009b84:	f9bd 800e 	ldrsh.w	r8, [sp, #14]
 8009b88:	fb11 2103 	smlabb	r1, r1, r3, r2
 8009b8c:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8009b90:	f8bd 1000 	ldrh.w	r1, [sp]
 8009b94:	440a      	add	r2, r1
 8009b96:	f8ad 2008 	strh.w	r2, [sp, #8]
 8009b9a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8009b9e:	4413      	add	r3, r2
 8009ba0:	f8ad 300a 	strh.w	r3, [sp, #10]
 8009ba4:	6803      	ldr	r3, [r0, #0]
 8009ba6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ba8:	4798      	blx	r3
 8009baa:	8833      	ldrh	r3, [r6, #0]
 8009bac:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 8009bb0:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 8009bb4:	f8df e06c 	ldr.w	lr, [pc, #108]	@ 8009c24 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xdc>
 8009bb8:	fb03 1202 	mla	r2, r3, r2, r1
 8009bbc:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8009bc0:	fb08 f303 	mul.w	r3, r8, r3
 8009bc4:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8009bc8:	ea4f 0c47 	mov.w	ip, r7, lsl #1
 8009bcc:	4298      	cmp	r0, r3
 8009bce:	d21d      	bcs.n	8009c0c <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xc4>
 8009bd0:	eb00 080c 	add.w	r8, r0, ip
 8009bd4:	4540      	cmp	r0, r8
 8009bd6:	d20f      	bcs.n	8009bf8 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xb0>
 8009bd8:	f854 1b04 	ldr.w	r1, [r4], #4
 8009bdc:	ea4f 1951 	mov.w	r9, r1, lsr #5
 8009be0:	ea0e 2211 	and.w	r2, lr, r1, lsr #8
 8009be4:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 8009be8:	ea42 0209 	orr.w	r2, r2, r9
 8009bec:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 8009bf0:	430a      	orrs	r2, r1
 8009bf2:	f820 2b02 	strh.w	r2, [r0], #2
 8009bf6:	e7ed      	b.n	8009bd4 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x8c>
 8009bf8:	8832      	ldrh	r2, [r6, #0]
 8009bfa:	1bd2      	subs	r2, r2, r7
 8009bfc:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8009c00:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8009c04:	1bd2      	subs	r2, r2, r7
 8009c06:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 8009c0a:	e7df      	b.n	8009bcc <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x84>
 8009c0c:	6828      	ldr	r0, [r5, #0]
 8009c0e:	6803      	ldr	r3, [r0, #0]
 8009c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c12:	4798      	blx	r3
 8009c14:	b005      	add	sp, #20
 8009c16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009c1a:	bf00      	nop
 8009c1c:	20009178 	.word	0x20009178
 8009c20:	20009172 	.word	0x20009172
 8009c24:	fffff800 	.word	0xfffff800

08009c28 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>:
 8009c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c2c:	460e      	mov	r6, r1
 8009c2e:	b08e      	sub	sp, #56	@ 0x38
 8009c30:	4604      	mov	r4, r0
 8009c32:	6808      	ldr	r0, [r1, #0]
 8009c34:	6849      	ldr	r1, [r1, #4]
 8009c36:	f8df 81d8 	ldr.w	r8, [pc, #472]	@ 8009e10 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>
 8009c3a:	f8df 91d8 	ldr.w	r9, [pc, #472]	@ 8009e14 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1ec>
 8009c3e:	461d      	mov	r5, r3
 8009c40:	ab0a      	add	r3, sp, #40	@ 0x28
 8009c42:	c303      	stmia	r3!, {r0, r1}
 8009c44:	6810      	ldr	r0, [r2, #0]
 8009c46:	6851      	ldr	r1, [r2, #4]
 8009c48:	ab0c      	add	r3, sp, #48	@ 0x30
 8009c4a:	c303      	stmia	r3!, {r0, r1}
 8009c4c:	a80a      	add	r0, sp, #40	@ 0x28
 8009c4e:	f7fd feb9 	bl	80079c4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8009c52:	4631      	mov	r1, r6
 8009c54:	a80c      	add	r0, sp, #48	@ 0x30
 8009c56:	f7fd fedd 	bl	8007a14 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8009c5a:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 8009c5e:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 8009c62:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 8009c66:	f8d8 0000 	ldr.w	r0, [r8]
 8009c6a:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	@ 0x34
 8009c6e:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	@ 0x36
 8009c72:	fb11 2103 	smlabb	r1, r1, r3, r2
 8009c76:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8009c7a:	440c      	add	r4, r1
 8009c7c:	f8bd 1028 	ldrh.w	r1, [sp, #40]	@ 0x28
 8009c80:	440a      	add	r2, r1
 8009c82:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 8009c86:	f8bd 202a 	ldrh.w	r2, [sp, #42]	@ 0x2a
 8009c8a:	4413      	add	r3, r2
 8009c8c:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8009c90:	6803      	ldr	r3, [r0, #0]
 8009c92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009c94:	4798      	blx	r3
 8009c96:	2dff      	cmp	r5, #255	@ 0xff
 8009c98:	d124      	bne.n	8009ce4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xbc>
 8009c9a:	f010 0f01 	tst.w	r0, #1
 8009c9e:	f8d8 0000 	ldr.w	r0, [r8]
 8009ca2:	d022      	beq.n	8009cea <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xc2>
 8009ca4:	2100      	movs	r1, #0
 8009ca6:	f8d0 c000 	ldr.w	ip, [r0]
 8009caa:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 8009cae:	f8bd 2030 	ldrh.w	r2, [sp, #48]	@ 0x30
 8009cb2:	e9cd 1107 	strd	r1, r1, [sp, #28]
 8009cb6:	f04f 0e01 	mov.w	lr, #1
 8009cba:	f8cd e018 	str.w	lr, [sp, #24]
 8009cbe:	f8b9 e000 	ldrh.w	lr, [r9]
 8009cc2:	9503      	str	r5, [sp, #12]
 8009cc4:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 8009cc8:	b2b6      	uxth	r6, r6
 8009cca:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 8009cce:	9102      	str	r1, [sp, #8]
 8009cd0:	b2bf      	uxth	r7, r7
 8009cd2:	9601      	str	r6, [sp, #4]
 8009cd4:	9700      	str	r7, [sp, #0]
 8009cd6:	f8dc 5044 	ldr.w	r5, [ip, #68]	@ 0x44
 8009cda:	4621      	mov	r1, r4
 8009cdc:	47a8      	blx	r5
 8009cde:	b00e      	add	sp, #56	@ 0x38
 8009ce0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ce4:	f010 0f04 	tst.w	r0, #4
 8009ce8:	e7d9      	b.n	8009c9e <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x76>
 8009cea:	6803      	ldr	r3, [r0, #0]
 8009cec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009cee:	4798      	blx	r3
 8009cf0:	f8b9 3000 	ldrh.w	r3, [r9]
 8009cf4:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 8009cf8:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	@ 0x30
 8009cfc:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	@ 0x2c
 8009d00:	fb03 1202 	mla	r2, r3, r2, r1
 8009d04:	ebac 0c07 	sub.w	ip, ip, r7
 8009d08:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8009d0c:	435e      	muls	r6, r3
 8009d0e:	ea4f 0e47 	mov.w	lr, r7, lsl #1
 8009d12:	2dff      	cmp	r5, #255	@ 0xff
 8009d14:	eba3 0707 	sub.w	r7, r3, r7
 8009d18:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 8009d1c:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8009d20:	ea4f 0747 	mov.w	r7, r7, lsl #1
 8009d24:	d049      	beq.n	8009dba <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x192>
 8009d26:	43eb      	mvns	r3, r5
 8009d28:	fa1f f985 	uxth.w	r9, r5
 8009d2c:	b2db      	uxtb	r3, r3
 8009d2e:	42b0      	cmp	r0, r6
 8009d30:	d266      	bcs.n	8009e00 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 8009d32:	eb00 0a0e 	add.w	sl, r0, lr
 8009d36:	4550      	cmp	r0, sl
 8009d38:	4621      	mov	r1, r4
 8009d3a:	f104 0403 	add.w	r4, r4, #3
 8009d3e:	d25b      	bcs.n	8009df8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d0>
 8009d40:	8802      	ldrh	r2, [r0, #0]
 8009d42:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 8009d46:	ea4f 2822 	mov.w	r8, r2, asr #8
 8009d4a:	f008 08f8 	and.w	r8, r8, #248	@ 0xf8
 8009d4e:	fb11 f109 	smulbb	r1, r1, r9
 8009d52:	ea48 1858 	orr.w	r8, r8, r8, lsr #5
 8009d56:	10d5      	asrs	r5, r2, #3
 8009d58:	fb08 1803 	mla	r8, r8, r3, r1
 8009d5c:	f814 1c02 	ldrb.w	r1, [r4, #-2]
 8009d60:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 8009d64:	fb11 f109 	smulbb	r1, r1, r9
 8009d68:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 8009d6c:	fb05 1503 	mla	r5, r5, r3, r1
 8009d70:	00d2      	lsls	r2, r2, #3
 8009d72:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 8009d76:	b2d2      	uxtb	r2, r2
 8009d78:	fb11 f109 	smulbb	r1, r1, r9
 8009d7c:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8009d80:	fa1f f888 	uxth.w	r8, r8
 8009d84:	fb02 1203 	mla	r2, r2, r3, r1
 8009d88:	b292      	uxth	r2, r2
 8009d8a:	f108 0101 	add.w	r1, r8, #1
 8009d8e:	b2ad      	uxth	r5, r5
 8009d90:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 8009d94:	1c51      	adds	r1, r2, #1
 8009d96:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8009d9a:	1c69      	adds	r1, r5, #1
 8009d9c:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 8009da0:	f408 4878 	and.w	r8, r8, #63488	@ 0xf800
 8009da4:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8009da8:	096d      	lsrs	r5, r5, #5
 8009daa:	ea42 0208 	orr.w	r2, r2, r8
 8009dae:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8009db2:	432a      	orrs	r2, r5
 8009db4:	f820 2b02 	strh.w	r2, [r0], #2
 8009db8:	e7bd      	b.n	8009d36 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x10e>
 8009dba:	4a14      	ldr	r2, [pc, #80]	@ (8009e0c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e4>)
 8009dbc:	42b0      	cmp	r0, r6
 8009dbe:	d21f      	bcs.n	8009e00 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 8009dc0:	eb00 050e 	add.w	r5, r0, lr
 8009dc4:	42a8      	cmp	r0, r5
 8009dc6:	4621      	mov	r1, r4
 8009dc8:	f104 0403 	add.w	r4, r4, #3
 8009dcc:	d210      	bcs.n	8009df0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1c8>
 8009dce:	f814 3c02 	ldrb.w	r3, [r4, #-2]
 8009dd2:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 8009dd6:	00db      	lsls	r3, r3, #3
 8009dd8:	ea02 2101 	and.w	r1, r2, r1, lsl #8
 8009ddc:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8009de0:	430b      	orrs	r3, r1
 8009de2:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 8009de6:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
 8009dea:	f820 3b02 	strh.w	r3, [r0], #2
 8009dee:	e7e9      	b.n	8009dc4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x19c>
 8009df0:	4438      	add	r0, r7
 8009df2:	eb01 040c 	add.w	r4, r1, ip
 8009df6:	e7e1      	b.n	8009dbc <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x194>
 8009df8:	4438      	add	r0, r7
 8009dfa:	eb01 040c 	add.w	r4, r1, ip
 8009dfe:	e796      	b.n	8009d2e <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x106>
 8009e00:	4b03      	ldr	r3, [pc, #12]	@ (8009e10 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>)
 8009e02:	6818      	ldr	r0, [r3, #0]
 8009e04:	6803      	ldr	r3, [r0, #0]
 8009e06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e08:	4798      	blx	r3
 8009e0a:	e768      	b.n	8009cde <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xb6>
 8009e0c:	fffff800 	.word	0xfffff800
 8009e10:	20009178 	.word	0x20009178
 8009e14:	20009172 	.word	0x20009172

08009e18 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 8009e18:	b4f0      	push	{r4, r5, r6, r7}
 8009e1a:	4616      	mov	r6, r2
 8009e1c:	2e01      	cmp	r6, #1
 8009e1e:	461c      	mov	r4, r3
 8009e20:	460d      	mov	r5, r1
 8009e22:	9a04      	ldr	r2, [sp, #16]
 8009e24:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8009e28:	f89d 7018 	ldrb.w	r7, [sp, #24]
 8009e2c:	d012      	beq.n	8009e54 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x3c>
 8009e2e:	d303      	bcc.n	8009e38 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x20>
 8009e30:	2e02      	cmp	r6, #2
 8009e32:	d00a      	beq.n	8009e4a <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x32>
 8009e34:	bcf0      	pop	{r4, r5, r6, r7}
 8009e36:	4770      	bx	lr
 8009e38:	6805      	ldr	r5, [r0, #0]
 8009e3a:	e9cd 3704 	strd	r3, r7, [sp, #16]
 8009e3e:	68ed      	ldr	r5, [r5, #12]
 8009e40:	4613      	mov	r3, r2
 8009e42:	46ac      	mov	ip, r5
 8009e44:	4622      	mov	r2, r4
 8009e46:	bcf0      	pop	{r4, r5, r6, r7}
 8009e48:	4760      	bx	ip
 8009e4a:	4621      	mov	r1, r4
 8009e4c:	4628      	mov	r0, r5
 8009e4e:	bcf0      	pop	{r4, r5, r6, r7}
 8009e50:	f7ff bd94 	b.w	800997c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8009e54:	4621      	mov	r1, r4
 8009e56:	4628      	mov	r0, r5
 8009e58:	bcf0      	pop	{r4, r5, r6, r7}
 8009e5a:	f7ff bee5 	b.w	8009c28 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
	...

08009e60 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 8009e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e64:	4681      	mov	r9, r0
 8009e66:	b093      	sub	sp, #76	@ 0x4c
 8009e68:	6810      	ldr	r0, [r2, #0]
 8009e6a:	f89d a070 	ldrb.w	sl, [sp, #112]	@ 0x70
 8009e6e:	4f6d      	ldr	r7, [pc, #436]	@ (800a024 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c4>)
 8009e70:	4688      	mov	r8, r1
 8009e72:	6851      	ldr	r1, [r2, #4]
 8009e74:	ac0e      	add	r4, sp, #56	@ 0x38
 8009e76:	c403      	stmia	r4!, {r0, r1}
 8009e78:	6818      	ldr	r0, [r3, #0]
 8009e7a:	6859      	ldr	r1, [r3, #4]
 8009e7c:	ac10      	add	r4, sp, #64	@ 0x40
 8009e7e:	4616      	mov	r6, r2
 8009e80:	c403      	stmia	r4!, {r0, r1}
 8009e82:	a80e      	add	r0, sp, #56	@ 0x38
 8009e84:	f7fd fd9e 	bl	80079c4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8009e88:	4631      	mov	r1, r6
 8009e8a:	a810      	add	r0, sp, #64	@ 0x40
 8009e8c:	f7fd fdc2 	bl	8007a14 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8009e90:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	@ 0x40
 8009e94:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	@ 0x42
 8009e98:	f8bd 103c 	ldrh.w	r1, [sp, #60]	@ 0x3c
 8009e9c:	4e62      	ldr	r6, [pc, #392]	@ (800a028 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 8009e9e:	f9bd 4044 	ldrsh.w	r4, [sp, #68]	@ 0x44
 8009ea2:	6830      	ldr	r0, [r6, #0]
 8009ea4:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	@ 0x46
 8009ea8:	fb11 2103 	smlabb	r1, r1, r3, r2
 8009eac:	4489      	add	r9, r1
 8009eae:	f8bd 1038 	ldrh.w	r1, [sp, #56]	@ 0x38
 8009eb2:	440a      	add	r2, r1
 8009eb4:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 8009eb8:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 8009ebc:	4413      	add	r3, r2
 8009ebe:	f8ad 3042 	strh.w	r3, [sp, #66]	@ 0x42
 8009ec2:	6803      	ldr	r3, [r0, #0]
 8009ec4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009ec6:	4798      	blx	r3
 8009ec8:	f010 0f80 	tst.w	r0, #128	@ 0x80
 8009ecc:	6830      	ldr	r0, [r6, #0]
 8009ece:	d01d      	beq.n	8009f0c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
 8009ed0:	2200      	movs	r2, #0
 8009ed2:	6801      	ldr	r1, [r0, #0]
 8009ed4:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 8009ed8:	e9cd 2208 	strd	r2, r2, [sp, #32]
 8009edc:	220b      	movs	r2, #11
 8009ede:	9207      	str	r2, [sp, #28]
 8009ee0:	883a      	ldrh	r2, [r7, #0]
 8009ee2:	9206      	str	r2, [sp, #24]
 8009ee4:	2201      	movs	r2, #1
 8009ee6:	e9cd a204 	strd	sl, r2, [sp, #16]
 8009eea:	f8bd 203c 	ldrh.w	r2, [sp, #60]	@ 0x3c
 8009eee:	9203      	str	r2, [sp, #12]
 8009ef0:	b2a4      	uxth	r4, r4
 8009ef2:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 8009ef6:	9200      	str	r2, [sp, #0]
 8009ef8:	b2ad      	uxth	r5, r5
 8009efa:	9502      	str	r5, [sp, #8]
 8009efc:	9401      	str	r4, [sp, #4]
 8009efe:	6c0c      	ldr	r4, [r1, #64]	@ 0x40
 8009f00:	4642      	mov	r2, r8
 8009f02:	4649      	mov	r1, r9
 8009f04:	47a0      	blx	r4
 8009f06:	b013      	add	sp, #76	@ 0x4c
 8009f08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f0c:	6803      	ldr	r3, [r0, #0]
 8009f0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f10:	4798      	blx	r3
 8009f12:	883b      	ldrh	r3, [r7, #0]
 8009f14:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	@ 0x42
 8009f18:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	@ 0x40
 8009f1c:	fb03 1202 	mla	r2, r3, r2, r1
 8009f20:	435d      	muls	r5, r3
 8009f22:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8009f26:	eb00 0245 	add.w	r2, r0, r5, lsl #1
 8009f2a:	920c      	str	r2, [sp, #48]	@ 0x30
 8009f2c:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	@ 0x3c
 8009f30:	1b12      	subs	r2, r2, r4
 8009f32:	920d      	str	r2, [sp, #52]	@ 0x34
 8009f34:	0062      	lsls	r2, r4, #1
 8009f36:	1b1c      	subs	r4, r3, r4
 8009f38:	0063      	lsls	r3, r4, #1
 8009f3a:	920a      	str	r2, [sp, #40]	@ 0x28
 8009f3c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009f3e:	f04f 0e04 	mov.w	lr, #4
 8009f42:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009f44:	4298      	cmp	r0, r3
 8009f46:	d266      	bcs.n	800a016 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b6>
 8009f48:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009f4a:	eb00 0b03 	add.w	fp, r0, r3
 8009f4e:	4558      	cmp	r0, fp
 8009f50:	d25c      	bcs.n	800a00c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
 8009f52:	f819 3b01 	ldrb.w	r3, [r9], #1
 8009f56:	fb1e e303 	smlabb	r3, lr, r3, lr
 8009f5a:	f858 2003 	ldr.w	r2, [r8, r3]
 8009f5e:	0e11      	lsrs	r1, r2, #24
 8009f60:	d012      	beq.n	8009f88 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 8009f62:	29ff      	cmp	r1, #255	@ 0xff
 8009f64:	ea4f 2712 	mov.w	r7, r2, lsr #8
 8009f68:	d110      	bne.n	8009f8c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 8009f6a:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 8009f6e:	d10d      	bne.n	8009f8c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 8009f70:	0953      	lsrs	r3, r2, #5
 8009f72:	f427 67ff 	bic.w	r7, r7, #2040	@ 0x7f8
 8009f76:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8009f7a:	f027 0707 	bic.w	r7, r7, #7
 8009f7e:	431f      	orrs	r7, r3
 8009f80:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8009f84:	433a      	orrs	r2, r7
 8009f86:	8002      	strh	r2, [r0, #0]
 8009f88:	3002      	adds	r0, #2
 8009f8a:	e7e0      	b.n	8009f4e <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xee>
 8009f8c:	fb0a f101 	mul.w	r1, sl, r1
 8009f90:	8806      	ldrh	r6, [r0, #0]
 8009f92:	1c4b      	adds	r3, r1, #1
 8009f94:	eb03 2321 	add.w	r3, r3, r1, asr #8
 8009f98:	1235      	asrs	r5, r6, #8
 8009f9a:	10f4      	asrs	r4, r6, #3
 8009f9c:	121b      	asrs	r3, r3, #8
 8009f9e:	00f6      	lsls	r6, r6, #3
 8009fa0:	b299      	uxth	r1, r3
 8009fa2:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8009fa6:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 8009faa:	b2f6      	uxtb	r6, r6
 8009fac:	43db      	mvns	r3, r3
 8009fae:	b2d2      	uxtb	r2, r2
 8009fb0:	b2db      	uxtb	r3, r3
 8009fb2:	fb1c fc01 	smulbb	ip, ip, r1
 8009fb6:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 8009fba:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 8009fbe:	fb12 f201 	smulbb	r2, r2, r1
 8009fc2:	fb05 c503 	mla	r5, r5, r3, ip
 8009fc6:	f004 04fc 	and.w	r4, r4, #252	@ 0xfc
 8009fca:	b2ff      	uxtb	r7, r7
 8009fcc:	fb06 2203 	mla	r2, r6, r3, r2
 8009fd0:	b2ad      	uxth	r5, r5
 8009fd2:	fb17 f701 	smulbb	r7, r7, r1
 8009fd6:	b292      	uxth	r2, r2
 8009fd8:	ea44 1494 	orr.w	r4, r4, r4, lsr #6
 8009fdc:	fb04 7403 	mla	r4, r4, r3, r7
 8009fe0:	f105 0c01 	add.w	ip, r5, #1
 8009fe4:	1c57      	adds	r7, r2, #1
 8009fe6:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8009fea:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 8009fee:	b2a4      	uxth	r4, r4
 8009ff0:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8009ff4:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 8009ff8:	433d      	orrs	r5, r7
 8009ffa:	1c67      	adds	r7, r4, #1
 8009ffc:	eb07 2414 	add.w	r4, r7, r4, lsr #8
 800a000:	0964      	lsrs	r4, r4, #5
 800a002:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 800a006:	4325      	orrs	r5, r4
 800a008:	8005      	strh	r5, [r0, #0]
 800a00a:	e7bd      	b.n	8009f88 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 800a00c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a00e:	4418      	add	r0, r3
 800a010:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a012:	4499      	add	r9, r3
 800a014:	e795      	b.n	8009f42 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xe2>
 800a016:	4b04      	ldr	r3, [pc, #16]	@ (800a028 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 800a018:	6818      	ldr	r0, [r3, #0]
 800a01a:	6803      	ldr	r3, [r0, #0]
 800a01c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a01e:	4798      	blx	r3
 800a020:	e771      	b.n	8009f06 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xa6>
 800a022:	bf00      	nop
 800a024:	20009172 	.word	0x20009172
 800a028:	20009178 	.word	0x20009178

0800a02c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>:
 800a02c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a030:	b087      	sub	sp, #28
 800a032:	4680      	mov	r8, r0
 800a034:	f89d 6040 	ldrb.w	r6, [sp, #64]	@ 0x40
 800a038:	460d      	mov	r5, r1
 800a03a:	4614      	mov	r4, r2
 800a03c:	2e00      	cmp	r6, #0
 800a03e:	f000 80b9 	beq.w	800a1b4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x188>
 800a042:	6810      	ldr	r0, [r2, #0]
 800a044:	6851      	ldr	r1, [r2, #4]
 800a046:	af02      	add	r7, sp, #8
 800a048:	c703      	stmia	r7!, {r0, r1}
 800a04a:	6818      	ldr	r0, [r3, #0]
 800a04c:	6859      	ldr	r1, [r3, #4]
 800a04e:	af04      	add	r7, sp, #16
 800a050:	c703      	stmia	r7!, {r0, r1}
 800a052:	a802      	add	r0, sp, #8
 800a054:	f7fd fcb6 	bl	80079c4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 800a058:	4621      	mov	r1, r4
 800a05a:	a804      	add	r0, sp, #16
 800a05c:	f7fd fcda 	bl	8007a14 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 800a060:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 800a064:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 800a068:	f8bd 400c 	ldrh.w	r4, [sp, #12]
 800a06c:	f9bd 7016 	ldrsh.w	r7, [sp, #22]
 800a070:	fb14 2103 	smlabb	r1, r4, r3, r2
 800a074:	eb08 0401 	add.w	r4, r8, r1
 800a078:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 800a07c:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 800a080:	440a      	add	r2, r1
 800a082:	f8ad 2010 	strh.w	r2, [sp, #16]
 800a086:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 800a08a:	4413      	add	r3, r2
 800a08c:	f8ad 3012 	strh.w	r3, [sp, #18]
 800a090:	4b4a      	ldr	r3, [pc, #296]	@ (800a1bc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
 800a092:	6818      	ldr	r0, [r3, #0]
 800a094:	6803      	ldr	r3, [r0, #0]
 800a096:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a098:	4798      	blx	r3
 800a09a:	4b49      	ldr	r3, [pc, #292]	@ (800a1c0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x194>)
 800a09c:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 800a0a0:	881a      	ldrh	r2, [r3, #0]
 800a0a2:	f9bd c010 	ldrsh.w	ip, [sp, #16]
 800a0a6:	2eff      	cmp	r6, #255	@ 0xff
 800a0a8:	fb02 c101 	mla	r1, r2, r1, ip
 800a0ac:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 800a0b0:	fb02 f207 	mul.w	r2, r2, r7
 800a0b4:	f105 0104 	add.w	r1, r5, #4
 800a0b8:	ea4f 0a48 	mov.w	sl, r8, lsl #1
 800a0bc:	461d      	mov	r5, r3
 800a0be:	d05a      	beq.n	800a176 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14a>
 800a0c0:	f1c6 0eff 	rsb	lr, r6, #255	@ 0xff
 800a0c4:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 800a0c8:	b2b6      	uxth	r6, r6
 800a0ca:	fa1f fe8e 	uxth.w	lr, lr
 800a0ce:	9301      	str	r3, [sp, #4]
 800a0d0:	4282      	cmp	r2, r0
 800a0d2:	d96a      	bls.n	800a1aa <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
 800a0d4:	eb00 0b0a 	add.w	fp, r0, sl
 800a0d8:	4583      	cmp	fp, r0
 800a0da:	d940      	bls.n	800a15e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x132>
 800a0dc:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a0e0:	8805      	ldrh	r5, [r0, #0]
 800a0e2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800a0e6:	122f      	asrs	r7, r5, #8
 800a0e8:	ea4f 2c23 	mov.w	ip, r3, asr #8
 800a0ec:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 800a0f0:	fb17 f70e 	smulbb	r7, r7, lr
 800a0f4:	ea4f 09e5 	mov.w	r9, r5, asr #3
 800a0f8:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 800a0fc:	00ed      	lsls	r5, r5, #3
 800a0fe:	fb0c 7c06 	mla	ip, ip, r6, r7
 800a102:	f009 09fc 	and.w	r9, r9, #252	@ 0xfc
 800a106:	10df      	asrs	r7, r3, #3
 800a108:	b2ed      	uxtb	r5, r5
 800a10a:	00db      	lsls	r3, r3, #3
 800a10c:	fa1f fc8c 	uxth.w	ip, ip
 800a110:	fb19 f90e 	smulbb	r9, r9, lr
 800a114:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 800a118:	b2db      	uxtb	r3, r3
 800a11a:	fb15 f50e 	smulbb	r5, r5, lr
 800a11e:	fb07 9706 	mla	r7, r7, r6, r9
 800a122:	fb03 5306 	mla	r3, r3, r6, r5
 800a126:	f10c 0901 	add.w	r9, ip, #1
 800a12a:	b29b      	uxth	r3, r3
 800a12c:	eb09 2c1c 	add.w	ip, r9, ip, lsr #8
 800a130:	f40c 4978 	and.w	r9, ip, #63488	@ 0xf800
 800a134:	f103 0c01 	add.w	ip, r3, #1
 800a138:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 800a13c:	b2bf      	uxth	r7, r7
 800a13e:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 800a142:	ea4c 0c09 	orr.w	ip, ip, r9
 800a146:	f107 0901 	add.w	r9, r7, #1
 800a14a:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 800a14e:	097f      	lsrs	r7, r7, #5
 800a150:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 800a154:	ea4c 0c07 	orr.w	ip, ip, r7
 800a158:	f820 cb02 	strh.w	ip, [r0], #2
 800a15c:	e7bc      	b.n	800a0d8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xac>
 800a15e:	9b01      	ldr	r3, [sp, #4]
 800a160:	881b      	ldrh	r3, [r3, #0]
 800a162:	eba3 0308 	sub.w	r3, r3, r8
 800a166:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 800a16a:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 800a16e:	eba3 0308 	sub.w	r3, r3, r8
 800a172:	441c      	add	r4, r3
 800a174:	e7ac      	b.n	800a0d0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xa4>
 800a176:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 800a17a:	4282      	cmp	r2, r0
 800a17c:	d915      	bls.n	800a1aa <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
 800a17e:	eb00 060a 	add.w	r6, r0, sl
 800a182:	4286      	cmp	r6, r0
 800a184:	d906      	bls.n	800a194 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x168>
 800a186:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a18a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800a18e:	f820 3b02 	strh.w	r3, [r0], #2
 800a192:	e7f6      	b.n	800a182 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x156>
 800a194:	882b      	ldrh	r3, [r5, #0]
 800a196:	eba3 0308 	sub.w	r3, r3, r8
 800a19a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 800a19e:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 800a1a2:	eba3 0308 	sub.w	r3, r3, r8
 800a1a6:	441c      	add	r4, r3
 800a1a8:	e7e7      	b.n	800a17a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14e>
 800a1aa:	4b04      	ldr	r3, [pc, #16]	@ (800a1bc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
 800a1ac:	6818      	ldr	r0, [r3, #0]
 800a1ae:	6803      	ldr	r3, [r0, #0]
 800a1b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a1b2:	4798      	blx	r3
 800a1b4:	b007      	add	sp, #28
 800a1b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1ba:	bf00      	nop
 800a1bc:	20009178 	.word	0x20009178
 800a1c0:	20009172 	.word	0x20009172

0800a1c4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 800a1c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1c8:	b091      	sub	sp, #68	@ 0x44
 800a1ca:	4680      	mov	r8, r0
 800a1cc:	f89d 5068 	ldrb.w	r5, [sp, #104]	@ 0x68
 800a1d0:	460f      	mov	r7, r1
 800a1d2:	4614      	mov	r4, r2
 800a1d4:	2d00      	cmp	r5, #0
 800a1d6:	d051      	beq.n	800a27c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
 800a1d8:	6810      	ldr	r0, [r2, #0]
 800a1da:	6851      	ldr	r1, [r2, #4]
 800a1dc:	f8df 9200 	ldr.w	r9, [pc, #512]	@ 800a3e0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>
 800a1e0:	ae0c      	add	r6, sp, #48	@ 0x30
 800a1e2:	c603      	stmia	r6!, {r0, r1}
 800a1e4:	6818      	ldr	r0, [r3, #0]
 800a1e6:	6859      	ldr	r1, [r3, #4]
 800a1e8:	ae0e      	add	r6, sp, #56	@ 0x38
 800a1ea:	c603      	stmia	r6!, {r0, r1}
 800a1ec:	a80c      	add	r0, sp, #48	@ 0x30
 800a1ee:	f7fd fbe9 	bl	80079c4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 800a1f2:	4621      	mov	r1, r4
 800a1f4:	a80e      	add	r0, sp, #56	@ 0x38
 800a1f6:	f7fd fc0d 	bl	8007a14 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 800a1fa:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	@ 0x38
 800a1fe:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 800a202:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 800a206:	f8d9 0000 	ldr.w	r0, [r9]
 800a20a:	f9bd 603c 	ldrsh.w	r6, [sp, #60]	@ 0x3c
 800a20e:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	@ 0x3e
 800a212:	fb11 2103 	smlabb	r1, r1, r3, r2
 800a216:	eb08 0401 	add.w	r4, r8, r1
 800a21a:	f8bd 1030 	ldrh.w	r1, [sp, #48]	@ 0x30
 800a21e:	f8df 81c4 	ldr.w	r8, [pc, #452]	@ 800a3e4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x220>
 800a222:	440a      	add	r2, r1
 800a224:	f8ad 2038 	strh.w	r2, [sp, #56]	@ 0x38
 800a228:	f8bd 2032 	ldrh.w	r2, [sp, #50]	@ 0x32
 800a22c:	4413      	add	r3, r2
 800a22e:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
 800a232:	6803      	ldr	r3, [r0, #0]
 800a234:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a236:	4798      	blx	r3
 800a238:	f010 0f80 	tst.w	r0, #128	@ 0x80
 800a23c:	f8d9 0000 	ldr.w	r0, [r9]
 800a240:	d01f      	beq.n	800a282 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xbe>
 800a242:	2200      	movs	r2, #0
 800a244:	6801      	ldr	r1, [r0, #0]
 800a246:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 800a24a:	e9cd 2208 	strd	r2, r2, [sp, #32]
 800a24e:	220b      	movs	r2, #11
 800a250:	9207      	str	r2, [sp, #28]
 800a252:	f8b8 2000 	ldrh.w	r2, [r8]
 800a256:	9206      	str	r2, [sp, #24]
 800a258:	2201      	movs	r2, #1
 800a25a:	e9cd 5204 	strd	r5, r2, [sp, #16]
 800a25e:	f8bd 2034 	ldrh.w	r2, [sp, #52]	@ 0x34
 800a262:	9203      	str	r2, [sp, #12]
 800a264:	fa1f f28a 	uxth.w	r2, sl
 800a268:	9202      	str	r2, [sp, #8]
 800a26a:	b2b6      	uxth	r6, r6
 800a26c:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 800a270:	9200      	str	r2, [sp, #0]
 800a272:	9601      	str	r6, [sp, #4]
 800a274:	6c0d      	ldr	r5, [r1, #64]	@ 0x40
 800a276:	463a      	mov	r2, r7
 800a278:	4621      	mov	r1, r4
 800a27a:	47a8      	blx	r5
 800a27c:	b011      	add	sp, #68	@ 0x44
 800a27e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a282:	6803      	ldr	r3, [r0, #0]
 800a284:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a286:	4798      	blx	r3
 800a288:	f8b8 2000 	ldrh.w	r2, [r8]
 800a28c:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 800a290:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	@ 0x38
 800a294:	2dff      	cmp	r5, #255	@ 0xff
 800a296:	fb02 1303 	mla	r3, r2, r3, r1
 800a29a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 800a29e:	ea4f 0946 	mov.w	r9, r6, lsl #1
 800a2a2:	fb0a fa02 	mul.w	sl, sl, r2
 800a2a6:	d062      	beq.n	800a36e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1aa>
 800a2a8:	ea6f 0c05 	mvn.w	ip, r5
 800a2ac:	eb00 034a 	add.w	r3, r0, sl, lsl #1
 800a2b0:	930a      	str	r3, [sp, #40]	@ 0x28
 800a2b2:	b2ad      	uxth	r5, r5
 800a2b4:	fa5f fc8c 	uxtb.w	ip, ip
 800a2b8:	f8cd 802c 	str.w	r8, [sp, #44]	@ 0x2c
 800a2bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a2be:	4298      	cmp	r0, r3
 800a2c0:	f080 8085 	bcs.w	800a3ce <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 800a2c4:	eb00 0b09 	add.w	fp, r0, r9
 800a2c8:	4558      	cmp	r0, fp
 800a2ca:	d246      	bcs.n	800a35a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x196>
 800a2cc:	f814 eb01 	ldrb.w	lr, [r4], #1
 800a2d0:	2303      	movs	r3, #3
 800a2d2:	2204      	movs	r2, #4
 800a2d4:	fb13 2e0e 	smlabb	lr, r3, lr, r2
 800a2d8:	eb07 0a0e 	add.w	sl, r7, lr
 800a2dc:	8803      	ldrh	r3, [r0, #0]
 800a2de:	f89a 8002 	ldrb.w	r8, [sl, #2]
 800a2e2:	f817 e00e 	ldrb.w	lr, [r7, lr]
 800a2e6:	1219      	asrs	r1, r3, #8
 800a2e8:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 800a2ec:	fb18 f805 	smulbb	r8, r8, r5
 800a2f0:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 800a2f4:	10da      	asrs	r2, r3, #3
 800a2f6:	fb01 810c 	mla	r1, r1, ip, r8
 800a2fa:	00db      	lsls	r3, r3, #3
 800a2fc:	f89a 8001 	ldrb.w	r8, [sl, #1]
 800a300:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 800a304:	b2db      	uxtb	r3, r3
 800a306:	fb18 f805 	smulbb	r8, r8, r5
 800a30a:	fb1e fe05 	smulbb	lr, lr, r5
 800a30e:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 800a312:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 800a316:	b289      	uxth	r1, r1
 800a318:	fb02 820c 	mla	r2, r2, ip, r8
 800a31c:	fb03 e30c 	mla	r3, r3, ip, lr
 800a320:	b292      	uxth	r2, r2
 800a322:	b29b      	uxth	r3, r3
 800a324:	f101 0801 	add.w	r8, r1, #1
 800a328:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 800a32c:	f103 0e01 	add.w	lr, r3, #1
 800a330:	f102 0801 	add.w	r8, r2, #1
 800a334:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 800a338:	eb08 2812 	add.w	r8, r8, r2, lsr #8
 800a33c:	f401 4178 	and.w	r1, r1, #63488	@ 0xf800
 800a340:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 800a344:	ea4f 1858 	mov.w	r8, r8, lsr #5
 800a348:	ea4e 0101 	orr.w	r1, lr, r1
 800a34c:	f408 68fc 	and.w	r8, r8, #2016	@ 0x7e0
 800a350:	ea41 0108 	orr.w	r1, r1, r8
 800a354:	f820 1b02 	strh.w	r1, [r0], #2
 800a358:	e7b6      	b.n	800a2c8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x104>
 800a35a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a35c:	881b      	ldrh	r3, [r3, #0]
 800a35e:	1b9b      	subs	r3, r3, r6
 800a360:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 800a364:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 800a368:	1b9b      	subs	r3, r3, r6
 800a36a:	441c      	add	r4, r3
 800a36c:	e7a6      	b.n	800a2bc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xf8>
 800a36e:	491b      	ldr	r1, [pc, #108]	@ (800a3dc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x218>)
 800a370:	eb00 0a4a 	add.w	sl, r0, sl, lsl #1
 800a374:	2203      	movs	r2, #3
 800a376:	2504      	movs	r5, #4
 800a378:	4550      	cmp	r0, sl
 800a37a:	d228      	bcs.n	800a3ce <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 800a37c:	eb00 0c09 	add.w	ip, r0, r9
 800a380:	4560      	cmp	r0, ip
 800a382:	4623      	mov	r3, r4
 800a384:	d219      	bcs.n	800a3ba <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1f6>
 800a386:	f893 e000 	ldrb.w	lr, [r3]
 800a38a:	fb12 5e0e 	smlabb	lr, r2, lr, r5
 800a38e:	eb07 0b0e 	add.w	fp, r7, lr
 800a392:	f817 e00e 	ldrb.w	lr, [r7, lr]
 800a396:	f89b 3002 	ldrb.w	r3, [fp, #2]
 800a39a:	f89b b001 	ldrb.w	fp, [fp, #1]
 800a39e:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 800a3a2:	ea01 2303 	and.w	r3, r1, r3, lsl #8
 800a3a6:	f40b 6bfc 	and.w	fp, fp, #2016	@ 0x7e0
 800a3aa:	ea43 030b 	orr.w	r3, r3, fp
 800a3ae:	ea43 03de 	orr.w	r3, r3, lr, lsr #3
 800a3b2:	3401      	adds	r4, #1
 800a3b4:	f820 3b02 	strh.w	r3, [r0], #2
 800a3b8:	e7e2      	b.n	800a380 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1bc>
 800a3ba:	f8b8 3000 	ldrh.w	r3, [r8]
 800a3be:	1b9b      	subs	r3, r3, r6
 800a3c0:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 800a3c4:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 800a3c8:	1b9b      	subs	r3, r3, r6
 800a3ca:	441c      	add	r4, r3
 800a3cc:	e7d4      	b.n	800a378 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b4>
 800a3ce:	4b04      	ldr	r3, [pc, #16]	@ (800a3e0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>)
 800a3d0:	6818      	ldr	r0, [r3, #0]
 800a3d2:	6803      	ldr	r3, [r0, #0]
 800a3d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a3d6:	4798      	blx	r3
 800a3d8:	e750      	b.n	800a27c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
 800a3da:	bf00      	nop
 800a3dc:	fffff800 	.word	0xfffff800
 800a3e0:	20009178 	.word	0x20009178
 800a3e4:	20009172 	.word	0x20009172

0800a3e8 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 800a3e8:	b4f0      	push	{r4, r5, r6, r7}
 800a3ea:	460c      	mov	r4, r1
 800a3ec:	4611      	mov	r1, r2
 800a3ee:	f89d 5014 	ldrb.w	r5, [sp, #20]
 800a3f2:	780f      	ldrb	r7, [r1, #0]
 800a3f4:	784e      	ldrb	r6, [r1, #1]
 800a3f6:	2f01      	cmp	r7, #1
 800a3f8:	461a      	mov	r2, r3
 800a3fa:	9b04      	ldr	r3, [sp, #16]
 800a3fc:	d038      	beq.n	800a470 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x88>
 800a3fe:	d31f      	bcc.n	800a440 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x58>
 800a400:	2f02      	cmp	r7, #2
 800a402:	d14d      	bne.n	800a4a0 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 800a404:	2e03      	cmp	r6, #3
 800a406:	d84b      	bhi.n	800a4a0 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 800a408:	e8df f006 	tbb	[pc, r6]
 800a40c:	17140702 	.word	0x17140702
 800a410:	9504      	str	r5, [sp, #16]
 800a412:	4620      	mov	r0, r4
 800a414:	bcf0      	pop	{r4, r5, r6, r7}
 800a416:	f7ff be09 	b.w	800a02c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>
 800a41a:	6fc0      	ldr	r0, [r0, #124]	@ 0x7c
 800a41c:	2800      	cmp	r0, #0
 800a41e:	d03f      	beq.n	800a4a0 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 800a420:	6806      	ldr	r6, [r0, #0]
 800a422:	e9cd 3504 	strd	r3, r5, [sp, #16]
 800a426:	68b5      	ldr	r5, [r6, #8]
 800a428:	4613      	mov	r3, r2
 800a42a:	46ac      	mov	ip, r5
 800a42c:	460a      	mov	r2, r1
 800a42e:	4621      	mov	r1, r4
 800a430:	bcf0      	pop	{r4, r5, r6, r7}
 800a432:	4760      	bx	ip
 800a434:	f8d0 0080 	ldr.w	r0, [r0, #128]	@ 0x80
 800a438:	e7f0      	b.n	800a41c <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 800a43a:	f8d0 0084 	ldr.w	r0, [r0, #132]	@ 0x84
 800a43e:	e7ed      	b.n	800a41c <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 800a440:	2e03      	cmp	r6, #3
 800a442:	d82d      	bhi.n	800a4a0 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 800a444:	e8df f006 	tbb	[pc, r6]
 800a448:	110e0702 	.word	0x110e0702
 800a44c:	9504      	str	r5, [sp, #16]
 800a44e:	4620      	mov	r0, r4
 800a450:	bcf0      	pop	{r4, r5, r6, r7}
 800a452:	f7ff bd05 	b.w	8009e60 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 800a456:	6fc0      	ldr	r0, [r0, #124]	@ 0x7c
 800a458:	b310      	cbz	r0, 800a4a0 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 800a45a:	6806      	ldr	r6, [r0, #0]
 800a45c:	e9cd 3504 	strd	r3, r5, [sp, #16]
 800a460:	68f5      	ldr	r5, [r6, #12]
 800a462:	e7e1      	b.n	800a428 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x40>
 800a464:	f8d0 0080 	ldr.w	r0, [r0, #128]	@ 0x80
 800a468:	e7f6      	b.n	800a458 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x70>
 800a46a:	f8d0 0084 	ldr.w	r0, [r0, #132]	@ 0x84
 800a46e:	e7f3      	b.n	800a458 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x70>
 800a470:	2e03      	cmp	r6, #3
 800a472:	d815      	bhi.n	800a4a0 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 800a474:	e8df f006 	tbb	[pc, r6]
 800a478:	110e0702 	.word	0x110e0702
 800a47c:	9504      	str	r5, [sp, #16]
 800a47e:	4620      	mov	r0, r4
 800a480:	bcf0      	pop	{r4, r5, r6, r7}
 800a482:	f7ff be9f 	b.w	800a1c4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 800a486:	6fc0      	ldr	r0, [r0, #124]	@ 0x7c
 800a488:	b150      	cbz	r0, 800a4a0 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 800a48a:	6806      	ldr	r6, [r0, #0]
 800a48c:	e9cd 3504 	strd	r3, r5, [sp, #16]
 800a490:	6935      	ldr	r5, [r6, #16]
 800a492:	e7c9      	b.n	800a428 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x40>
 800a494:	f8d0 0080 	ldr.w	r0, [r0, #128]	@ 0x80
 800a498:	e7f6      	b.n	800a488 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xa0>
 800a49a:	f8d0 0084 	ldr.w	r0, [r0, #132]	@ 0x84
 800a49e:	e7f3      	b.n	800a488 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xa0>
 800a4a0:	bcf0      	pop	{r4, r5, r6, r7}
 800a4a2:	4770      	bx	lr

0800a4a4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>:
 800a4a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4a8:	4604      	mov	r4, r0
 800a4aa:	b087      	sub	sp, #28
 800a4ac:	6810      	ldr	r0, [r2, #0]
 800a4ae:	f89d a040 	ldrb.w	sl, [sp, #64]	@ 0x40
 800a4b2:	f8df 9238 	ldr.w	r9, [pc, #568]	@ 800a6ec <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x248>
 800a4b6:	460e      	mov	r6, r1
 800a4b8:	6851      	ldr	r1, [r2, #4]
 800a4ba:	ad02      	add	r5, sp, #8
 800a4bc:	c503      	stmia	r5!, {r0, r1}
 800a4be:	6818      	ldr	r0, [r3, #0]
 800a4c0:	6859      	ldr	r1, [r3, #4]
 800a4c2:	ad04      	add	r5, sp, #16
 800a4c4:	4617      	mov	r7, r2
 800a4c6:	c503      	stmia	r5!, {r0, r1}
 800a4c8:	a802      	add	r0, sp, #8
 800a4ca:	f7fd fa7b 	bl	80079c4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 800a4ce:	4639      	mov	r1, r7
 800a4d0:	a804      	add	r0, sp, #16
 800a4d2:	f7fd fa9f 	bl	8007a14 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 800a4d6:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 800a4da:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 800a4de:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800a4e2:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 800a4e6:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
 800a4ea:	fb11 2103 	smlabb	r1, r1, r3, r2
 800a4ee:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 800a4f2:	440e      	add	r6, r1
 800a4f4:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 800a4f8:	440a      	add	r2, r1
 800a4fa:	f8ad 2010 	strh.w	r2, [sp, #16]
 800a4fe:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 800a502:	4413      	add	r3, r2
 800a504:	f8ad 3012 	strh.w	r3, [sp, #18]
 800a508:	4b77      	ldr	r3, [pc, #476]	@ (800a6e8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 800a50a:	6818      	ldr	r0, [r3, #0]
 800a50c:	6803      	ldr	r3, [r0, #0]
 800a50e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a510:	4798      	blx	r3
 800a512:	f8b9 b000 	ldrh.w	fp, [r9]
 800a516:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 800a51a:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 800a51e:	fb0b 2303 	mla	r3, fp, r3, r2
 800a522:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 800a526:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 800a52a:	ea4f 0348 	mov.w	r3, r8, lsl #1
 800a52e:	fb05 f50b 	mul.w	r5, r5, fp
 800a532:	9300      	str	r3, [sp, #0]
 800a534:	d069      	beq.n	800a60a <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x166>
 800a536:	eb00 0b45 	add.w	fp, r0, r5, lsl #1
 800a53a:	4558      	cmp	r0, fp
 800a53c:	f080 80cc 	bcs.w	800a6d8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 800a540:	9b00      	ldr	r3, [sp, #0]
 800a542:	18c3      	adds	r3, r0, r3
 800a544:	9301      	str	r3, [sp, #4]
 800a546:	4631      	mov	r1, r6
 800a548:	9b01      	ldr	r3, [sp, #4]
 800a54a:	4298      	cmp	r0, r3
 800a54c:	d24f      	bcs.n	800a5ee <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x14a>
 800a54e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a552:	2a00      	cmp	r2, #0
 800a554:	d048      	beq.n	800a5e8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 800a556:	fb0a f202 	mul.w	r2, sl, r2
 800a55a:	1c53      	adds	r3, r2, #1
 800a55c:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 800a560:	121b      	asrs	r3, r3, #8
 800a562:	d041      	beq.n	800a5e8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 800a564:	8802      	ldrh	r2, [r0, #0]
 800a566:	f8b4 c000 	ldrh.w	ip, [r4]
 800a56a:	b29e      	uxth	r6, r3
 800a56c:	1215      	asrs	r5, r2, #8
 800a56e:	43db      	mvns	r3, r3
 800a570:	b2db      	uxtb	r3, r3
 800a572:	ea4f 272c 	mov.w	r7, ip, asr #8
 800a576:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 800a57a:	fb15 f503 	smulbb	r5, r5, r3
 800a57e:	ea4f 0ee2 	mov.w	lr, r2, asr #3
 800a582:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 800a586:	00d2      	lsls	r2, r2, #3
 800a588:	fb07 5706 	mla	r7, r7, r6, r5
 800a58c:	f00e 0efc 	and.w	lr, lr, #252	@ 0xfc
 800a590:	ea4f 05ec 	mov.w	r5, ip, asr #3
 800a594:	b2d2      	uxtb	r2, r2
 800a596:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 800a59a:	b2bf      	uxth	r7, r7
 800a59c:	fb1e fe03 	smulbb	lr, lr, r3
 800a5a0:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 800a5a4:	fa5f fc8c 	uxtb.w	ip, ip
 800a5a8:	fb12 f203 	smulbb	r2, r2, r3
 800a5ac:	fb05 e506 	mla	r5, r5, r6, lr
 800a5b0:	fb0c 2c06 	mla	ip, ip, r6, r2
 800a5b4:	f107 0e01 	add.w	lr, r7, #1
 800a5b8:	fa1f fc8c 	uxth.w	ip, ip
 800a5bc:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 800a5c0:	f407 4e78 	and.w	lr, r7, #63488	@ 0xf800
 800a5c4:	f10c 0701 	add.w	r7, ip, #1
 800a5c8:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 800a5cc:	b2ad      	uxth	r5, r5
 800a5ce:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 800a5d2:	ea47 070e 	orr.w	r7, r7, lr
 800a5d6:	f105 0e01 	add.w	lr, r5, #1
 800a5da:	eb0e 2515 	add.w	r5, lr, r5, lsr #8
 800a5de:	096d      	lsrs	r5, r5, #5
 800a5e0:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 800a5e4:	432f      	orrs	r7, r5
 800a5e6:	8007      	strh	r7, [r0, #0]
 800a5e8:	3002      	adds	r0, #2
 800a5ea:	3402      	adds	r4, #2
 800a5ec:	e7ac      	b.n	800a548 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xa4>
 800a5ee:	f8b9 3000 	ldrh.w	r3, [r9]
 800a5f2:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 800a5f6:	eba3 0308 	sub.w	r3, r3, r8
 800a5fa:	eba6 0608 	sub.w	r6, r6, r8
 800a5fe:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 800a602:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 800a606:	440e      	add	r6, r1
 800a608:	e797      	b.n	800a53a <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x96>
 800a60a:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 800a60e:	42a8      	cmp	r0, r5
 800a610:	d262      	bcs.n	800a6d8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 800a612:	9b00      	ldr	r3, [sp, #0]
 800a614:	4631      	mov	r1, r6
 800a616:	eb00 0b03 	add.w	fp, r0, r3
 800a61a:	4558      	cmp	r0, fp
 800a61c:	d24e      	bcs.n	800a6bc <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x218>
 800a61e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a622:	b12b      	cbz	r3, 800a630 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 800a624:	2bff      	cmp	r3, #255	@ 0xff
 800a626:	f8b4 e000 	ldrh.w	lr, [r4]
 800a62a:	d104      	bne.n	800a636 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x192>
 800a62c:	f8a0 e000 	strh.w	lr, [r0]
 800a630:	3002      	adds	r0, #2
 800a632:	3402      	adds	r4, #2
 800a634:	e7f1      	b.n	800a61a <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x176>
 800a636:	8802      	ldrh	r2, [r0, #0]
 800a638:	b29f      	uxth	r7, r3
 800a63a:	1216      	asrs	r6, r2, #8
 800a63c:	43db      	mvns	r3, r3
 800a63e:	b2db      	uxtb	r3, r3
 800a640:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 800a644:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 800a648:	fb16 f603 	smulbb	r6, r6, r3
 800a64c:	ea4f 0ae2 	mov.w	sl, r2, asr #3
 800a650:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 800a654:	00d2      	lsls	r2, r2, #3
 800a656:	fb0c 6c07 	mla	ip, ip, r7, r6
 800a65a:	b2d2      	uxtb	r2, r2
 800a65c:	ea4f 06ee 	mov.w	r6, lr, asr #3
 800a660:	f00a 0afc 	and.w	sl, sl, #252	@ 0xfc
 800a664:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 800a668:	fb1a fa03 	smulbb	sl, sl, r3
 800a66c:	fa1f fc8c 	uxth.w	ip, ip
 800a670:	fb12 f303 	smulbb	r3, r2, r3
 800a674:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 800a678:	fa5f fe8e 	uxtb.w	lr, lr
 800a67c:	fb06 a607 	mla	r6, r6, r7, sl
 800a680:	f10c 0201 	add.w	r2, ip, #1
 800a684:	fb0e 3307 	mla	r3, lr, r7, r3
 800a688:	b2b6      	uxth	r6, r6
 800a68a:	b29b      	uxth	r3, r3
 800a68c:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 800a690:	f40c 4278 	and.w	r2, ip, #63488	@ 0xf800
 800a694:	f106 0a01 	add.w	sl, r6, #1
 800a698:	f103 0c01 	add.w	ip, r3, #1
 800a69c:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 800a6a0:	eb0a 2616 	add.w	r6, sl, r6, lsr #8
 800a6a4:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 800a6a8:	0976      	lsrs	r6, r6, #5
 800a6aa:	ea4c 0c02 	orr.w	ip, ip, r2
 800a6ae:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 800a6b2:	ea4c 0c06 	orr.w	ip, ip, r6
 800a6b6:	f8a0 c000 	strh.w	ip, [r0]
 800a6ba:	e7b9      	b.n	800a630 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 800a6bc:	f8b9 3000 	ldrh.w	r3, [r9]
 800a6c0:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 800a6c4:	eba3 0308 	sub.w	r3, r3, r8
 800a6c8:	eba6 0608 	sub.w	r6, r6, r8
 800a6cc:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 800a6d0:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 800a6d4:	440e      	add	r6, r1
 800a6d6:	e79a      	b.n	800a60e <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x16a>
 800a6d8:	4b03      	ldr	r3, [pc, #12]	@ (800a6e8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 800a6da:	6818      	ldr	r0, [r3, #0]
 800a6dc:	6803      	ldr	r3, [r0, #0]
 800a6de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a6e0:	4798      	blx	r3
 800a6e2:	b007      	add	sp, #28
 800a6e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6e8:	20009178 	.word	0x20009178
 800a6ec:	20009172 	.word	0x20009172

0800a6f0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 800a6f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6f4:	b089      	sub	sp, #36	@ 0x24
 800a6f6:	4607      	mov	r7, r0
 800a6f8:	f89d 604c 	ldrb.w	r6, [sp, #76]	@ 0x4c
 800a6fc:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 800a6fe:	4688      	mov	r8, r1
 800a700:	4692      	mov	sl, r2
 800a702:	4699      	mov	r9, r3
 800a704:	2e00      	cmp	r6, #0
 800a706:	d048      	beq.n	800a79a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 800a708:	4608      	mov	r0, r1
 800a70a:	f7fe facb 	bl	8008ca4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800a70e:	4605      	mov	r5, r0
 800a710:	4640      	mov	r0, r8
 800a712:	f7fe fafb 	bl	8008d0c <_ZNK8touchgfx6Bitmap9getHeightEv>
 800a716:	f8ad 000e 	strh.w	r0, [sp, #14]
 800a71a:	4640      	mov	r0, r8
 800a71c:	f8ad a008 	strh.w	sl, [sp, #8]
 800a720:	f8ad 500c 	strh.w	r5, [sp, #12]
 800a724:	f8ad 900a 	strh.w	r9, [sp, #10]
 800a728:	f7fe fbae 	bl	8008e88 <_ZNK8touchgfx6Bitmap7getDataEv>
 800a72c:	4605      	mov	r5, r0
 800a72e:	4640      	mov	r0, r8
 800a730:	f7fe fbda 	bl	8008ee8 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 800a734:	4682      	mov	sl, r0
 800a736:	4640      	mov	r0, r8
 800a738:	f7fe fc2a 	bl	8008f90 <_ZNK8touchgfx6Bitmap9getFormatEv>
 800a73c:	2810      	cmp	r0, #16
 800a73e:	d82c      	bhi.n	800a79a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 800a740:	e8df f010 	tbh	[pc, r0, lsl #1]
 800a744:	00ba00ca 	.word	0x00ba00ca
 800a748:	002b0011 	.word	0x002b0011
 800a74c:	002b002b 	.word	0x002b002b
 800a750:	002b002b 	.word	0x002b002b
 800a754:	002b002b 	.word	0x002b002b
 800a758:	00c1002b 	.word	0x00c1002b
 800a75c:	002b002b 	.word	0x002b002b
 800a760:	002b0180 	.word	0x002b0180
 800a764:	0173      	.short	0x0173
 800a766:	4bbc      	ldr	r3, [pc, #752]	@ (800aa58 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x368>)
 800a768:	6818      	ldr	r0, [r3, #0]
 800a76a:	6803      	ldr	r3, [r0, #0]
 800a76c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a76e:	4798      	blx	r3
 800a770:	2eff      	cmp	r6, #255	@ 0xff
 800a772:	d101      	bne.n	800a778 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x88>
 800a774:	0683      	lsls	r3, r0, #26
 800a776:	d506      	bpl.n	800a786 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x96>
 800a778:	4633      	mov	r3, r6
 800a77a:	4622      	mov	r2, r4
 800a77c:	a902      	add	r1, sp, #8
 800a77e:	4628      	mov	r0, r5
 800a780:	f7ff f8fc 	bl	800997c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 800a784:	e009      	b.n	800a79a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 800a786:	4640      	mov	r0, r8
 800a788:	f7fe fb46 	bl	8008e18 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 800a78c:	b940      	cbnz	r0, 800a7a0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb0>
 800a78e:	4623      	mov	r3, r4
 800a790:	aa02      	add	r2, sp, #8
 800a792:	4629      	mov	r1, r5
 800a794:	4638      	mov	r0, r7
 800a796:	f7ff f9d7 	bl	8009b48 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 800a79a:	b009      	add	sp, #36	@ 0x24
 800a79c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7a0:	f10d 0918 	add.w	r9, sp, #24
 800a7a4:	4641      	mov	r1, r8
 800a7a6:	4648      	mov	r0, r9
 800a7a8:	f7fe fae4 	bl	8008d74 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 800a7ac:	e899 0003 	ldmia.w	r9, {r0, r1}
 800a7b0:	f10d 0810 	add.w	r8, sp, #16
 800a7b4:	e888 0003 	stmia.w	r8, {r0, r1}
 800a7b8:	4640      	mov	r0, r8
 800a7ba:	4621      	mov	r1, r4
 800a7bc:	f7fb fac8 	bl	8005d50 <_ZN8touchgfx4RectaNERKS0_>
 800a7c0:	4640      	mov	r0, r8
 800a7c2:	f7fb fb08 	bl	8005dd6 <_ZNK8touchgfx4Rect7isEmptyEv>
 800a7c6:	2800      	cmp	r0, #0
 800a7c8:	d1d6      	bne.n	800a778 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x88>
 800a7ca:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 800a7ce:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 800a7d2:	4293      	cmp	r3, r2
 800a7d4:	dd12      	ble.n	800a7fc <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x10c>
 800a7d6:	1a9b      	subs	r3, r3, r2
 800a7d8:	f9b4 0000 	ldrsh.w	r0, [r4]
 800a7dc:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 800a7e0:	f8ad 0018 	strh.w	r0, [sp, #24]
 800a7e4:	f8ad 201a 	strh.w	r2, [sp, #26]
 800a7e8:	f8ad 101c 	strh.w	r1, [sp, #28]
 800a7ec:	f8ad 301e 	strh.w	r3, [sp, #30]
 800a7f0:	464a      	mov	r2, r9
 800a7f2:	4633      	mov	r3, r6
 800a7f4:	a902      	add	r1, sp, #8
 800a7f6:	4628      	mov	r0, r5
 800a7f8:	f7ff f8c0 	bl	800997c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 800a7fc:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 800a800:	f9b4 2000 	ldrsh.w	r2, [r4]
 800a804:	4293      	cmp	r3, r2
 800a806:	dd12      	ble.n	800a82e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x13e>
 800a808:	1a9b      	subs	r3, r3, r2
 800a80a:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 800a80e:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 800a812:	f8ad 2018 	strh.w	r2, [sp, #24]
 800a816:	f8ad 001a 	strh.w	r0, [sp, #26]
 800a81a:	f8ad 301c 	strh.w	r3, [sp, #28]
 800a81e:	f8ad 101e 	strh.w	r1, [sp, #30]
 800a822:	23ff      	movs	r3, #255	@ 0xff
 800a824:	464a      	mov	r2, r9
 800a826:	a902      	add	r1, sp, #8
 800a828:	4628      	mov	r0, r5
 800a82a:	f7ff f8a7 	bl	800997c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 800a82e:	4643      	mov	r3, r8
 800a830:	aa02      	add	r2, sp, #8
 800a832:	4629      	mov	r1, r5
 800a834:	4638      	mov	r0, r7
 800a836:	f7ff f987 	bl	8009b48 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 800a83a:	88a2      	ldrh	r2, [r4, #4]
 800a83c:	8823      	ldrh	r3, [r4, #0]
 800a83e:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 800a842:	4413      	add	r3, r2
 800a844:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 800a848:	440a      	add	r2, r1
 800a84a:	b29b      	uxth	r3, r3
 800a84c:	b292      	uxth	r2, r2
 800a84e:	b211      	sxth	r1, r2
 800a850:	b218      	sxth	r0, r3
 800a852:	4288      	cmp	r0, r1
 800a854:	dd12      	ble.n	800a87c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x18c>
 800a856:	1a9b      	subs	r3, r3, r2
 800a858:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 800a85c:	f9bd 6012 	ldrsh.w	r6, [sp, #18]
 800a860:	f8ad 1018 	strh.w	r1, [sp, #24]
 800a864:	f8ad 301c 	strh.w	r3, [sp, #28]
 800a868:	f8ad 001e 	strh.w	r0, [sp, #30]
 800a86c:	23ff      	movs	r3, #255	@ 0xff
 800a86e:	464a      	mov	r2, r9
 800a870:	a902      	add	r1, sp, #8
 800a872:	4628      	mov	r0, r5
 800a874:	f8ad 601a 	strh.w	r6, [sp, #26]
 800a878:	f7ff f880 	bl	800997c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 800a87c:	88e2      	ldrh	r2, [r4, #6]
 800a87e:	8863      	ldrh	r3, [r4, #2]
 800a880:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 800a884:	4413      	add	r3, r2
 800a886:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800a88a:	440a      	add	r2, r1
 800a88c:	b29b      	uxth	r3, r3
 800a88e:	b292      	uxth	r2, r2
 800a890:	b211      	sxth	r1, r2
 800a892:	b218      	sxth	r0, r3
 800a894:	4288      	cmp	r0, r1
 800a896:	dd80      	ble.n	800a79a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 800a898:	1a9b      	subs	r3, r3, r2
 800a89a:	f9b4 6000 	ldrsh.w	r6, [r4]
 800a89e:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 800a8a2:	f8ad 301e 	strh.w	r3, [sp, #30]
 800a8a6:	f8ad 6018 	strh.w	r6, [sp, #24]
 800a8aa:	f8ad 101a 	strh.w	r1, [sp, #26]
 800a8ae:	f8ad 001c 	strh.w	r0, [sp, #28]
 800a8b2:	23ff      	movs	r3, #255	@ 0xff
 800a8b4:	464a      	mov	r2, r9
 800a8b6:	e761      	b.n	800a77c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x8c>
 800a8b8:	4633      	mov	r3, r6
 800a8ba:	4622      	mov	r2, r4
 800a8bc:	a902      	add	r1, sp, #8
 800a8be:	4628      	mov	r0, r5
 800a8c0:	f7ff f9b2 	bl	8009c28 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
 800a8c4:	e769      	b.n	800a79a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 800a8c6:	e9cd 4600 	strd	r4, r6, [sp]
 800a8ca:	ab02      	add	r3, sp, #8
 800a8cc:	4652      	mov	r2, sl
 800a8ce:	4629      	mov	r1, r5
 800a8d0:	4638      	mov	r0, r7
 800a8d2:	f7ff fd89 	bl	800a3e8 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 800a8d6:	e760      	b.n	800a79a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 800a8d8:	4640      	mov	r0, r8
 800a8da:	f7fe fa9d 	bl	8008e18 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 800a8de:	b948      	cbnz	r0, 800a8f4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x204>
 800a8e0:	683b      	ldr	r3, [r7, #0]
 800a8e2:	e9cd 6000 	strd	r6, r0, [sp]
 800a8e6:	aa02      	add	r2, sp, #8
 800a8e8:	68de      	ldr	r6, [r3, #12]
 800a8ea:	4629      	mov	r1, r5
 800a8ec:	4623      	mov	r3, r4
 800a8ee:	4638      	mov	r0, r7
 800a8f0:	47b0      	blx	r6
 800a8f2:	e752      	b.n	800a79a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 800a8f4:	f10d 0918 	add.w	r9, sp, #24
 800a8f8:	4641      	mov	r1, r8
 800a8fa:	4648      	mov	r0, r9
 800a8fc:	f7fe fa3a 	bl	8008d74 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 800a900:	e899 0003 	ldmia.w	r9, {r0, r1}
 800a904:	f10d 0810 	add.w	r8, sp, #16
 800a908:	e888 0003 	stmia.w	r8, {r0, r1}
 800a90c:	4640      	mov	r0, r8
 800a90e:	4621      	mov	r1, r4
 800a910:	f7fb fa1e 	bl	8005d50 <_ZN8touchgfx4RectaNERKS0_>
 800a914:	4640      	mov	r0, r8
 800a916:	f7fb fa5e 	bl	8005dd6 <_ZNK8touchgfx4Rect7isEmptyEv>
 800a91a:	b138      	cbz	r0, 800a92c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x23c>
 800a91c:	9600      	str	r6, [sp, #0]
 800a91e:	4623      	mov	r3, r4
 800a920:	aa02      	add	r2, sp, #8
 800a922:	4651      	mov	r1, sl
 800a924:	4628      	mov	r0, r5
 800a926:	f7ff fdbd 	bl	800a4a4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 800a92a:	e736      	b.n	800a79a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 800a92c:	683b      	ldr	r3, [r7, #0]
 800a92e:	e9cd 6000 	strd	r6, r0, [sp]
 800a932:	aa02      	add	r2, sp, #8
 800a934:	f8d3 b00c 	ldr.w	fp, [r3, #12]
 800a938:	4629      	mov	r1, r5
 800a93a:	4643      	mov	r3, r8
 800a93c:	4638      	mov	r0, r7
 800a93e:	47d8      	blx	fp
 800a940:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 800a944:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 800a948:	4293      	cmp	r3, r2
 800a94a:	dd13      	ble.n	800a974 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x284>
 800a94c:	f9b4 0000 	ldrsh.w	r0, [r4]
 800a950:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 800a954:	f8ad 0018 	strh.w	r0, [sp, #24]
 800a958:	1a9b      	subs	r3, r3, r2
 800a95a:	f8ad 201a 	strh.w	r2, [sp, #26]
 800a95e:	f8ad 101c 	strh.w	r1, [sp, #28]
 800a962:	f8ad 301e 	strh.w	r3, [sp, #30]
 800a966:	9600      	str	r6, [sp, #0]
 800a968:	464b      	mov	r3, r9
 800a96a:	aa02      	add	r2, sp, #8
 800a96c:	4651      	mov	r1, sl
 800a96e:	4628      	mov	r0, r5
 800a970:	f7ff fd98 	bl	800a4a4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 800a974:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 800a978:	f9b4 2000 	ldrsh.w	r2, [r4]
 800a97c:	4293      	cmp	r3, r2
 800a97e:	dd13      	ble.n	800a9a8 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2b8>
 800a980:	1a9b      	subs	r3, r3, r2
 800a982:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 800a986:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 800a98a:	f8ad 2018 	strh.w	r2, [sp, #24]
 800a98e:	f8ad 001a 	strh.w	r0, [sp, #26]
 800a992:	f8ad 301c 	strh.w	r3, [sp, #28]
 800a996:	f8ad 101e 	strh.w	r1, [sp, #30]
 800a99a:	9600      	str	r6, [sp, #0]
 800a99c:	464b      	mov	r3, r9
 800a99e:	aa02      	add	r2, sp, #8
 800a9a0:	4651      	mov	r1, sl
 800a9a2:	4628      	mov	r0, r5
 800a9a4:	f7ff fd7e 	bl	800a4a4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 800a9a8:	88a2      	ldrh	r2, [r4, #4]
 800a9aa:	8823      	ldrh	r3, [r4, #0]
 800a9ac:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 800a9b0:	4413      	add	r3, r2
 800a9b2:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 800a9b6:	440a      	add	r2, r1
 800a9b8:	b29b      	uxth	r3, r3
 800a9ba:	b292      	uxth	r2, r2
 800a9bc:	b211      	sxth	r1, r2
 800a9be:	b218      	sxth	r0, r3
 800a9c0:	4288      	cmp	r0, r1
 800a9c2:	dd13      	ble.n	800a9ec <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2fc>
 800a9c4:	1a9b      	subs	r3, r3, r2
 800a9c6:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 800a9ca:	f9bd 7012 	ldrsh.w	r7, [sp, #18]
 800a9ce:	f8ad 1018 	strh.w	r1, [sp, #24]
 800a9d2:	f8ad 301c 	strh.w	r3, [sp, #28]
 800a9d6:	f8ad 001e 	strh.w	r0, [sp, #30]
 800a9da:	9600      	str	r6, [sp, #0]
 800a9dc:	464b      	mov	r3, r9
 800a9de:	aa02      	add	r2, sp, #8
 800a9e0:	4651      	mov	r1, sl
 800a9e2:	4628      	mov	r0, r5
 800a9e4:	f8ad 701a 	strh.w	r7, [sp, #26]
 800a9e8:	f7ff fd5c 	bl	800a4a4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 800a9ec:	88e2      	ldrh	r2, [r4, #6]
 800a9ee:	8863      	ldrh	r3, [r4, #2]
 800a9f0:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 800a9f4:	4413      	add	r3, r2
 800a9f6:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800a9fa:	440a      	add	r2, r1
 800a9fc:	b29b      	uxth	r3, r3
 800a9fe:	b292      	uxth	r2, r2
 800aa00:	b211      	sxth	r1, r2
 800aa02:	b218      	sxth	r0, r3
 800aa04:	4288      	cmp	r0, r1
 800aa06:	f77f aec8 	ble.w	800a79a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 800aa0a:	f9b4 7000 	ldrsh.w	r7, [r4]
 800aa0e:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 800aa12:	f8ad 7018 	strh.w	r7, [sp, #24]
 800aa16:	1a9b      	subs	r3, r3, r2
 800aa18:	f8ad 301e 	strh.w	r3, [sp, #30]
 800aa1c:	f8ad 101a 	strh.w	r1, [sp, #26]
 800aa20:	f8ad 001c 	strh.w	r0, [sp, #28]
 800aa24:	9600      	str	r6, [sp, #0]
 800aa26:	464b      	mov	r3, r9
 800aa28:	e77a      	b.n	800a920 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x230>
 800aa2a:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 800aa2e:	2800      	cmp	r0, #0
 800aa30:	f43f aeb3 	beq.w	800a79a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 800aa34:	6803      	ldr	r3, [r0, #0]
 800aa36:	9600      	str	r6, [sp, #0]
 800aa38:	68de      	ldr	r6, [r3, #12]
 800aa3a:	4623      	mov	r3, r4
 800aa3c:	aa02      	add	r2, sp, #8
 800aa3e:	4629      	mov	r1, r5
 800aa40:	47b0      	blx	r6
 800aa42:	e6aa      	b.n	800a79a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 800aa44:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 800aa48:	2800      	cmp	r0, #0
 800aa4a:	f43f aea6 	beq.w	800a79a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 800aa4e:	6803      	ldr	r3, [r0, #0]
 800aa50:	9600      	str	r6, [sp, #0]
 800aa52:	689e      	ldr	r6, [r3, #8]
 800aa54:	e7f1      	b.n	800aa3a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x34a>
 800aa56:	bf00      	nop
 800aa58:	20009178 	.word	0x20009178

0800aa5c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>:
 800aa5c:	b180      	cbz	r0, 800aa80 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x24>
 800aa5e:	2903      	cmp	r1, #3
 800aa60:	d81c      	bhi.n	800aa9c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 800aa62:	e8df f001 	tbb	[pc, r1]
 800aa66:	1d02      	.short	0x1d02
 800aa68:	1f08      	.short	0x1f08
 800aa6a:	4b10      	ldr	r3, [pc, #64]	@ (800aaac <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 800aa6c:	8818      	ldrh	r0, [r3, #0]
 800aa6e:	f3c0 000e 	ubfx	r0, r0, #0, #15
 800aa72:	4240      	negs	r0, r0
 800aa74:	4770      	bx	lr
 800aa76:	4b0d      	ldr	r3, [pc, #52]	@ (800aaac <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 800aa78:	8818      	ldrh	r0, [r3, #0]
 800aa7a:	f3c0 000e 	ubfx	r0, r0, #0, #15
 800aa7e:	4770      	bx	lr
 800aa80:	2903      	cmp	r1, #3
 800aa82:	d80b      	bhi.n	800aa9c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 800aa84:	a301      	add	r3, pc, #4	@ (adr r3, 800aa8c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x30>)
 800aa86:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 800aa8a:	bf00      	nop
 800aa8c:	0800aaa1 	.word	0x0800aaa1
 800aa90:	0800aa77 	.word	0x0800aa77
 800aa94:	0800aaa5 	.word	0x0800aaa5
 800aa98:	0800aa6b 	.word	0x0800aa6b
 800aa9c:	2000      	movs	r0, #0
 800aa9e:	4770      	bx	lr
 800aaa0:	2001      	movs	r0, #1
 800aaa2:	4770      	bx	lr
 800aaa4:	f04f 30ff 	mov.w	r0, #4294967295
 800aaa8:	4770      	bx	lr
 800aaaa:	bf00      	nop
 800aaac:	20009172 	.word	0x20009172

0800aab0 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>:
 800aab0:	b180      	cbz	r0, 800aad4 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x24>
 800aab2:	2903      	cmp	r1, #3
 800aab4:	d81c      	bhi.n	800aaf0 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
 800aab6:	e8df f001 	tbb	[pc, r1]
 800aaba:	021d      	.short	0x021d
 800aabc:	071f      	.short	0x071f
 800aabe:	4b10      	ldr	r3, [pc, #64]	@ (800ab00 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 800aac0:	8818      	ldrh	r0, [r3, #0]
 800aac2:	f3c0 000e 	ubfx	r0, r0, #0, #15
 800aac6:	4770      	bx	lr
 800aac8:	4b0d      	ldr	r3, [pc, #52]	@ (800ab00 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 800aaca:	8818      	ldrh	r0, [r3, #0]
 800aacc:	f3c0 000e 	ubfx	r0, r0, #0, #15
 800aad0:	4240      	negs	r0, r0
 800aad2:	4770      	bx	lr
 800aad4:	2903      	cmp	r1, #3
 800aad6:	d80b      	bhi.n	800aaf0 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
 800aad8:	a301      	add	r3, pc, #4	@ (adr r3, 800aae0 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x30>)
 800aada:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 800aade:	bf00      	nop
 800aae0:	0800aabf 	.word	0x0800aabf
 800aae4:	0800aaf9 	.word	0x0800aaf9
 800aae8:	0800aac9 	.word	0x0800aac9
 800aaec:	0800aaf5 	.word	0x0800aaf5
 800aaf0:	2000      	movs	r0, #0
 800aaf2:	4770      	bx	lr
 800aaf4:	2001      	movs	r0, #1
 800aaf6:	4770      	bx	lr
 800aaf8:	f04f 30ff 	mov.w	r0, #4294967295
 800aafc:	4770      	bx	lr
 800aafe:	bf00      	nop
 800ab00:	20009172 	.word	0x20009172

0800ab04 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 800ab04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab08:	b099      	sub	sp, #100	@ 0x64
 800ab0a:	910d      	str	r1, [sp, #52]	@ 0x34
 800ab0c:	a914      	add	r1, sp, #80	@ 0x50
 800ab0e:	e881 000c 	stmia.w	r1, {r2, r3}
 800ab12:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	@ 0x8c
 800ab16:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ab18:	e9dd 2126 	ldrd	r2, r1, [sp, #152]	@ 0x98
 800ab1c:	f89d 30a4 	ldrb.w	r3, [sp, #164]	@ 0xa4
 800ab20:	9310      	str	r3, [sp, #64]	@ 0x40
 800ab22:	f89d 30ac 	ldrb.w	r3, [sp, #172]	@ 0xac
 800ab26:	9308      	str	r3, [sp, #32]
 800ab28:	f89d 30b0 	ldrb.w	r3, [sp, #176]	@ 0xb0
 800ab2c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ab2e:	7b4b      	ldrb	r3, [r1, #13]
 800ab30:	f9bd 4088 	ldrsh.w	r4, [sp, #136]	@ 0x88
 800ab34:	f8bd 5090 	ldrh.w	r5, [sp, #144]	@ 0x90
 800ab38:	f8bd 6094 	ldrh.w	r6, [sp, #148]	@ 0x94
 800ab3c:	9f28      	ldr	r7, [sp, #160]	@ 0xa0
 800ab3e:	f8dd 90a8 	ldr.w	r9, [sp, #168]	@ 0xa8
 800ab42:	f89d a0b4 	ldrb.w	sl, [sp, #180]	@ 0xb4
 800ab46:	ea4f 1843 	mov.w	r8, r3, lsl #5
 800ab4a:	f408 7080 	and.w	r0, r8, #256	@ 0x100
 800ab4e:	f891 8006 	ldrb.w	r8, [r1, #6]
 800ab52:	ea58 0800 	orrs.w	r8, r8, r0
 800ab56:	f000 81ce 	beq.w	800aef6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3f2>
 800ab5a:	011b      	lsls	r3, r3, #4
 800ab5c:	79c8      	ldrb	r0, [r1, #7]
 800ab5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ab62:	4303      	orrs	r3, r0
 800ab64:	930c      	str	r3, [sp, #48]	@ 0x30
 800ab66:	f000 81c6 	beq.w	800aef6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3f2>
 800ab6a:	f991 3009 	ldrsb.w	r3, [r1, #9]
 800ab6e:	b29b      	uxth	r3, r3
 800ab70:	2d00      	cmp	r5, #0
 800ab72:	f000 812c 	beq.w	800adce <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ca>
 800ab76:	1aed      	subs	r5, r5, r3
 800ab78:	b2ad      	uxth	r5, r5
 800ab7a:	0429      	lsls	r1, r5, #16
 800ab7c:	d502      	bpl.n	800ab84 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x80>
 800ab7e:	1b64      	subs	r4, r4, r5
 800ab80:	b224      	sxth	r4, r4
 800ab82:	2500      	movs	r5, #0
 800ab84:	f9b2 0000 	ldrsh.w	r0, [r2]
 800ab88:	8891      	ldrh	r1, [r2, #4]
 800ab8a:	4284      	cmp	r4, r0
 800ab8c:	b283      	uxth	r3, r0
 800ab8e:	bfb8      	it	lt
 800ab90:	18ed      	addlt	r5, r5, r3
 800ab92:	440b      	add	r3, r1
 800ab94:	b21b      	sxth	r3, r3
 800ab96:	930a      	str	r3, [sp, #40]	@ 0x28
 800ab98:	88d3      	ldrh	r3, [r2, #6]
 800ab9a:	8852      	ldrh	r2, [r2, #2]
 800ab9c:	4413      	add	r3, r2
 800ab9e:	b21b      	sxth	r3, r3
 800aba0:	930f      	str	r3, [sp, #60]	@ 0x3c
 800aba2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800aba4:	930e      	str	r3, [sp, #56]	@ 0x38
 800aba6:	bfb8      	it	lt
 800aba8:	1b2c      	sublt	r4, r5, r4
 800abaa:	4bb5      	ldr	r3, [pc, #724]	@ (800ae80 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37c>)
 800abac:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800abae:	f893 b000 	ldrb.w	fp, [r3]
 800abb2:	bfbc      	itt	lt
 800abb4:	b2a5      	uxthlt	r5, r4
 800abb6:	4604      	movlt	r4, r0
 800abb8:	4653      	mov	r3, sl
 800abba:	4621      	mov	r1, r4
 800abbc:	a814      	add	r0, sp, #80	@ 0x50
 800abbe:	f7fc fd8f 	bl	80076e0 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 800abc2:	4621      	mov	r1, r4
 800abc4:	f8ad 005c 	strh.w	r0, [sp, #92]	@ 0x5c
 800abc8:	4653      	mov	r3, sl
 800abca:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800abcc:	a814      	add	r0, sp, #80	@ 0x50
 800abce:	f7fc fda4 	bl	800771a <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 800abd2:	a918      	add	r1, sp, #96	@ 0x60
 800abd4:	f821 0d02 	strh.w	r0, [r1, #-2]!
 800abd8:	a817      	add	r0, sp, #92	@ 0x5c
 800abda:	f7fc fecb 	bl	8007974 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 800abde:	f1ba 0f00 	cmp.w	sl, #0
 800abe2:	f040 80f7 	bne.w	800add4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2d0>
 800abe6:	f1bb 0f01 	cmp.w	fp, #1
 800abea:	f040 80fb 	bne.w	800ade4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e0>
 800abee:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	f040 81a8 	bne.w	800af46 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x442>
 800abf6:	fa1f f288 	uxth.w	r2, r8
 800abfa:	b905      	cbnz	r5, 800abfe <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xfa>
 800abfc:	b15e      	cbz	r6, 800ac16 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x112>
 800abfe:	9808      	ldr	r0, [sp, #32]
 800ac00:	fb06 5302 	mla	r3, r6, r2, r5
 800ac04:	4343      	muls	r3, r0
 800ac06:	4631      	mov	r1, r6
 800ac08:	eb07 07d3 	add.w	r7, r7, r3, lsr #3
 800ac0c:	f003 0607 	and.w	r6, r3, #7
 800ac10:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ac12:	1a5b      	subs	r3, r3, r1
 800ac14:	930e      	str	r3, [sp, #56]	@ 0x38
 800ac16:	f10b 31ff 	add.w	r1, fp, #4294967295
 800ac1a:	424b      	negs	r3, r1
 800ac1c:	414b      	adcs	r3, r1
 800ac1e:	4618      	mov	r0, r3
 800ac20:	4651      	mov	r1, sl
 800ac22:	930c      	str	r3, [sp, #48]	@ 0x30
 800ac24:	f7ff ff1a 	bl	800aa5c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>
 800ac28:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ac2a:	4683      	mov	fp, r0
 800ac2c:	4618      	mov	r0, r3
 800ac2e:	f7ff ff3f 	bl	800aab0 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>
 800ac32:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800ac34:	4603      	mov	r3, r0
 800ac36:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800ac38:	eba1 0a00 	sub.w	sl, r1, r0
 800ac3c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800ac3e:	458a      	cmp	sl, r1
 800ac40:	bfa8      	it	ge
 800ac42:	468a      	movge	sl, r1
 800ac44:	f1ba 0f00 	cmp.w	sl, #0
 800ac48:	f340 8155 	ble.w	800aef6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3f2>
 800ac4c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ac4e:	1b64      	subs	r4, r4, r5
 800ac50:	1b0c      	subs	r4, r1, r4
 800ac52:	4544      	cmp	r4, r8
 800ac54:	bfd4      	ite	le
 800ac56:	ebc5 0504 	rsble	r5, r5, r4
 800ac5a:	ebc5 0508 	rsbgt	r5, r5, r8
 800ac5e:	2d00      	cmp	r5, #0
 800ac60:	f340 8149 	ble.w	800aef6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3f2>
 800ac64:	9908      	ldr	r1, [sp, #32]
 800ac66:	1b52      	subs	r2, r2, r5
 800ac68:	434a      	muls	r2, r1
 800ac6a:	920e      	str	r2, [sp, #56]	@ 0x38
 800ac6c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ac6e:	2a00      	cmp	r2, #0
 800ac70:	f040 8175 	bne.w	800af5e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x45a>
 800ac74:	4a83      	ldr	r2, [pc, #524]	@ (800ae84 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>)
 800ac76:	930a      	str	r3, [sp, #40]	@ 0x28
 800ac78:	6810      	ldr	r0, [r2, #0]
 800ac7a:	6802      	ldr	r2, [r0, #0]
 800ac7c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800ac7e:	4790      	blx	r2
 800ac80:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ac82:	9908      	ldr	r1, [sp, #32]
 800ac84:	2201      	movs	r2, #1
 800ac86:	408a      	lsls	r2, r1
 800ac88:	3a01      	subs	r2, #1
 800ac8a:	497f      	ldr	r1, [pc, #508]	@ (800ae88 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>)
 800ac8c:	b2d2      	uxtb	r2, r2
 800ac8e:	880c      	ldrh	r4, [r1, #0]
 800ac90:	920c      	str	r2, [sp, #48]	@ 0x30
 800ac92:	f9bd 105c 	ldrsh.w	r1, [sp, #92]	@ 0x5c
 800ac96:	f9bd 205e 	ldrsh.w	r2, [sp, #94]	@ 0x5e
 800ac9a:	fb04 1202 	mla	r2, r4, r2, r1
 800ac9e:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 800aca2:	ea4f 2419 	mov.w	r4, r9, lsr #8
 800aca6:	920a      	str	r2, [sp, #40]	@ 0x28
 800aca8:	f3c9 4207 	ubfx	r2, r9, #16, #8
 800acac:	9212      	str	r2, [sp, #72]	@ 0x48
 800acae:	b2e2      	uxtb	r2, r4
 800acb0:	9211      	str	r2, [sp, #68]	@ 0x44
 800acb2:	fa5f f289 	uxtb.w	r2, r9
 800acb6:	9210      	str	r2, [sp, #64]	@ 0x40
 800acb8:	4a74      	ldr	r2, [pc, #464]	@ (800ae8c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x388>)
 800acba:	ea4f 1159 	mov.w	r1, r9, lsr #5
 800acbe:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 800acc2:	4022      	ands	r2, r4
 800acc4:	430a      	orrs	r2, r1
 800acc6:	f3c9 09c4 	ubfx	r9, r9, #3, #5
 800acca:	ea42 0209 	orr.w	r2, r2, r9
 800acce:	ea4f 014b 	mov.w	r1, fp, lsl #1
 800acd2:	b292      	uxth	r2, r2
 800acd4:	fb05 3b1b 	mls	fp, r5, fp, r3
 800acd8:	920f      	str	r2, [sp, #60]	@ 0x3c
 800acda:	460b      	mov	r3, r1
 800acdc:	783a      	ldrb	r2, [r7, #0]
 800acde:	910b      	str	r1, [sp, #44]	@ 0x2c
 800ace0:	436b      	muls	r3, r5
 800ace2:	4132      	asrs	r2, r6
 800ace4:	eb03 034b 	add.w	r3, r3, fp, lsl #1
 800ace8:	b2d2      	uxtb	r2, r2
 800acea:	9313      	str	r3, [sp, #76]	@ 0x4c
 800acec:	f11a 3aff 	adds.w	sl, sl, #4294967295
 800acf0:	f0c0 8149 	bcc.w	800af86 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x482>
 800acf4:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
 800acf8:	46a9      	mov	r9, r5
 800acfa:	f119 39ff 	adds.w	r9, r9, #4294967295
 800acfe:	f0c0 8132 	bcc.w	800af66 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x462>
 800ad02:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ad04:	4013      	ands	r3, r2
 800ad06:	d054      	beq.n	800adb2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ae>
 800ad08:	20ff      	movs	r0, #255	@ 0xff
 800ad0a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800ad0c:	fb90 f1f1 	sdiv	r1, r0, r1
 800ad10:	434b      	muls	r3, r1
 800ad12:	2bfe      	cmp	r3, #254	@ 0xfe
 800ad14:	dd03      	ble.n	800ad1e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x21a>
 800ad16:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ad18:	4281      	cmp	r1, r0
 800ad1a:	f000 8122 	beq.w	800af62 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x45e>
 800ad1e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ad20:	f8b8 4000 	ldrh.w	r4, [r8]
 800ad24:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800ad26:	fb11 f303 	smulbb	r3, r1, r3
 800ad2a:	b29b      	uxth	r3, r3
 800ad2c:	1c59      	adds	r1, r3, #1
 800ad2e:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 800ad32:	f3c3 2307 	ubfx	r3, r3, #8, #8
 800ad36:	fa1f fe83 	uxth.w	lr, r3
 800ad3a:	1221      	asrs	r1, r4, #8
 800ad3c:	fb10 fb0e 	smulbb	fp, r0, lr
 800ad40:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 800ad44:	9811      	ldr	r0, [sp, #68]	@ 0x44
 800ad46:	43db      	mvns	r3, r3
 800ad48:	b2db      	uxtb	r3, r3
 800ad4a:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 800ad4e:	fb01 b103 	mla	r1, r1, r3, fp
 800ad52:	ea4f 0ce4 	mov.w	ip, r4, asr #3
 800ad56:	fb10 fb0e 	smulbb	fp, r0, lr
 800ad5a:	00e4      	lsls	r4, r4, #3
 800ad5c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800ad5e:	b2e4      	uxtb	r4, r4
 800ad60:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 800ad64:	fb10 fe0e 	smulbb	lr, r0, lr
 800ad68:	fb04 e403 	mla	r4, r4, r3, lr
 800ad6c:	f00c 0cfc 	and.w	ip, ip, #252	@ 0xfc
 800ad70:	b289      	uxth	r1, r1
 800ad72:	b2a4      	uxth	r4, r4
 800ad74:	ea4c 1c9c 	orr.w	ip, ip, ip, lsr #6
 800ad78:	fb0c bc03 	mla	ip, ip, r3, fp
 800ad7c:	1c4b      	adds	r3, r1, #1
 800ad7e:	f104 0b01 	add.w	fp, r4, #1
 800ad82:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 800ad86:	eb0b 2b14 	add.w	fp, fp, r4, lsr #8
 800ad8a:	fa1f fc8c 	uxth.w	ip, ip
 800ad8e:	f3cb 2bc4 	ubfx	fp, fp, #11, #5
 800ad92:	f401 4178 	and.w	r1, r1, #63488	@ 0xf800
 800ad96:	ea4b 0101 	orr.w	r1, fp, r1
 800ad9a:	f10c 0b01 	add.w	fp, ip, #1
 800ad9e:	eb0b 2b1c 	add.w	fp, fp, ip, lsr #8
 800ada2:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 800ada6:	f40b 6bfc 	and.w	fp, fp, #2016	@ 0x7e0
 800adaa:	ea41 010b 	orr.w	r1, r1, fp
 800adae:	f8a8 1000 	strh.w	r1, [r8]
 800adb2:	9b08      	ldr	r3, [sp, #32]
 800adb4:	441e      	add	r6, r3
 800adb6:	b2b6      	uxth	r6, r6
 800adb8:	2e07      	cmp	r6, #7
 800adba:	bf98      	it	ls
 800adbc:	411a      	asrls	r2, r3
 800adbe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800adc0:	bf89      	itett	hi
 800adc2:	787a      	ldrbhi	r2, [r7, #1]
 800adc4:	b2d2      	uxtbls	r2, r2
 800adc6:	3701      	addhi	r7, #1
 800adc8:	2600      	movhi	r6, #0
 800adca:	4498      	add	r8, r3
 800adcc:	e795      	b.n	800acfa <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1f6>
 800adce:	441c      	add	r4, r3
 800add0:	b224      	sxth	r4, r4
 800add2:	e6d7      	b.n	800ab84 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x80>
 800add4:	f1ba 0f01 	cmp.w	sl, #1
 800add8:	f47f af09 	bne.w	800abee <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xea>
 800addc:	f1bb 0f01 	cmp.w	fp, #1
 800ade0:	f47f af05 	bne.w	800abee <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xea>
 800ade4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ade6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800ade8:	1a99      	subs	r1, r3, r2
 800adea:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800adec:	1b9b      	subs	r3, r3, r6
 800adee:	4299      	cmp	r1, r3
 800adf0:	bfa8      	it	ge
 800adf2:	4619      	movge	r1, r3
 800adf4:	2900      	cmp	r1, #0
 800adf6:	9112      	str	r1, [sp, #72]	@ 0x48
 800adf8:	dd7d      	ble.n	800aef6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3f2>
 800adfa:	4a22      	ldr	r2, [pc, #136]	@ (800ae84 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>)
 800adfc:	9211      	str	r2, [sp, #68]	@ 0x44
 800adfe:	6810      	ldr	r0, [r2, #0]
 800ae00:	6803      	ldr	r3, [r0, #0]
 800ae02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ae04:	4798      	blx	r3
 800ae06:	f410 7380 	ands.w	r3, r0, #256	@ 0x100
 800ae0a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800ae0c:	d006      	beq.n	800ae1c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x318>
 800ae0e:	9b08      	ldr	r3, [sp, #32]
 800ae10:	2b04      	cmp	r3, #4
 800ae12:	d133      	bne.n	800ae7c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>
 800ae14:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ae16:	3300      	adds	r3, #0
 800ae18:	bf18      	it	ne
 800ae1a:	2301      	movne	r3, #1
 800ae1c:	0582      	lsls	r2, r0, #22
 800ae1e:	fa1f fc88 	uxth.w	ip, r8
 800ae22:	f140 80b9 	bpl.w	800af98 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x494>
 800ae26:	9808      	ldr	r0, [sp, #32]
 800ae28:	2808      	cmp	r0, #8
 800ae2a:	f040 80b5 	bne.w	800af98 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x494>
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d064      	beq.n	800aefc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3f8>
 800ae32:	f10c 0c01 	add.w	ip, ip, #1
 800ae36:	f02c 0301 	bic.w	r3, ip, #1
 800ae3a:	b29b      	uxth	r3, r3
 800ae3c:	bb45      	cbnz	r5, 800ae90 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x38c>
 800ae3e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ae40:	eb08 0004 	add.w	r0, r8, r4
 800ae44:	4290      	cmp	r0, r2
 800ae46:	dc23      	bgt.n	800ae90 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x38c>
 800ae48:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800ae4a:	f8bd e05e 	ldrh.w	lr, [sp, #94]	@ 0x5e
 800ae4e:	6810      	ldr	r0, [r2, #0]
 800ae50:	f8bd 205c 	ldrh.w	r2, [sp, #92]	@ 0x5c
 800ae54:	6804      	ldr	r4, [r0, #0]
 800ae56:	9506      	str	r5, [sp, #24]
 800ae58:	f44f 7580 	mov.w	r5, #256	@ 0x100
 800ae5c:	9505      	str	r5, [sp, #20]
 800ae5e:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800ae60:	9302      	str	r3, [sp, #8]
 800ae62:	b289      	uxth	r1, r1
 800ae64:	e9cd 3100 	strd	r3, r1, [sp]
 800ae68:	e9cd 9503 	strd	r9, r5, [sp, #12]
 800ae6c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800ae70:	6da4      	ldr	r4, [r4, #88]	@ 0x58
 800ae72:	4673      	mov	r3, lr
 800ae74:	fb06 710c 	mla	r1, r6, ip, r7
 800ae78:	47a0      	blx	r4
 800ae7a:	e03c      	b.n	800aef6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3f2>
 800ae7c:	2300      	movs	r3, #0
 800ae7e:	e7cd      	b.n	800ae1c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x318>
 800ae80:	20009170 	.word	0x20009170
 800ae84:	20009178 	.word	0x20009178
 800ae88:	20009172 	.word	0x20009172
 800ae8c:	00fff800 	.word	0x00fff800
 800ae90:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ae92:	eba4 0e05 	sub.w	lr, r4, r5
 800ae96:	eba2 0e0e 	sub.w	lr, r2, lr
 800ae9a:	45c6      	cmp	lr, r8
 800ae9c:	bfd4      	ite	le
 800ae9e:	ebc5 0e0e 	rsble	lr, r5, lr
 800aea2:	ebc5 0e08 	rsbgt	lr, r5, r8
 800aea6:	f1be 0f00 	cmp.w	lr, #0
 800aeaa:	d024      	beq.n	800aef6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3f2>
 800aeac:	07e8      	lsls	r0, r5, #31
 800aeae:	f53f ae9e 	bmi.w	800abee <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xea>
 800aeb2:	f01e 0001 	ands.w	r0, lr, #1
 800aeb6:	f47f ae9a 	bne.w	800abee <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xea>
 800aeba:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800aebc:	f8bd 805e 	ldrh.w	r8, [sp, #94]	@ 0x5e
 800aec0:	6814      	ldr	r4, [r2, #0]
 800aec2:	f8bd 205c 	ldrh.w	r2, [sp, #92]	@ 0x5c
 800aec6:	086d      	lsrs	r5, r5, #1
 800aec8:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800aecc:	fb06 560c 	mla	r6, r6, ip, r5
 800aed0:	6825      	ldr	r5, [r4, #0]
 800aed2:	9006      	str	r0, [sp, #24]
 800aed4:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800aed8:	9005      	str	r0, [sp, #20]
 800aeda:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800aedc:	9302      	str	r3, [sp, #8]
 800aede:	e9cd 9003 	strd	r9, r0, [sp, #12]
 800aee2:	b289      	uxth	r1, r1
 800aee4:	fa1f f38e 	uxth.w	r3, lr
 800aee8:	9101      	str	r1, [sp, #4]
 800aeea:	9300      	str	r3, [sp, #0]
 800aeec:	6dad      	ldr	r5, [r5, #88]	@ 0x58
 800aeee:	4643      	mov	r3, r8
 800aef0:	19b9      	adds	r1, r7, r6
 800aef2:	4620      	mov	r0, r4
 800aef4:	47a8      	blx	r5
 800aef6:	b019      	add	sp, #100	@ 0x64
 800aef8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aefc:	4a28      	ldr	r2, [pc, #160]	@ (800afa0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x49c>)
 800aefe:	f8bd e05e 	ldrh.w	lr, [sp, #94]	@ 0x5e
 800af02:	6810      	ldr	r0, [r2, #0]
 800af04:	f8bd 205c 	ldrh.w	r2, [sp, #92]	@ 0x5c
 800af08:	f8d0 a000 	ldr.w	sl, [r0]
 800af0c:	9306      	str	r3, [sp, #24]
 800af0e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800af12:	9305      	str	r3, [sp, #20]
 800af14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af16:	f8cd c008 	str.w	ip, [sp, #8]
 800af1a:	e9cd 9303 	strd	r9, r3, [sp, #12]
 800af1e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800af20:	1b64      	subs	r4, r4, r5
 800af22:	1b1c      	subs	r4, r3, r4
 800af24:	fb06 5608 	mla	r6, r6, r8, r5
 800af28:	4544      	cmp	r4, r8
 800af2a:	bfd4      	ite	le
 800af2c:	ebc5 0504 	rsble	r5, r5, r4
 800af30:	ebc5 0508 	rsbgt	r5, r5, r8
 800af34:	b289      	uxth	r1, r1
 800af36:	b2ad      	uxth	r5, r5
 800af38:	9101      	str	r1, [sp, #4]
 800af3a:	9500      	str	r5, [sp, #0]
 800af3c:	f8da 4058 	ldr.w	r4, [sl, #88]	@ 0x58
 800af40:	4673      	mov	r3, lr
 800af42:	19b9      	adds	r1, r7, r6
 800af44:	e798      	b.n	800ae78 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x374>
 800af46:	2208      	movs	r2, #8
 800af48:	9b08      	ldr	r3, [sp, #32]
 800af4a:	fb92 f3f3 	sdiv	r3, r2, r3
 800af4e:	1e5a      	subs	r2, r3, #1
 800af50:	4442      	add	r2, r8
 800af52:	fb92 f2f3 	sdiv	r2, r2, r3
 800af56:	fb12 f203 	smulbb	r2, r2, r3
 800af5a:	b292      	uxth	r2, r2
 800af5c:	e64d      	b.n	800abfa <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf6>
 800af5e:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800af60:	e68f      	b.n	800ac82 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x17e>
 800af62:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800af64:	e723      	b.n	800adae <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2aa>
 800af66:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800af68:	b143      	cbz	r3, 800af7c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x478>
 800af6a:	441e      	add	r6, r3
 800af6c:	b2b6      	uxth	r6, r6
 800af6e:	eb07 07d6 	add.w	r7, r7, r6, lsr #3
 800af72:	f006 0607 	and.w	r6, r6, #7
 800af76:	783a      	ldrb	r2, [r7, #0]
 800af78:	4132      	asrs	r2, r6
 800af7a:	b2d2      	uxtb	r2, r2
 800af7c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800af7e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800af80:	4419      	add	r1, r3
 800af82:	910a      	str	r1, [sp, #40]	@ 0x28
 800af84:	e6b2      	b.n	800acec <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e8>
 800af86:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d1b4      	bne.n	800aef6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3f2>
 800af8c:	4b04      	ldr	r3, [pc, #16]	@ (800afa0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x49c>)
 800af8e:	6818      	ldr	r0, [r3, #0]
 800af90:	6803      	ldr	r3, [r0, #0]
 800af92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800af94:	4798      	blx	r3
 800af96:	e7ae      	b.n	800aef6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3f2>
 800af98:	2b00      	cmp	r3, #0
 800af9a:	f47f af4a 	bne.w	800ae32 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x32e>
 800af9e:	e626      	b.n	800abee <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xea>
 800afa0:	20009178 	.word	0x20009178

0800afa4 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 800afa4:	6101      	str	r1, [r0, #16]
 800afa6:	4770      	bx	lr

0800afa8 <_ZN8touchgfx8Gestures4tickEv>:
 800afa8:	7b83      	ldrb	r3, [r0, #14]
 800afaa:	b14b      	cbz	r3, 800afc0 <_ZN8touchgfx8Gestures4tickEv+0x18>
 800afac:	8903      	ldrh	r3, [r0, #8]
 800afae:	3301      	adds	r3, #1
 800afb0:	b29b      	uxth	r3, r3
 800afb2:	2b07      	cmp	r3, #7
 800afb4:	8103      	strh	r3, [r0, #8]
 800afb6:	bf81      	itttt	hi
 800afb8:	2300      	movhi	r3, #0
 800afba:	8143      	strhhi	r3, [r0, #10]
 800afbc:	8183      	strhhi	r3, [r0, #12]
 800afbe:	7383      	strbhi	r3, [r0, #14]
 800afc0:	4770      	bx	lr
	...

0800afc4 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 800afc4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800afc8:	4698      	mov	r8, r3
 800afca:	8883      	ldrh	r3, [r0, #4]
 800afcc:	f8ad 3006 	strh.w	r3, [sp, #6]
 800afd0:	eba8 0303 	sub.w	r3, r8, r3
 800afd4:	b21b      	sxth	r3, r3
 800afd6:	4604      	mov	r4, r0
 800afd8:	2b00      	cmp	r3, #0
 800afda:	4617      	mov	r7, r2
 800afdc:	4a18      	ldr	r2, [pc, #96]	@ (800b040 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 800afde:	9200      	str	r2, [sp, #0]
 800afe0:	bfb8      	it	lt
 800afe2:	425b      	neglt	r3, r3
 800afe4:	8aa2      	ldrh	r2, [r4, #20]
 800afe6:	f8bd 5028 	ldrh.w	r5, [sp, #40]	@ 0x28
 800afea:	f8ad 800a 	strh.w	r8, [sp, #10]
 800afee:	b21b      	sxth	r3, r3
 800aff0:	460e      	mov	r6, r1
 800aff2:	4293      	cmp	r3, r2
 800aff4:	88c1      	ldrh	r1, [r0, #6]
 800aff6:	f8ad 1008 	strh.w	r1, [sp, #8]
 800affa:	f04f 0000 	mov.w	r0, #0
 800affe:	f88d 0004 	strb.w	r0, [sp, #4]
 800b002:	f8ad 500c 	strh.w	r5, [sp, #12]
 800b006:	dc07      	bgt.n	800b018 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x54>
 800b008:	1a69      	subs	r1, r5, r1
 800b00a:	b209      	sxth	r1, r1
 800b00c:	2900      	cmp	r1, #0
 800b00e:	bfb8      	it	lt
 800b010:	4249      	neglt	r1, r1
 800b012:	b209      	sxth	r1, r1
 800b014:	428a      	cmp	r2, r1
 800b016:	da10      	bge.n	800b03a <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x76>
 800b018:	6920      	ldr	r0, [r4, #16]
 800b01a:	6803      	ldr	r3, [r0, #0]
 800b01c:	4669      	mov	r1, sp
 800b01e:	685b      	ldr	r3, [r3, #4]
 800b020:	4798      	blx	r3
 800b022:	eba8 0606 	sub.w	r6, r8, r6
 800b026:	2300      	movs	r3, #0
 800b028:	1bef      	subs	r7, r5, r7
 800b02a:	2001      	movs	r0, #1
 800b02c:	8123      	strh	r3, [r4, #8]
 800b02e:	8166      	strh	r6, [r4, #10]
 800b030:	81a7      	strh	r7, [r4, #12]
 800b032:	f8a4 8004 	strh.w	r8, [r4, #4]
 800b036:	80e5      	strh	r5, [r4, #6]
 800b038:	73a0      	strb	r0, [r4, #14]
 800b03a:	b004      	add	sp, #16
 800b03c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b040:	0800cb10 	.word	0x0800cb10

0800b044 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 800b044:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b046:	461e      	mov	r6, r3
 800b048:	1e4b      	subs	r3, r1, #1
 800b04a:	2b01      	cmp	r3, #1
 800b04c:	b085      	sub	sp, #20
 800b04e:	4604      	mov	r4, r0
 800b050:	460d      	mov	r5, r1
 800b052:	4617      	mov	r7, r2
 800b054:	d84b      	bhi.n	800b0ee <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 800b056:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 800b05a:	1cd3      	adds	r3, r2, #3
 800b05c:	b29b      	uxth	r3, r3
 800b05e:	2b06      	cmp	r3, #6
 800b060:	d916      	bls.n	800b090 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 800b062:	f8df c0a0 	ldr.w	ip, [pc, #160]	@ 800b104 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 800b066:	f8cd c004 	str.w	ip, [sp, #4]
 800b06a:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 800b06e:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 800b072:	6900      	ldr	r0, [r0, #16]
 800b074:	f8ad 100c 	strh.w	r1, [sp, #12]
 800b078:	f04f 0c00 	mov.w	ip, #0
 800b07c:	f88d c008 	strb.w	ip, [sp, #8]
 800b080:	f8ad 200a 	strh.w	r2, [sp, #10]
 800b084:	f8ad 300e 	strh.w	r3, [sp, #14]
 800b088:	6803      	ldr	r3, [r0, #0]
 800b08a:	a901      	add	r1, sp, #4
 800b08c:	689b      	ldr	r3, [r3, #8]
 800b08e:	4798      	blx	r3
 800b090:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b094:	1cd3      	adds	r3, r2, #3
 800b096:	b29b      	uxth	r3, r3
 800b098:	2b06      	cmp	r3, #6
 800b09a:	d916      	bls.n	800b0ca <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 800b09c:	f8df c064 	ldr.w	ip, [pc, #100]	@ 800b104 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 800b0a0:	f8cd c004 	str.w	ip, [sp, #4]
 800b0a4:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 800b0a8:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 800b0ac:	6920      	ldr	r0, [r4, #16]
 800b0ae:	f8ad 100c 	strh.w	r1, [sp, #12]
 800b0b2:	f04f 0c01 	mov.w	ip, #1
 800b0b6:	f88d c008 	strb.w	ip, [sp, #8]
 800b0ba:	f8ad 200a 	strh.w	r2, [sp, #10]
 800b0be:	f8ad 300e 	strh.w	r3, [sp, #14]
 800b0c2:	6803      	ldr	r3, [r0, #0]
 800b0c4:	a901      	add	r1, sp, #4
 800b0c6:	689b      	ldr	r3, [r3, #8]
 800b0c8:	4798      	blx	r3
 800b0ca:	4b0d      	ldr	r3, [pc, #52]	@ (800b100 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 800b0cc:	9301      	str	r3, [sp, #4]
 800b0ce:	6920      	ldr	r0, [r4, #16]
 800b0d0:	f88d 5008 	strb.w	r5, [sp, #8]
 800b0d4:	2300      	movs	r3, #0
 800b0d6:	f8ad 700a 	strh.w	r7, [sp, #10]
 800b0da:	f8ad 600c 	strh.w	r6, [sp, #12]
 800b0de:	f8ad 300e 	strh.w	r3, [sp, #14]
 800b0e2:	6803      	ldr	r3, [r0, #0]
 800b0e4:	a901      	add	r1, sp, #4
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	4798      	blx	r3
 800b0ea:	b005      	add	sp, #20
 800b0ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b0ee:	2900      	cmp	r1, #0
 800b0f0:	d1eb      	bne.n	800b0ca <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 800b0f2:	80a2      	strh	r2, [r4, #4]
 800b0f4:	80c6      	strh	r6, [r0, #6]
 800b0f6:	60a1      	str	r1, [r4, #8]
 800b0f8:	81a1      	strh	r1, [r4, #12]
 800b0fa:	73a1      	strb	r1, [r4, #14]
 800b0fc:	e7e5      	b.n	800b0ca <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 800b0fe:	bf00      	nop
 800b100:	0800cafc 	.word	0x0800cafc
 800b104:	0800cb24 	.word	0x0800cb24

0800b108 <_ZdlPvj>:
 800b108:	f000 b812 	b.w	800b130 <_ZdlPv>

0800b10c <__cxa_guard_acquire>:
 800b10c:	6802      	ldr	r2, [r0, #0]
 800b10e:	07d2      	lsls	r2, r2, #31
 800b110:	4603      	mov	r3, r0
 800b112:	d405      	bmi.n	800b120 <__cxa_guard_acquire+0x14>
 800b114:	7842      	ldrb	r2, [r0, #1]
 800b116:	b102      	cbz	r2, 800b11a <__cxa_guard_acquire+0xe>
 800b118:	deff      	udf	#255	@ 0xff
 800b11a:	2001      	movs	r0, #1
 800b11c:	7058      	strb	r0, [r3, #1]
 800b11e:	4770      	bx	lr
 800b120:	2000      	movs	r0, #0
 800b122:	4770      	bx	lr

0800b124 <__cxa_guard_release>:
 800b124:	2301      	movs	r3, #1
 800b126:	6003      	str	r3, [r0, #0]
 800b128:	4770      	bx	lr

0800b12a <__cxa_pure_virtual>:
 800b12a:	b508      	push	{r3, lr}
 800b12c:	f000 f80e 	bl	800b14c <_ZSt9terminatev>

0800b130 <_ZdlPv>:
 800b130:	f000 b844 	b.w	800b1bc <free>

0800b134 <_ZN10__cxxabiv111__terminateEPFvvE>:
 800b134:	b508      	push	{r3, lr}
 800b136:	4780      	blx	r0
 800b138:	f000 f80d 	bl	800b156 <abort>

0800b13c <_ZSt13get_terminatev>:
 800b13c:	4b02      	ldr	r3, [pc, #8]	@ (800b148 <_ZSt13get_terminatev+0xc>)
 800b13e:	6818      	ldr	r0, [r3, #0]
 800b140:	f3bf 8f5b 	dmb	ish
 800b144:	4770      	bx	lr
 800b146:	bf00      	nop
 800b148:	20000014 	.word	0x20000014

0800b14c <_ZSt9terminatev>:
 800b14c:	b508      	push	{r3, lr}
 800b14e:	f7ff fff5 	bl	800b13c <_ZSt13get_terminatev>
 800b152:	f7ff ffef 	bl	800b134 <_ZN10__cxxabiv111__terminateEPFvvE>

0800b156 <abort>:
 800b156:	b508      	push	{r3, lr}
 800b158:	2006      	movs	r0, #6
 800b15a:	f000 fa2d 	bl	800b5b8 <raise>
 800b15e:	2001      	movs	r0, #1
 800b160:	f7f6 fa2e 	bl	80015c0 <_exit>

0800b164 <__assert_func>:
 800b164:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b166:	4614      	mov	r4, r2
 800b168:	461a      	mov	r2, r3
 800b16a:	4b09      	ldr	r3, [pc, #36]	@ (800b190 <__assert_func+0x2c>)
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	4605      	mov	r5, r0
 800b170:	68d8      	ldr	r0, [r3, #12]
 800b172:	b14c      	cbz	r4, 800b188 <__assert_func+0x24>
 800b174:	4b07      	ldr	r3, [pc, #28]	@ (800b194 <__assert_func+0x30>)
 800b176:	9100      	str	r1, [sp, #0]
 800b178:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b17c:	4906      	ldr	r1, [pc, #24]	@ (800b198 <__assert_func+0x34>)
 800b17e:	462b      	mov	r3, r5
 800b180:	f000 f976 	bl	800b470 <fiprintf>
 800b184:	f7ff ffe7 	bl	800b156 <abort>
 800b188:	4b04      	ldr	r3, [pc, #16]	@ (800b19c <__assert_func+0x38>)
 800b18a:	461c      	mov	r4, r3
 800b18c:	e7f3      	b.n	800b176 <__assert_func+0x12>
 800b18e:	bf00      	nop
 800b190:	20000024 	.word	0x20000024
 800b194:	0800c7e9 	.word	0x0800c7e9
 800b198:	0800c7f6 	.word	0x0800c7f6
 800b19c:	0800c824 	.word	0x0800c824

0800b1a0 <atexit>:
 800b1a0:	2300      	movs	r3, #0
 800b1a2:	4601      	mov	r1, r0
 800b1a4:	461a      	mov	r2, r3
 800b1a6:	4618      	mov	r0, r3
 800b1a8:	f000 bab4 	b.w	800b714 <__register_exitproc>

0800b1ac <malloc>:
 800b1ac:	4b02      	ldr	r3, [pc, #8]	@ (800b1b8 <malloc+0xc>)
 800b1ae:	4601      	mov	r1, r0
 800b1b0:	6818      	ldr	r0, [r3, #0]
 800b1b2:	f000 b82d 	b.w	800b210 <_malloc_r>
 800b1b6:	bf00      	nop
 800b1b8:	20000024 	.word	0x20000024

0800b1bc <free>:
 800b1bc:	4b02      	ldr	r3, [pc, #8]	@ (800b1c8 <free+0xc>)
 800b1be:	4601      	mov	r1, r0
 800b1c0:	6818      	ldr	r0, [r3, #0]
 800b1c2:	f000 bb03 	b.w	800b7cc <_free_r>
 800b1c6:	bf00      	nop
 800b1c8:	20000024 	.word	0x20000024

0800b1cc <sbrk_aligned>:
 800b1cc:	b570      	push	{r4, r5, r6, lr}
 800b1ce:	4e0f      	ldr	r6, [pc, #60]	@ (800b20c <sbrk_aligned+0x40>)
 800b1d0:	460c      	mov	r4, r1
 800b1d2:	6831      	ldr	r1, [r6, #0]
 800b1d4:	4605      	mov	r5, r0
 800b1d6:	b911      	cbnz	r1, 800b1de <sbrk_aligned+0x12>
 800b1d8:	f000 fa3e 	bl	800b658 <_sbrk_r>
 800b1dc:	6030      	str	r0, [r6, #0]
 800b1de:	4621      	mov	r1, r4
 800b1e0:	4628      	mov	r0, r5
 800b1e2:	f000 fa39 	bl	800b658 <_sbrk_r>
 800b1e6:	1c43      	adds	r3, r0, #1
 800b1e8:	d103      	bne.n	800b1f2 <sbrk_aligned+0x26>
 800b1ea:	f04f 34ff 	mov.w	r4, #4294967295
 800b1ee:	4620      	mov	r0, r4
 800b1f0:	bd70      	pop	{r4, r5, r6, pc}
 800b1f2:	1cc4      	adds	r4, r0, #3
 800b1f4:	f024 0403 	bic.w	r4, r4, #3
 800b1f8:	42a0      	cmp	r0, r4
 800b1fa:	d0f8      	beq.n	800b1ee <sbrk_aligned+0x22>
 800b1fc:	1a21      	subs	r1, r4, r0
 800b1fe:	4628      	mov	r0, r5
 800b200:	f000 fa2a 	bl	800b658 <_sbrk_r>
 800b204:	3001      	adds	r0, #1
 800b206:	d1f2      	bne.n	800b1ee <sbrk_aligned+0x22>
 800b208:	e7ef      	b.n	800b1ea <sbrk_aligned+0x1e>
 800b20a:	bf00      	nop
 800b20c:	200091cc 	.word	0x200091cc

0800b210 <_malloc_r>:
 800b210:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b214:	1ccd      	adds	r5, r1, #3
 800b216:	f025 0503 	bic.w	r5, r5, #3
 800b21a:	3508      	adds	r5, #8
 800b21c:	2d0c      	cmp	r5, #12
 800b21e:	bf38      	it	cc
 800b220:	250c      	movcc	r5, #12
 800b222:	2d00      	cmp	r5, #0
 800b224:	4606      	mov	r6, r0
 800b226:	db01      	blt.n	800b22c <_malloc_r+0x1c>
 800b228:	42a9      	cmp	r1, r5
 800b22a:	d904      	bls.n	800b236 <_malloc_r+0x26>
 800b22c:	230c      	movs	r3, #12
 800b22e:	6033      	str	r3, [r6, #0]
 800b230:	2000      	movs	r0, #0
 800b232:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b236:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b30c <_malloc_r+0xfc>
 800b23a:	f000 f869 	bl	800b310 <__malloc_lock>
 800b23e:	f8d8 3000 	ldr.w	r3, [r8]
 800b242:	461c      	mov	r4, r3
 800b244:	bb44      	cbnz	r4, 800b298 <_malloc_r+0x88>
 800b246:	4629      	mov	r1, r5
 800b248:	4630      	mov	r0, r6
 800b24a:	f7ff ffbf 	bl	800b1cc <sbrk_aligned>
 800b24e:	1c43      	adds	r3, r0, #1
 800b250:	4604      	mov	r4, r0
 800b252:	d158      	bne.n	800b306 <_malloc_r+0xf6>
 800b254:	f8d8 4000 	ldr.w	r4, [r8]
 800b258:	4627      	mov	r7, r4
 800b25a:	2f00      	cmp	r7, #0
 800b25c:	d143      	bne.n	800b2e6 <_malloc_r+0xd6>
 800b25e:	2c00      	cmp	r4, #0
 800b260:	d04b      	beq.n	800b2fa <_malloc_r+0xea>
 800b262:	6823      	ldr	r3, [r4, #0]
 800b264:	4639      	mov	r1, r7
 800b266:	4630      	mov	r0, r6
 800b268:	eb04 0903 	add.w	r9, r4, r3
 800b26c:	f000 f9f4 	bl	800b658 <_sbrk_r>
 800b270:	4581      	cmp	r9, r0
 800b272:	d142      	bne.n	800b2fa <_malloc_r+0xea>
 800b274:	6821      	ldr	r1, [r4, #0]
 800b276:	1a6d      	subs	r5, r5, r1
 800b278:	4629      	mov	r1, r5
 800b27a:	4630      	mov	r0, r6
 800b27c:	f7ff ffa6 	bl	800b1cc <sbrk_aligned>
 800b280:	3001      	adds	r0, #1
 800b282:	d03a      	beq.n	800b2fa <_malloc_r+0xea>
 800b284:	6823      	ldr	r3, [r4, #0]
 800b286:	442b      	add	r3, r5
 800b288:	6023      	str	r3, [r4, #0]
 800b28a:	f8d8 3000 	ldr.w	r3, [r8]
 800b28e:	685a      	ldr	r2, [r3, #4]
 800b290:	bb62      	cbnz	r2, 800b2ec <_malloc_r+0xdc>
 800b292:	f8c8 7000 	str.w	r7, [r8]
 800b296:	e00f      	b.n	800b2b8 <_malloc_r+0xa8>
 800b298:	6822      	ldr	r2, [r4, #0]
 800b29a:	1b52      	subs	r2, r2, r5
 800b29c:	d420      	bmi.n	800b2e0 <_malloc_r+0xd0>
 800b29e:	2a0b      	cmp	r2, #11
 800b2a0:	d917      	bls.n	800b2d2 <_malloc_r+0xc2>
 800b2a2:	1961      	adds	r1, r4, r5
 800b2a4:	42a3      	cmp	r3, r4
 800b2a6:	6025      	str	r5, [r4, #0]
 800b2a8:	bf18      	it	ne
 800b2aa:	6059      	strne	r1, [r3, #4]
 800b2ac:	6863      	ldr	r3, [r4, #4]
 800b2ae:	bf08      	it	eq
 800b2b0:	f8c8 1000 	streq.w	r1, [r8]
 800b2b4:	5162      	str	r2, [r4, r5]
 800b2b6:	604b      	str	r3, [r1, #4]
 800b2b8:	4630      	mov	r0, r6
 800b2ba:	f000 f82f 	bl	800b31c <__malloc_unlock>
 800b2be:	f104 000b 	add.w	r0, r4, #11
 800b2c2:	1d23      	adds	r3, r4, #4
 800b2c4:	f020 0007 	bic.w	r0, r0, #7
 800b2c8:	1ac2      	subs	r2, r0, r3
 800b2ca:	bf1c      	itt	ne
 800b2cc:	1a1b      	subne	r3, r3, r0
 800b2ce:	50a3      	strne	r3, [r4, r2]
 800b2d0:	e7af      	b.n	800b232 <_malloc_r+0x22>
 800b2d2:	6862      	ldr	r2, [r4, #4]
 800b2d4:	42a3      	cmp	r3, r4
 800b2d6:	bf0c      	ite	eq
 800b2d8:	f8c8 2000 	streq.w	r2, [r8]
 800b2dc:	605a      	strne	r2, [r3, #4]
 800b2de:	e7eb      	b.n	800b2b8 <_malloc_r+0xa8>
 800b2e0:	4623      	mov	r3, r4
 800b2e2:	6864      	ldr	r4, [r4, #4]
 800b2e4:	e7ae      	b.n	800b244 <_malloc_r+0x34>
 800b2e6:	463c      	mov	r4, r7
 800b2e8:	687f      	ldr	r7, [r7, #4]
 800b2ea:	e7b6      	b.n	800b25a <_malloc_r+0x4a>
 800b2ec:	461a      	mov	r2, r3
 800b2ee:	685b      	ldr	r3, [r3, #4]
 800b2f0:	42a3      	cmp	r3, r4
 800b2f2:	d1fb      	bne.n	800b2ec <_malloc_r+0xdc>
 800b2f4:	2300      	movs	r3, #0
 800b2f6:	6053      	str	r3, [r2, #4]
 800b2f8:	e7de      	b.n	800b2b8 <_malloc_r+0xa8>
 800b2fa:	230c      	movs	r3, #12
 800b2fc:	6033      	str	r3, [r6, #0]
 800b2fe:	4630      	mov	r0, r6
 800b300:	f000 f80c 	bl	800b31c <__malloc_unlock>
 800b304:	e794      	b.n	800b230 <_malloc_r+0x20>
 800b306:	6005      	str	r5, [r0, #0]
 800b308:	e7d6      	b.n	800b2b8 <_malloc_r+0xa8>
 800b30a:	bf00      	nop
 800b30c:	200091d0 	.word	0x200091d0

0800b310 <__malloc_lock>:
 800b310:	4801      	ldr	r0, [pc, #4]	@ (800b318 <__malloc_lock+0x8>)
 800b312:	f000 b9ee 	b.w	800b6f2 <__retarget_lock_acquire_recursive>
 800b316:	bf00      	nop
 800b318:	20009314 	.word	0x20009314

0800b31c <__malloc_unlock>:
 800b31c:	4801      	ldr	r0, [pc, #4]	@ (800b324 <__malloc_unlock+0x8>)
 800b31e:	f000 b9e9 	b.w	800b6f4 <__retarget_lock_release_recursive>
 800b322:	bf00      	nop
 800b324:	20009314 	.word	0x20009314

0800b328 <std>:
 800b328:	2300      	movs	r3, #0
 800b32a:	b510      	push	{r4, lr}
 800b32c:	4604      	mov	r4, r0
 800b32e:	e9c0 3300 	strd	r3, r3, [r0]
 800b332:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b336:	6083      	str	r3, [r0, #8]
 800b338:	8181      	strh	r1, [r0, #12]
 800b33a:	6643      	str	r3, [r0, #100]	@ 0x64
 800b33c:	81c2      	strh	r2, [r0, #14]
 800b33e:	6183      	str	r3, [r0, #24]
 800b340:	4619      	mov	r1, r3
 800b342:	2208      	movs	r2, #8
 800b344:	305c      	adds	r0, #92	@ 0x5c
 800b346:	f000 f906 	bl	800b556 <memset>
 800b34a:	4b0d      	ldr	r3, [pc, #52]	@ (800b380 <std+0x58>)
 800b34c:	6263      	str	r3, [r4, #36]	@ 0x24
 800b34e:	4b0d      	ldr	r3, [pc, #52]	@ (800b384 <std+0x5c>)
 800b350:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b352:	4b0d      	ldr	r3, [pc, #52]	@ (800b388 <std+0x60>)
 800b354:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b356:	4b0d      	ldr	r3, [pc, #52]	@ (800b38c <std+0x64>)
 800b358:	6323      	str	r3, [r4, #48]	@ 0x30
 800b35a:	4b0d      	ldr	r3, [pc, #52]	@ (800b390 <std+0x68>)
 800b35c:	6224      	str	r4, [r4, #32]
 800b35e:	429c      	cmp	r4, r3
 800b360:	d006      	beq.n	800b370 <std+0x48>
 800b362:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b366:	4294      	cmp	r4, r2
 800b368:	d002      	beq.n	800b370 <std+0x48>
 800b36a:	33d0      	adds	r3, #208	@ 0xd0
 800b36c:	429c      	cmp	r4, r3
 800b36e:	d105      	bne.n	800b37c <std+0x54>
 800b370:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b374:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b378:	f000 b9ba 	b.w	800b6f0 <__retarget_lock_init_recursive>
 800b37c:	bd10      	pop	{r4, pc}
 800b37e:	bf00      	nop
 800b380:	0800b4d1 	.word	0x0800b4d1
 800b384:	0800b4f3 	.word	0x0800b4f3
 800b388:	0800b52b 	.word	0x0800b52b
 800b38c:	0800b54f 	.word	0x0800b54f
 800b390:	200091d4 	.word	0x200091d4

0800b394 <stdio_exit_handler>:
 800b394:	4a02      	ldr	r2, [pc, #8]	@ (800b3a0 <stdio_exit_handler+0xc>)
 800b396:	4903      	ldr	r1, [pc, #12]	@ (800b3a4 <stdio_exit_handler+0x10>)
 800b398:	4803      	ldr	r0, [pc, #12]	@ (800b3a8 <stdio_exit_handler+0x14>)
 800b39a:	f000 b87b 	b.w	800b494 <_fwalk_sglue>
 800b39e:	bf00      	nop
 800b3a0:	20000018 	.word	0x20000018
 800b3a4:	0800bf05 	.word	0x0800bf05
 800b3a8:	20000028 	.word	0x20000028

0800b3ac <cleanup_stdio>:
 800b3ac:	6841      	ldr	r1, [r0, #4]
 800b3ae:	4b0c      	ldr	r3, [pc, #48]	@ (800b3e0 <cleanup_stdio+0x34>)
 800b3b0:	4299      	cmp	r1, r3
 800b3b2:	b510      	push	{r4, lr}
 800b3b4:	4604      	mov	r4, r0
 800b3b6:	d001      	beq.n	800b3bc <cleanup_stdio+0x10>
 800b3b8:	f000 fda4 	bl	800bf04 <_fflush_r>
 800b3bc:	68a1      	ldr	r1, [r4, #8]
 800b3be:	4b09      	ldr	r3, [pc, #36]	@ (800b3e4 <cleanup_stdio+0x38>)
 800b3c0:	4299      	cmp	r1, r3
 800b3c2:	d002      	beq.n	800b3ca <cleanup_stdio+0x1e>
 800b3c4:	4620      	mov	r0, r4
 800b3c6:	f000 fd9d 	bl	800bf04 <_fflush_r>
 800b3ca:	68e1      	ldr	r1, [r4, #12]
 800b3cc:	4b06      	ldr	r3, [pc, #24]	@ (800b3e8 <cleanup_stdio+0x3c>)
 800b3ce:	4299      	cmp	r1, r3
 800b3d0:	d004      	beq.n	800b3dc <cleanup_stdio+0x30>
 800b3d2:	4620      	mov	r0, r4
 800b3d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b3d8:	f000 bd94 	b.w	800bf04 <_fflush_r>
 800b3dc:	bd10      	pop	{r4, pc}
 800b3de:	bf00      	nop
 800b3e0:	200091d4 	.word	0x200091d4
 800b3e4:	2000923c 	.word	0x2000923c
 800b3e8:	200092a4 	.word	0x200092a4

0800b3ec <global_stdio_init.part.0>:
 800b3ec:	b510      	push	{r4, lr}
 800b3ee:	4b0b      	ldr	r3, [pc, #44]	@ (800b41c <global_stdio_init.part.0+0x30>)
 800b3f0:	4c0b      	ldr	r4, [pc, #44]	@ (800b420 <global_stdio_init.part.0+0x34>)
 800b3f2:	4a0c      	ldr	r2, [pc, #48]	@ (800b424 <global_stdio_init.part.0+0x38>)
 800b3f4:	601a      	str	r2, [r3, #0]
 800b3f6:	4620      	mov	r0, r4
 800b3f8:	2200      	movs	r2, #0
 800b3fa:	2104      	movs	r1, #4
 800b3fc:	f7ff ff94 	bl	800b328 <std>
 800b400:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b404:	2201      	movs	r2, #1
 800b406:	2109      	movs	r1, #9
 800b408:	f7ff ff8e 	bl	800b328 <std>
 800b40c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b410:	2202      	movs	r2, #2
 800b412:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b416:	2112      	movs	r1, #18
 800b418:	f7ff bf86 	b.w	800b328 <std>
 800b41c:	2000930c 	.word	0x2000930c
 800b420:	200091d4 	.word	0x200091d4
 800b424:	0800b395 	.word	0x0800b395

0800b428 <__sfp_lock_acquire>:
 800b428:	4801      	ldr	r0, [pc, #4]	@ (800b430 <__sfp_lock_acquire+0x8>)
 800b42a:	f000 b962 	b.w	800b6f2 <__retarget_lock_acquire_recursive>
 800b42e:	bf00      	nop
 800b430:	20009316 	.word	0x20009316

0800b434 <__sfp_lock_release>:
 800b434:	4801      	ldr	r0, [pc, #4]	@ (800b43c <__sfp_lock_release+0x8>)
 800b436:	f000 b95d 	b.w	800b6f4 <__retarget_lock_release_recursive>
 800b43a:	bf00      	nop
 800b43c:	20009316 	.word	0x20009316

0800b440 <__sinit>:
 800b440:	b510      	push	{r4, lr}
 800b442:	4604      	mov	r4, r0
 800b444:	f7ff fff0 	bl	800b428 <__sfp_lock_acquire>
 800b448:	6a23      	ldr	r3, [r4, #32]
 800b44a:	b11b      	cbz	r3, 800b454 <__sinit+0x14>
 800b44c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b450:	f7ff bff0 	b.w	800b434 <__sfp_lock_release>
 800b454:	4b04      	ldr	r3, [pc, #16]	@ (800b468 <__sinit+0x28>)
 800b456:	6223      	str	r3, [r4, #32]
 800b458:	4b04      	ldr	r3, [pc, #16]	@ (800b46c <__sinit+0x2c>)
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d1f5      	bne.n	800b44c <__sinit+0xc>
 800b460:	f7ff ffc4 	bl	800b3ec <global_stdio_init.part.0>
 800b464:	e7f2      	b.n	800b44c <__sinit+0xc>
 800b466:	bf00      	nop
 800b468:	0800b3ad 	.word	0x0800b3ad
 800b46c:	2000930c 	.word	0x2000930c

0800b470 <fiprintf>:
 800b470:	b40e      	push	{r1, r2, r3}
 800b472:	b503      	push	{r0, r1, lr}
 800b474:	4601      	mov	r1, r0
 800b476:	ab03      	add	r3, sp, #12
 800b478:	4805      	ldr	r0, [pc, #20]	@ (800b490 <fiprintf+0x20>)
 800b47a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b47e:	6800      	ldr	r0, [r0, #0]
 800b480:	9301      	str	r3, [sp, #4]
 800b482:	f000 fa17 	bl	800b8b4 <_vfiprintf_r>
 800b486:	b002      	add	sp, #8
 800b488:	f85d eb04 	ldr.w	lr, [sp], #4
 800b48c:	b003      	add	sp, #12
 800b48e:	4770      	bx	lr
 800b490:	20000024 	.word	0x20000024

0800b494 <_fwalk_sglue>:
 800b494:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b498:	4607      	mov	r7, r0
 800b49a:	4688      	mov	r8, r1
 800b49c:	4614      	mov	r4, r2
 800b49e:	2600      	movs	r6, #0
 800b4a0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b4a4:	f1b9 0901 	subs.w	r9, r9, #1
 800b4a8:	d505      	bpl.n	800b4b6 <_fwalk_sglue+0x22>
 800b4aa:	6824      	ldr	r4, [r4, #0]
 800b4ac:	2c00      	cmp	r4, #0
 800b4ae:	d1f7      	bne.n	800b4a0 <_fwalk_sglue+0xc>
 800b4b0:	4630      	mov	r0, r6
 800b4b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b4b6:	89ab      	ldrh	r3, [r5, #12]
 800b4b8:	2b01      	cmp	r3, #1
 800b4ba:	d907      	bls.n	800b4cc <_fwalk_sglue+0x38>
 800b4bc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b4c0:	3301      	adds	r3, #1
 800b4c2:	d003      	beq.n	800b4cc <_fwalk_sglue+0x38>
 800b4c4:	4629      	mov	r1, r5
 800b4c6:	4638      	mov	r0, r7
 800b4c8:	47c0      	blx	r8
 800b4ca:	4306      	orrs	r6, r0
 800b4cc:	3568      	adds	r5, #104	@ 0x68
 800b4ce:	e7e9      	b.n	800b4a4 <_fwalk_sglue+0x10>

0800b4d0 <__sread>:
 800b4d0:	b510      	push	{r4, lr}
 800b4d2:	460c      	mov	r4, r1
 800b4d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b4d8:	f000 f898 	bl	800b60c <_read_r>
 800b4dc:	2800      	cmp	r0, #0
 800b4de:	bfab      	itete	ge
 800b4e0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b4e2:	89a3      	ldrhlt	r3, [r4, #12]
 800b4e4:	181b      	addge	r3, r3, r0
 800b4e6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b4ea:	bfac      	ite	ge
 800b4ec:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b4ee:	81a3      	strhlt	r3, [r4, #12]
 800b4f0:	bd10      	pop	{r4, pc}

0800b4f2 <__swrite>:
 800b4f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b4f6:	461f      	mov	r7, r3
 800b4f8:	898b      	ldrh	r3, [r1, #12]
 800b4fa:	05db      	lsls	r3, r3, #23
 800b4fc:	4605      	mov	r5, r0
 800b4fe:	460c      	mov	r4, r1
 800b500:	4616      	mov	r6, r2
 800b502:	d505      	bpl.n	800b510 <__swrite+0x1e>
 800b504:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b508:	2302      	movs	r3, #2
 800b50a:	2200      	movs	r2, #0
 800b50c:	f000 f86c 	bl	800b5e8 <_lseek_r>
 800b510:	89a3      	ldrh	r3, [r4, #12]
 800b512:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b516:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b51a:	81a3      	strh	r3, [r4, #12]
 800b51c:	4632      	mov	r2, r6
 800b51e:	463b      	mov	r3, r7
 800b520:	4628      	mov	r0, r5
 800b522:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b526:	f000 b8a7 	b.w	800b678 <_write_r>

0800b52a <__sseek>:
 800b52a:	b510      	push	{r4, lr}
 800b52c:	460c      	mov	r4, r1
 800b52e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b532:	f000 f859 	bl	800b5e8 <_lseek_r>
 800b536:	1c43      	adds	r3, r0, #1
 800b538:	89a3      	ldrh	r3, [r4, #12]
 800b53a:	bf15      	itete	ne
 800b53c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b53e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b542:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b546:	81a3      	strheq	r3, [r4, #12]
 800b548:	bf18      	it	ne
 800b54a:	81a3      	strhne	r3, [r4, #12]
 800b54c:	bd10      	pop	{r4, pc}

0800b54e <__sclose>:
 800b54e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b552:	f000 b839 	b.w	800b5c8 <_close_r>

0800b556 <memset>:
 800b556:	4402      	add	r2, r0
 800b558:	4603      	mov	r3, r0
 800b55a:	4293      	cmp	r3, r2
 800b55c:	d100      	bne.n	800b560 <memset+0xa>
 800b55e:	4770      	bx	lr
 800b560:	f803 1b01 	strb.w	r1, [r3], #1
 800b564:	e7f9      	b.n	800b55a <memset+0x4>

0800b566 <_raise_r>:
 800b566:	291f      	cmp	r1, #31
 800b568:	b538      	push	{r3, r4, r5, lr}
 800b56a:	4605      	mov	r5, r0
 800b56c:	460c      	mov	r4, r1
 800b56e:	d904      	bls.n	800b57a <_raise_r+0x14>
 800b570:	2316      	movs	r3, #22
 800b572:	6003      	str	r3, [r0, #0]
 800b574:	f04f 30ff 	mov.w	r0, #4294967295
 800b578:	bd38      	pop	{r3, r4, r5, pc}
 800b57a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b57c:	b112      	cbz	r2, 800b584 <_raise_r+0x1e>
 800b57e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b582:	b94b      	cbnz	r3, 800b598 <_raise_r+0x32>
 800b584:	4628      	mov	r0, r5
 800b586:	f000 f865 	bl	800b654 <_getpid_r>
 800b58a:	4622      	mov	r2, r4
 800b58c:	4601      	mov	r1, r0
 800b58e:	4628      	mov	r0, r5
 800b590:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b594:	f000 b84c 	b.w	800b630 <_kill_r>
 800b598:	2b01      	cmp	r3, #1
 800b59a:	d00a      	beq.n	800b5b2 <_raise_r+0x4c>
 800b59c:	1c59      	adds	r1, r3, #1
 800b59e:	d103      	bne.n	800b5a8 <_raise_r+0x42>
 800b5a0:	2316      	movs	r3, #22
 800b5a2:	6003      	str	r3, [r0, #0]
 800b5a4:	2001      	movs	r0, #1
 800b5a6:	e7e7      	b.n	800b578 <_raise_r+0x12>
 800b5a8:	2100      	movs	r1, #0
 800b5aa:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b5ae:	4620      	mov	r0, r4
 800b5b0:	4798      	blx	r3
 800b5b2:	2000      	movs	r0, #0
 800b5b4:	e7e0      	b.n	800b578 <_raise_r+0x12>
	...

0800b5b8 <raise>:
 800b5b8:	4b02      	ldr	r3, [pc, #8]	@ (800b5c4 <raise+0xc>)
 800b5ba:	4601      	mov	r1, r0
 800b5bc:	6818      	ldr	r0, [r3, #0]
 800b5be:	f7ff bfd2 	b.w	800b566 <_raise_r>
 800b5c2:	bf00      	nop
 800b5c4:	20000024 	.word	0x20000024

0800b5c8 <_close_r>:
 800b5c8:	b538      	push	{r3, r4, r5, lr}
 800b5ca:	4d06      	ldr	r5, [pc, #24]	@ (800b5e4 <_close_r+0x1c>)
 800b5cc:	2300      	movs	r3, #0
 800b5ce:	4604      	mov	r4, r0
 800b5d0:	4608      	mov	r0, r1
 800b5d2:	602b      	str	r3, [r5, #0]
 800b5d4:	f7f6 f816 	bl	8001604 <_close>
 800b5d8:	1c43      	adds	r3, r0, #1
 800b5da:	d102      	bne.n	800b5e2 <_close_r+0x1a>
 800b5dc:	682b      	ldr	r3, [r5, #0]
 800b5de:	b103      	cbz	r3, 800b5e2 <_close_r+0x1a>
 800b5e0:	6023      	str	r3, [r4, #0]
 800b5e2:	bd38      	pop	{r3, r4, r5, pc}
 800b5e4:	20009310 	.word	0x20009310

0800b5e8 <_lseek_r>:
 800b5e8:	b538      	push	{r3, r4, r5, lr}
 800b5ea:	4d07      	ldr	r5, [pc, #28]	@ (800b608 <_lseek_r+0x20>)
 800b5ec:	4604      	mov	r4, r0
 800b5ee:	4608      	mov	r0, r1
 800b5f0:	4611      	mov	r1, r2
 800b5f2:	2200      	movs	r2, #0
 800b5f4:	602a      	str	r2, [r5, #0]
 800b5f6:	461a      	mov	r2, r3
 800b5f8:	f7f6 f80e 	bl	8001618 <_lseek>
 800b5fc:	1c43      	adds	r3, r0, #1
 800b5fe:	d102      	bne.n	800b606 <_lseek_r+0x1e>
 800b600:	682b      	ldr	r3, [r5, #0]
 800b602:	b103      	cbz	r3, 800b606 <_lseek_r+0x1e>
 800b604:	6023      	str	r3, [r4, #0]
 800b606:	bd38      	pop	{r3, r4, r5, pc}
 800b608:	20009310 	.word	0x20009310

0800b60c <_read_r>:
 800b60c:	b538      	push	{r3, r4, r5, lr}
 800b60e:	4d07      	ldr	r5, [pc, #28]	@ (800b62c <_read_r+0x20>)
 800b610:	4604      	mov	r4, r0
 800b612:	4608      	mov	r0, r1
 800b614:	4611      	mov	r1, r2
 800b616:	2200      	movs	r2, #0
 800b618:	602a      	str	r2, [r5, #0]
 800b61a:	461a      	mov	r2, r3
 800b61c:	f7f5 ffd6 	bl	80015cc <_read>
 800b620:	1c43      	adds	r3, r0, #1
 800b622:	d102      	bne.n	800b62a <_read_r+0x1e>
 800b624:	682b      	ldr	r3, [r5, #0]
 800b626:	b103      	cbz	r3, 800b62a <_read_r+0x1e>
 800b628:	6023      	str	r3, [r4, #0]
 800b62a:	bd38      	pop	{r3, r4, r5, pc}
 800b62c:	20009310 	.word	0x20009310

0800b630 <_kill_r>:
 800b630:	b538      	push	{r3, r4, r5, lr}
 800b632:	4d07      	ldr	r5, [pc, #28]	@ (800b650 <_kill_r+0x20>)
 800b634:	2300      	movs	r3, #0
 800b636:	4604      	mov	r4, r0
 800b638:	4608      	mov	r0, r1
 800b63a:	4611      	mov	r1, r2
 800b63c:	602b      	str	r3, [r5, #0]
 800b63e:	f7f5 ffb7 	bl	80015b0 <_kill>
 800b642:	1c43      	adds	r3, r0, #1
 800b644:	d102      	bne.n	800b64c <_kill_r+0x1c>
 800b646:	682b      	ldr	r3, [r5, #0]
 800b648:	b103      	cbz	r3, 800b64c <_kill_r+0x1c>
 800b64a:	6023      	str	r3, [r4, #0]
 800b64c:	bd38      	pop	{r3, r4, r5, pc}
 800b64e:	bf00      	nop
 800b650:	20009310 	.word	0x20009310

0800b654 <_getpid_r>:
 800b654:	f7f5 bfaa 	b.w	80015ac <_getpid>

0800b658 <_sbrk_r>:
 800b658:	b538      	push	{r3, r4, r5, lr}
 800b65a:	4d06      	ldr	r5, [pc, #24]	@ (800b674 <_sbrk_r+0x1c>)
 800b65c:	2300      	movs	r3, #0
 800b65e:	4604      	mov	r4, r0
 800b660:	4608      	mov	r0, r1
 800b662:	602b      	str	r3, [r5, #0]
 800b664:	f7f5 ffda 	bl	800161c <_sbrk>
 800b668:	1c43      	adds	r3, r0, #1
 800b66a:	d102      	bne.n	800b672 <_sbrk_r+0x1a>
 800b66c:	682b      	ldr	r3, [r5, #0]
 800b66e:	b103      	cbz	r3, 800b672 <_sbrk_r+0x1a>
 800b670:	6023      	str	r3, [r4, #0]
 800b672:	bd38      	pop	{r3, r4, r5, pc}
 800b674:	20009310 	.word	0x20009310

0800b678 <_write_r>:
 800b678:	b538      	push	{r3, r4, r5, lr}
 800b67a:	4d07      	ldr	r5, [pc, #28]	@ (800b698 <_write_r+0x20>)
 800b67c:	4604      	mov	r4, r0
 800b67e:	4608      	mov	r0, r1
 800b680:	4611      	mov	r1, r2
 800b682:	2200      	movs	r2, #0
 800b684:	602a      	str	r2, [r5, #0]
 800b686:	461a      	mov	r2, r3
 800b688:	f7f5 ffae 	bl	80015e8 <_write>
 800b68c:	1c43      	adds	r3, r0, #1
 800b68e:	d102      	bne.n	800b696 <_write_r+0x1e>
 800b690:	682b      	ldr	r3, [r5, #0]
 800b692:	b103      	cbz	r3, 800b696 <_write_r+0x1e>
 800b694:	6023      	str	r3, [r4, #0]
 800b696:	bd38      	pop	{r3, r4, r5, pc}
 800b698:	20009310 	.word	0x20009310

0800b69c <__errno>:
 800b69c:	4b01      	ldr	r3, [pc, #4]	@ (800b6a4 <__errno+0x8>)
 800b69e:	6818      	ldr	r0, [r3, #0]
 800b6a0:	4770      	bx	lr
 800b6a2:	bf00      	nop
 800b6a4:	20000024 	.word	0x20000024

0800b6a8 <__libc_init_array>:
 800b6a8:	b570      	push	{r4, r5, r6, lr}
 800b6aa:	4d0d      	ldr	r5, [pc, #52]	@ (800b6e0 <__libc_init_array+0x38>)
 800b6ac:	4c0d      	ldr	r4, [pc, #52]	@ (800b6e4 <__libc_init_array+0x3c>)
 800b6ae:	1b64      	subs	r4, r4, r5
 800b6b0:	10a4      	asrs	r4, r4, #2
 800b6b2:	2600      	movs	r6, #0
 800b6b4:	42a6      	cmp	r6, r4
 800b6b6:	d109      	bne.n	800b6cc <__libc_init_array+0x24>
 800b6b8:	4d0b      	ldr	r5, [pc, #44]	@ (800b6e8 <__libc_init_array+0x40>)
 800b6ba:	4c0c      	ldr	r4, [pc, #48]	@ (800b6ec <__libc_init_array+0x44>)
 800b6bc:	f000 fd62 	bl	800c184 <_init>
 800b6c0:	1b64      	subs	r4, r4, r5
 800b6c2:	10a4      	asrs	r4, r4, #2
 800b6c4:	2600      	movs	r6, #0
 800b6c6:	42a6      	cmp	r6, r4
 800b6c8:	d105      	bne.n	800b6d6 <__libc_init_array+0x2e>
 800b6ca:	bd70      	pop	{r4, r5, r6, pc}
 800b6cc:	f855 3b04 	ldr.w	r3, [r5], #4
 800b6d0:	4798      	blx	r3
 800b6d2:	3601      	adds	r6, #1
 800b6d4:	e7ee      	b.n	800b6b4 <__libc_init_array+0xc>
 800b6d6:	f855 3b04 	ldr.w	r3, [r5], #4
 800b6da:	4798      	blx	r3
 800b6dc:	3601      	adds	r6, #1
 800b6de:	e7f2      	b.n	800b6c6 <__libc_init_array+0x1e>
 800b6e0:	0800cd54 	.word	0x0800cd54
 800b6e4:	0800cd54 	.word	0x0800cd54
 800b6e8:	0800cd54 	.word	0x0800cd54
 800b6ec:	0800cd6c 	.word	0x0800cd6c

0800b6f0 <__retarget_lock_init_recursive>:
 800b6f0:	4770      	bx	lr

0800b6f2 <__retarget_lock_acquire_recursive>:
 800b6f2:	4770      	bx	lr

0800b6f4 <__retarget_lock_release_recursive>:
 800b6f4:	4770      	bx	lr

0800b6f6 <memcpy>:
 800b6f6:	440a      	add	r2, r1
 800b6f8:	4291      	cmp	r1, r2
 800b6fa:	f100 33ff 	add.w	r3, r0, #4294967295
 800b6fe:	d100      	bne.n	800b702 <memcpy+0xc>
 800b700:	4770      	bx	lr
 800b702:	b510      	push	{r4, lr}
 800b704:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b708:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b70c:	4291      	cmp	r1, r2
 800b70e:	d1f9      	bne.n	800b704 <memcpy+0xe>
 800b710:	bd10      	pop	{r4, pc}
	...

0800b714 <__register_exitproc>:
 800b714:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b718:	4d27      	ldr	r5, [pc, #156]	@ (800b7b8 <__register_exitproc+0xa4>)
 800b71a:	4607      	mov	r7, r0
 800b71c:	6828      	ldr	r0, [r5, #0]
 800b71e:	4691      	mov	r9, r2
 800b720:	460e      	mov	r6, r1
 800b722:	4698      	mov	r8, r3
 800b724:	f7ff ffe5 	bl	800b6f2 <__retarget_lock_acquire_recursive>
 800b728:	4a24      	ldr	r2, [pc, #144]	@ (800b7bc <__register_exitproc+0xa8>)
 800b72a:	6814      	ldr	r4, [r2, #0]
 800b72c:	b93c      	cbnz	r4, 800b73e <__register_exitproc+0x2a>
 800b72e:	4b24      	ldr	r3, [pc, #144]	@ (800b7c0 <__register_exitproc+0xac>)
 800b730:	6013      	str	r3, [r2, #0]
 800b732:	4a24      	ldr	r2, [pc, #144]	@ (800b7c4 <__register_exitproc+0xb0>)
 800b734:	b112      	cbz	r2, 800b73c <__register_exitproc+0x28>
 800b736:	6812      	ldr	r2, [r2, #0]
 800b738:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 800b73c:	4c20      	ldr	r4, [pc, #128]	@ (800b7c0 <__register_exitproc+0xac>)
 800b73e:	6863      	ldr	r3, [r4, #4]
 800b740:	2b1f      	cmp	r3, #31
 800b742:	dd06      	ble.n	800b752 <__register_exitproc+0x3e>
 800b744:	6828      	ldr	r0, [r5, #0]
 800b746:	f7ff ffd5 	bl	800b6f4 <__retarget_lock_release_recursive>
 800b74a:	f04f 30ff 	mov.w	r0, #4294967295
 800b74e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b752:	b32f      	cbz	r7, 800b7a0 <__register_exitproc+0x8c>
 800b754:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88
 800b758:	b968      	cbnz	r0, 800b776 <__register_exitproc+0x62>
 800b75a:	4b1b      	ldr	r3, [pc, #108]	@ (800b7c8 <__register_exitproc+0xb4>)
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d0f1      	beq.n	800b744 <__register_exitproc+0x30>
 800b760:	f44f 7084 	mov.w	r0, #264	@ 0x108
 800b764:	f7ff fd22 	bl	800b1ac <malloc>
 800b768:	2800      	cmp	r0, #0
 800b76a:	d0eb      	beq.n	800b744 <__register_exitproc+0x30>
 800b76c:	2300      	movs	r3, #0
 800b76e:	e9c0 3340 	strd	r3, r3, [r0, #256]	@ 0x100
 800b772:	f8c4 0088 	str.w	r0, [r4, #136]	@ 0x88
 800b776:	6863      	ldr	r3, [r4, #4]
 800b778:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 800b77c:	2201      	movs	r2, #1
 800b77e:	409a      	lsls	r2, r3
 800b780:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 800b784:	f8d0 3100 	ldr.w	r3, [r0, #256]	@ 0x100
 800b788:	4313      	orrs	r3, r2
 800b78a:	f8c0 3100 	str.w	r3, [r0, #256]	@ 0x100
 800b78e:	2f02      	cmp	r7, #2
 800b790:	f8c1 8080 	str.w	r8, [r1, #128]	@ 0x80
 800b794:	bf02      	ittt	eq
 800b796:	f8d0 3104 	ldreq.w	r3, [r0, #260]	@ 0x104
 800b79a:	4313      	orreq	r3, r2
 800b79c:	f8c0 3104 	streq.w	r3, [r0, #260]	@ 0x104
 800b7a0:	6863      	ldr	r3, [r4, #4]
 800b7a2:	6828      	ldr	r0, [r5, #0]
 800b7a4:	1c5a      	adds	r2, r3, #1
 800b7a6:	3302      	adds	r3, #2
 800b7a8:	6062      	str	r2, [r4, #4]
 800b7aa:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 800b7ae:	f7ff ffa1 	bl	800b6f4 <__retarget_lock_release_recursive>
 800b7b2:	2000      	movs	r0, #0
 800b7b4:	e7cb      	b.n	800b74e <__register_exitproc+0x3a>
 800b7b6:	bf00      	nop
 800b7b8:	20000074 	.word	0x20000074
 800b7bc:	200093a4 	.word	0x200093a4
 800b7c0:	20009318 	.word	0x20009318
 800b7c4:	0800cb88 	.word	0x0800cb88
 800b7c8:	0800b1ad 	.word	0x0800b1ad

0800b7cc <_free_r>:
 800b7cc:	b538      	push	{r3, r4, r5, lr}
 800b7ce:	4605      	mov	r5, r0
 800b7d0:	2900      	cmp	r1, #0
 800b7d2:	d041      	beq.n	800b858 <_free_r+0x8c>
 800b7d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b7d8:	1f0c      	subs	r4, r1, #4
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	bfb8      	it	lt
 800b7de:	18e4      	addlt	r4, r4, r3
 800b7e0:	f7ff fd96 	bl	800b310 <__malloc_lock>
 800b7e4:	4a1d      	ldr	r2, [pc, #116]	@ (800b85c <_free_r+0x90>)
 800b7e6:	6813      	ldr	r3, [r2, #0]
 800b7e8:	b933      	cbnz	r3, 800b7f8 <_free_r+0x2c>
 800b7ea:	6063      	str	r3, [r4, #4]
 800b7ec:	6014      	str	r4, [r2, #0]
 800b7ee:	4628      	mov	r0, r5
 800b7f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b7f4:	f7ff bd92 	b.w	800b31c <__malloc_unlock>
 800b7f8:	42a3      	cmp	r3, r4
 800b7fa:	d908      	bls.n	800b80e <_free_r+0x42>
 800b7fc:	6820      	ldr	r0, [r4, #0]
 800b7fe:	1821      	adds	r1, r4, r0
 800b800:	428b      	cmp	r3, r1
 800b802:	bf01      	itttt	eq
 800b804:	6819      	ldreq	r1, [r3, #0]
 800b806:	685b      	ldreq	r3, [r3, #4]
 800b808:	1809      	addeq	r1, r1, r0
 800b80a:	6021      	streq	r1, [r4, #0]
 800b80c:	e7ed      	b.n	800b7ea <_free_r+0x1e>
 800b80e:	461a      	mov	r2, r3
 800b810:	685b      	ldr	r3, [r3, #4]
 800b812:	b10b      	cbz	r3, 800b818 <_free_r+0x4c>
 800b814:	42a3      	cmp	r3, r4
 800b816:	d9fa      	bls.n	800b80e <_free_r+0x42>
 800b818:	6811      	ldr	r1, [r2, #0]
 800b81a:	1850      	adds	r0, r2, r1
 800b81c:	42a0      	cmp	r0, r4
 800b81e:	d10b      	bne.n	800b838 <_free_r+0x6c>
 800b820:	6820      	ldr	r0, [r4, #0]
 800b822:	4401      	add	r1, r0
 800b824:	1850      	adds	r0, r2, r1
 800b826:	4283      	cmp	r3, r0
 800b828:	6011      	str	r1, [r2, #0]
 800b82a:	d1e0      	bne.n	800b7ee <_free_r+0x22>
 800b82c:	6818      	ldr	r0, [r3, #0]
 800b82e:	685b      	ldr	r3, [r3, #4]
 800b830:	6053      	str	r3, [r2, #4]
 800b832:	4408      	add	r0, r1
 800b834:	6010      	str	r0, [r2, #0]
 800b836:	e7da      	b.n	800b7ee <_free_r+0x22>
 800b838:	d902      	bls.n	800b840 <_free_r+0x74>
 800b83a:	230c      	movs	r3, #12
 800b83c:	602b      	str	r3, [r5, #0]
 800b83e:	e7d6      	b.n	800b7ee <_free_r+0x22>
 800b840:	6820      	ldr	r0, [r4, #0]
 800b842:	1821      	adds	r1, r4, r0
 800b844:	428b      	cmp	r3, r1
 800b846:	bf04      	itt	eq
 800b848:	6819      	ldreq	r1, [r3, #0]
 800b84a:	685b      	ldreq	r3, [r3, #4]
 800b84c:	6063      	str	r3, [r4, #4]
 800b84e:	bf04      	itt	eq
 800b850:	1809      	addeq	r1, r1, r0
 800b852:	6021      	streq	r1, [r4, #0]
 800b854:	6054      	str	r4, [r2, #4]
 800b856:	e7ca      	b.n	800b7ee <_free_r+0x22>
 800b858:	bd38      	pop	{r3, r4, r5, pc}
 800b85a:	bf00      	nop
 800b85c:	200091d0 	.word	0x200091d0

0800b860 <__sfputc_r>:
 800b860:	6893      	ldr	r3, [r2, #8]
 800b862:	3b01      	subs	r3, #1
 800b864:	2b00      	cmp	r3, #0
 800b866:	b410      	push	{r4}
 800b868:	6093      	str	r3, [r2, #8]
 800b86a:	da08      	bge.n	800b87e <__sfputc_r+0x1e>
 800b86c:	6994      	ldr	r4, [r2, #24]
 800b86e:	42a3      	cmp	r3, r4
 800b870:	db01      	blt.n	800b876 <__sfputc_r+0x16>
 800b872:	290a      	cmp	r1, #10
 800b874:	d103      	bne.n	800b87e <__sfputc_r+0x1e>
 800b876:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b87a:	f000 bb6b 	b.w	800bf54 <__swbuf_r>
 800b87e:	6813      	ldr	r3, [r2, #0]
 800b880:	1c58      	adds	r0, r3, #1
 800b882:	6010      	str	r0, [r2, #0]
 800b884:	7019      	strb	r1, [r3, #0]
 800b886:	4608      	mov	r0, r1
 800b888:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b88c:	4770      	bx	lr

0800b88e <__sfputs_r>:
 800b88e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b890:	4606      	mov	r6, r0
 800b892:	460f      	mov	r7, r1
 800b894:	4614      	mov	r4, r2
 800b896:	18d5      	adds	r5, r2, r3
 800b898:	42ac      	cmp	r4, r5
 800b89a:	d101      	bne.n	800b8a0 <__sfputs_r+0x12>
 800b89c:	2000      	movs	r0, #0
 800b89e:	e007      	b.n	800b8b0 <__sfputs_r+0x22>
 800b8a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b8a4:	463a      	mov	r2, r7
 800b8a6:	4630      	mov	r0, r6
 800b8a8:	f7ff ffda 	bl	800b860 <__sfputc_r>
 800b8ac:	1c43      	adds	r3, r0, #1
 800b8ae:	d1f3      	bne.n	800b898 <__sfputs_r+0xa>
 800b8b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b8b4 <_vfiprintf_r>:
 800b8b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8b8:	460d      	mov	r5, r1
 800b8ba:	b09d      	sub	sp, #116	@ 0x74
 800b8bc:	4614      	mov	r4, r2
 800b8be:	4698      	mov	r8, r3
 800b8c0:	4606      	mov	r6, r0
 800b8c2:	b118      	cbz	r0, 800b8cc <_vfiprintf_r+0x18>
 800b8c4:	6a03      	ldr	r3, [r0, #32]
 800b8c6:	b90b      	cbnz	r3, 800b8cc <_vfiprintf_r+0x18>
 800b8c8:	f7ff fdba 	bl	800b440 <__sinit>
 800b8cc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b8ce:	07d9      	lsls	r1, r3, #31
 800b8d0:	d405      	bmi.n	800b8de <_vfiprintf_r+0x2a>
 800b8d2:	89ab      	ldrh	r3, [r5, #12]
 800b8d4:	059a      	lsls	r2, r3, #22
 800b8d6:	d402      	bmi.n	800b8de <_vfiprintf_r+0x2a>
 800b8d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b8da:	f7ff ff0a 	bl	800b6f2 <__retarget_lock_acquire_recursive>
 800b8de:	89ab      	ldrh	r3, [r5, #12]
 800b8e0:	071b      	lsls	r3, r3, #28
 800b8e2:	d501      	bpl.n	800b8e8 <_vfiprintf_r+0x34>
 800b8e4:	692b      	ldr	r3, [r5, #16]
 800b8e6:	b99b      	cbnz	r3, 800b910 <_vfiprintf_r+0x5c>
 800b8e8:	4629      	mov	r1, r5
 800b8ea:	4630      	mov	r0, r6
 800b8ec:	f000 fb70 	bl	800bfd0 <__swsetup_r>
 800b8f0:	b170      	cbz	r0, 800b910 <_vfiprintf_r+0x5c>
 800b8f2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b8f4:	07dc      	lsls	r4, r3, #31
 800b8f6:	d504      	bpl.n	800b902 <_vfiprintf_r+0x4e>
 800b8f8:	f04f 30ff 	mov.w	r0, #4294967295
 800b8fc:	b01d      	add	sp, #116	@ 0x74
 800b8fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b902:	89ab      	ldrh	r3, [r5, #12]
 800b904:	0598      	lsls	r0, r3, #22
 800b906:	d4f7      	bmi.n	800b8f8 <_vfiprintf_r+0x44>
 800b908:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b90a:	f7ff fef3 	bl	800b6f4 <__retarget_lock_release_recursive>
 800b90e:	e7f3      	b.n	800b8f8 <_vfiprintf_r+0x44>
 800b910:	2300      	movs	r3, #0
 800b912:	9309      	str	r3, [sp, #36]	@ 0x24
 800b914:	2320      	movs	r3, #32
 800b916:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b91a:	f8cd 800c 	str.w	r8, [sp, #12]
 800b91e:	2330      	movs	r3, #48	@ 0x30
 800b920:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800bad0 <_vfiprintf_r+0x21c>
 800b924:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b928:	f04f 0901 	mov.w	r9, #1
 800b92c:	4623      	mov	r3, r4
 800b92e:	469a      	mov	sl, r3
 800b930:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b934:	b10a      	cbz	r2, 800b93a <_vfiprintf_r+0x86>
 800b936:	2a25      	cmp	r2, #37	@ 0x25
 800b938:	d1f9      	bne.n	800b92e <_vfiprintf_r+0x7a>
 800b93a:	ebba 0b04 	subs.w	fp, sl, r4
 800b93e:	d00b      	beq.n	800b958 <_vfiprintf_r+0xa4>
 800b940:	465b      	mov	r3, fp
 800b942:	4622      	mov	r2, r4
 800b944:	4629      	mov	r1, r5
 800b946:	4630      	mov	r0, r6
 800b948:	f7ff ffa1 	bl	800b88e <__sfputs_r>
 800b94c:	3001      	adds	r0, #1
 800b94e:	f000 80a7 	beq.w	800baa0 <_vfiprintf_r+0x1ec>
 800b952:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b954:	445a      	add	r2, fp
 800b956:	9209      	str	r2, [sp, #36]	@ 0x24
 800b958:	f89a 3000 	ldrb.w	r3, [sl]
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	f000 809f 	beq.w	800baa0 <_vfiprintf_r+0x1ec>
 800b962:	2300      	movs	r3, #0
 800b964:	f04f 32ff 	mov.w	r2, #4294967295
 800b968:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b96c:	f10a 0a01 	add.w	sl, sl, #1
 800b970:	9304      	str	r3, [sp, #16]
 800b972:	9307      	str	r3, [sp, #28]
 800b974:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b978:	931a      	str	r3, [sp, #104]	@ 0x68
 800b97a:	4654      	mov	r4, sl
 800b97c:	2205      	movs	r2, #5
 800b97e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b982:	4853      	ldr	r0, [pc, #332]	@ (800bad0 <_vfiprintf_r+0x21c>)
 800b984:	f7f4 fc44 	bl	8000210 <memchr>
 800b988:	9a04      	ldr	r2, [sp, #16]
 800b98a:	b9d8      	cbnz	r0, 800b9c4 <_vfiprintf_r+0x110>
 800b98c:	06d1      	lsls	r1, r2, #27
 800b98e:	bf44      	itt	mi
 800b990:	2320      	movmi	r3, #32
 800b992:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b996:	0713      	lsls	r3, r2, #28
 800b998:	bf44      	itt	mi
 800b99a:	232b      	movmi	r3, #43	@ 0x2b
 800b99c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b9a0:	f89a 3000 	ldrb.w	r3, [sl]
 800b9a4:	2b2a      	cmp	r3, #42	@ 0x2a
 800b9a6:	d015      	beq.n	800b9d4 <_vfiprintf_r+0x120>
 800b9a8:	9a07      	ldr	r2, [sp, #28]
 800b9aa:	4654      	mov	r4, sl
 800b9ac:	2000      	movs	r0, #0
 800b9ae:	f04f 0c0a 	mov.w	ip, #10
 800b9b2:	4621      	mov	r1, r4
 800b9b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b9b8:	3b30      	subs	r3, #48	@ 0x30
 800b9ba:	2b09      	cmp	r3, #9
 800b9bc:	d94b      	bls.n	800ba56 <_vfiprintf_r+0x1a2>
 800b9be:	b1b0      	cbz	r0, 800b9ee <_vfiprintf_r+0x13a>
 800b9c0:	9207      	str	r2, [sp, #28]
 800b9c2:	e014      	b.n	800b9ee <_vfiprintf_r+0x13a>
 800b9c4:	eba0 0308 	sub.w	r3, r0, r8
 800b9c8:	fa09 f303 	lsl.w	r3, r9, r3
 800b9cc:	4313      	orrs	r3, r2
 800b9ce:	9304      	str	r3, [sp, #16]
 800b9d0:	46a2      	mov	sl, r4
 800b9d2:	e7d2      	b.n	800b97a <_vfiprintf_r+0xc6>
 800b9d4:	9b03      	ldr	r3, [sp, #12]
 800b9d6:	1d19      	adds	r1, r3, #4
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	9103      	str	r1, [sp, #12]
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	bfbb      	ittet	lt
 800b9e0:	425b      	neglt	r3, r3
 800b9e2:	f042 0202 	orrlt.w	r2, r2, #2
 800b9e6:	9307      	strge	r3, [sp, #28]
 800b9e8:	9307      	strlt	r3, [sp, #28]
 800b9ea:	bfb8      	it	lt
 800b9ec:	9204      	strlt	r2, [sp, #16]
 800b9ee:	7823      	ldrb	r3, [r4, #0]
 800b9f0:	2b2e      	cmp	r3, #46	@ 0x2e
 800b9f2:	d10a      	bne.n	800ba0a <_vfiprintf_r+0x156>
 800b9f4:	7863      	ldrb	r3, [r4, #1]
 800b9f6:	2b2a      	cmp	r3, #42	@ 0x2a
 800b9f8:	d132      	bne.n	800ba60 <_vfiprintf_r+0x1ac>
 800b9fa:	9b03      	ldr	r3, [sp, #12]
 800b9fc:	1d1a      	adds	r2, r3, #4
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	9203      	str	r2, [sp, #12]
 800ba02:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ba06:	3402      	adds	r4, #2
 800ba08:	9305      	str	r3, [sp, #20]
 800ba0a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800bae0 <_vfiprintf_r+0x22c>
 800ba0e:	7821      	ldrb	r1, [r4, #0]
 800ba10:	2203      	movs	r2, #3
 800ba12:	4650      	mov	r0, sl
 800ba14:	f7f4 fbfc 	bl	8000210 <memchr>
 800ba18:	b138      	cbz	r0, 800ba2a <_vfiprintf_r+0x176>
 800ba1a:	9b04      	ldr	r3, [sp, #16]
 800ba1c:	eba0 000a 	sub.w	r0, r0, sl
 800ba20:	2240      	movs	r2, #64	@ 0x40
 800ba22:	4082      	lsls	r2, r0
 800ba24:	4313      	orrs	r3, r2
 800ba26:	3401      	adds	r4, #1
 800ba28:	9304      	str	r3, [sp, #16]
 800ba2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba2e:	4829      	ldr	r0, [pc, #164]	@ (800bad4 <_vfiprintf_r+0x220>)
 800ba30:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ba34:	2206      	movs	r2, #6
 800ba36:	f7f4 fbeb 	bl	8000210 <memchr>
 800ba3a:	2800      	cmp	r0, #0
 800ba3c:	d03f      	beq.n	800babe <_vfiprintf_r+0x20a>
 800ba3e:	4b26      	ldr	r3, [pc, #152]	@ (800bad8 <_vfiprintf_r+0x224>)
 800ba40:	bb1b      	cbnz	r3, 800ba8a <_vfiprintf_r+0x1d6>
 800ba42:	9b03      	ldr	r3, [sp, #12]
 800ba44:	3307      	adds	r3, #7
 800ba46:	f023 0307 	bic.w	r3, r3, #7
 800ba4a:	3308      	adds	r3, #8
 800ba4c:	9303      	str	r3, [sp, #12]
 800ba4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba50:	443b      	add	r3, r7
 800ba52:	9309      	str	r3, [sp, #36]	@ 0x24
 800ba54:	e76a      	b.n	800b92c <_vfiprintf_r+0x78>
 800ba56:	fb0c 3202 	mla	r2, ip, r2, r3
 800ba5a:	460c      	mov	r4, r1
 800ba5c:	2001      	movs	r0, #1
 800ba5e:	e7a8      	b.n	800b9b2 <_vfiprintf_r+0xfe>
 800ba60:	2300      	movs	r3, #0
 800ba62:	3401      	adds	r4, #1
 800ba64:	9305      	str	r3, [sp, #20]
 800ba66:	4619      	mov	r1, r3
 800ba68:	f04f 0c0a 	mov.w	ip, #10
 800ba6c:	4620      	mov	r0, r4
 800ba6e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ba72:	3a30      	subs	r2, #48	@ 0x30
 800ba74:	2a09      	cmp	r2, #9
 800ba76:	d903      	bls.n	800ba80 <_vfiprintf_r+0x1cc>
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d0c6      	beq.n	800ba0a <_vfiprintf_r+0x156>
 800ba7c:	9105      	str	r1, [sp, #20]
 800ba7e:	e7c4      	b.n	800ba0a <_vfiprintf_r+0x156>
 800ba80:	fb0c 2101 	mla	r1, ip, r1, r2
 800ba84:	4604      	mov	r4, r0
 800ba86:	2301      	movs	r3, #1
 800ba88:	e7f0      	b.n	800ba6c <_vfiprintf_r+0x1b8>
 800ba8a:	ab03      	add	r3, sp, #12
 800ba8c:	9300      	str	r3, [sp, #0]
 800ba8e:	462a      	mov	r2, r5
 800ba90:	4b12      	ldr	r3, [pc, #72]	@ (800badc <_vfiprintf_r+0x228>)
 800ba92:	a904      	add	r1, sp, #16
 800ba94:	4630      	mov	r0, r6
 800ba96:	f3af 8000 	nop.w
 800ba9a:	4607      	mov	r7, r0
 800ba9c:	1c78      	adds	r0, r7, #1
 800ba9e:	d1d6      	bne.n	800ba4e <_vfiprintf_r+0x19a>
 800baa0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800baa2:	07d9      	lsls	r1, r3, #31
 800baa4:	d405      	bmi.n	800bab2 <_vfiprintf_r+0x1fe>
 800baa6:	89ab      	ldrh	r3, [r5, #12]
 800baa8:	059a      	lsls	r2, r3, #22
 800baaa:	d402      	bmi.n	800bab2 <_vfiprintf_r+0x1fe>
 800baac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800baae:	f7ff fe21 	bl	800b6f4 <__retarget_lock_release_recursive>
 800bab2:	89ab      	ldrh	r3, [r5, #12]
 800bab4:	065b      	lsls	r3, r3, #25
 800bab6:	f53f af1f 	bmi.w	800b8f8 <_vfiprintf_r+0x44>
 800baba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800babc:	e71e      	b.n	800b8fc <_vfiprintf_r+0x48>
 800babe:	ab03      	add	r3, sp, #12
 800bac0:	9300      	str	r3, [sp, #0]
 800bac2:	462a      	mov	r2, r5
 800bac4:	4b05      	ldr	r3, [pc, #20]	@ (800badc <_vfiprintf_r+0x228>)
 800bac6:	a904      	add	r1, sp, #16
 800bac8:	4630      	mov	r0, r6
 800baca:	f000 f879 	bl	800bbc0 <_printf_i>
 800bace:	e7e4      	b.n	800ba9a <_vfiprintf_r+0x1e6>
 800bad0:	0800c825 	.word	0x0800c825
 800bad4:	0800c82f 	.word	0x0800c82f
 800bad8:	00000000 	.word	0x00000000
 800badc:	0800b88f 	.word	0x0800b88f
 800bae0:	0800c82b 	.word	0x0800c82b

0800bae4 <_printf_common>:
 800bae4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bae8:	4616      	mov	r6, r2
 800baea:	4698      	mov	r8, r3
 800baec:	688a      	ldr	r2, [r1, #8]
 800baee:	690b      	ldr	r3, [r1, #16]
 800baf0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800baf4:	4293      	cmp	r3, r2
 800baf6:	bfb8      	it	lt
 800baf8:	4613      	movlt	r3, r2
 800bafa:	6033      	str	r3, [r6, #0]
 800bafc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800bb00:	4607      	mov	r7, r0
 800bb02:	460c      	mov	r4, r1
 800bb04:	b10a      	cbz	r2, 800bb0a <_printf_common+0x26>
 800bb06:	3301      	adds	r3, #1
 800bb08:	6033      	str	r3, [r6, #0]
 800bb0a:	6823      	ldr	r3, [r4, #0]
 800bb0c:	0699      	lsls	r1, r3, #26
 800bb0e:	bf42      	ittt	mi
 800bb10:	6833      	ldrmi	r3, [r6, #0]
 800bb12:	3302      	addmi	r3, #2
 800bb14:	6033      	strmi	r3, [r6, #0]
 800bb16:	6825      	ldr	r5, [r4, #0]
 800bb18:	f015 0506 	ands.w	r5, r5, #6
 800bb1c:	d106      	bne.n	800bb2c <_printf_common+0x48>
 800bb1e:	f104 0a19 	add.w	sl, r4, #25
 800bb22:	68e3      	ldr	r3, [r4, #12]
 800bb24:	6832      	ldr	r2, [r6, #0]
 800bb26:	1a9b      	subs	r3, r3, r2
 800bb28:	42ab      	cmp	r3, r5
 800bb2a:	dc26      	bgt.n	800bb7a <_printf_common+0x96>
 800bb2c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800bb30:	6822      	ldr	r2, [r4, #0]
 800bb32:	3b00      	subs	r3, #0
 800bb34:	bf18      	it	ne
 800bb36:	2301      	movne	r3, #1
 800bb38:	0692      	lsls	r2, r2, #26
 800bb3a:	d42b      	bmi.n	800bb94 <_printf_common+0xb0>
 800bb3c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800bb40:	4641      	mov	r1, r8
 800bb42:	4638      	mov	r0, r7
 800bb44:	47c8      	blx	r9
 800bb46:	3001      	adds	r0, #1
 800bb48:	d01e      	beq.n	800bb88 <_printf_common+0xa4>
 800bb4a:	6823      	ldr	r3, [r4, #0]
 800bb4c:	6922      	ldr	r2, [r4, #16]
 800bb4e:	f003 0306 	and.w	r3, r3, #6
 800bb52:	2b04      	cmp	r3, #4
 800bb54:	bf02      	ittt	eq
 800bb56:	68e5      	ldreq	r5, [r4, #12]
 800bb58:	6833      	ldreq	r3, [r6, #0]
 800bb5a:	1aed      	subeq	r5, r5, r3
 800bb5c:	68a3      	ldr	r3, [r4, #8]
 800bb5e:	bf0c      	ite	eq
 800bb60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bb64:	2500      	movne	r5, #0
 800bb66:	4293      	cmp	r3, r2
 800bb68:	bfc4      	itt	gt
 800bb6a:	1a9b      	subgt	r3, r3, r2
 800bb6c:	18ed      	addgt	r5, r5, r3
 800bb6e:	2600      	movs	r6, #0
 800bb70:	341a      	adds	r4, #26
 800bb72:	42b5      	cmp	r5, r6
 800bb74:	d11a      	bne.n	800bbac <_printf_common+0xc8>
 800bb76:	2000      	movs	r0, #0
 800bb78:	e008      	b.n	800bb8c <_printf_common+0xa8>
 800bb7a:	2301      	movs	r3, #1
 800bb7c:	4652      	mov	r2, sl
 800bb7e:	4641      	mov	r1, r8
 800bb80:	4638      	mov	r0, r7
 800bb82:	47c8      	blx	r9
 800bb84:	3001      	adds	r0, #1
 800bb86:	d103      	bne.n	800bb90 <_printf_common+0xac>
 800bb88:	f04f 30ff 	mov.w	r0, #4294967295
 800bb8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb90:	3501      	adds	r5, #1
 800bb92:	e7c6      	b.n	800bb22 <_printf_common+0x3e>
 800bb94:	18e1      	adds	r1, r4, r3
 800bb96:	1c5a      	adds	r2, r3, #1
 800bb98:	2030      	movs	r0, #48	@ 0x30
 800bb9a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800bb9e:	4422      	add	r2, r4
 800bba0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800bba4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800bba8:	3302      	adds	r3, #2
 800bbaa:	e7c7      	b.n	800bb3c <_printf_common+0x58>
 800bbac:	2301      	movs	r3, #1
 800bbae:	4622      	mov	r2, r4
 800bbb0:	4641      	mov	r1, r8
 800bbb2:	4638      	mov	r0, r7
 800bbb4:	47c8      	blx	r9
 800bbb6:	3001      	adds	r0, #1
 800bbb8:	d0e6      	beq.n	800bb88 <_printf_common+0xa4>
 800bbba:	3601      	adds	r6, #1
 800bbbc:	e7d9      	b.n	800bb72 <_printf_common+0x8e>
	...

0800bbc0 <_printf_i>:
 800bbc0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bbc4:	7e0f      	ldrb	r7, [r1, #24]
 800bbc6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800bbc8:	2f78      	cmp	r7, #120	@ 0x78
 800bbca:	4691      	mov	r9, r2
 800bbcc:	4680      	mov	r8, r0
 800bbce:	460c      	mov	r4, r1
 800bbd0:	469a      	mov	sl, r3
 800bbd2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800bbd6:	d807      	bhi.n	800bbe8 <_printf_i+0x28>
 800bbd8:	2f62      	cmp	r7, #98	@ 0x62
 800bbda:	d80a      	bhi.n	800bbf2 <_printf_i+0x32>
 800bbdc:	2f00      	cmp	r7, #0
 800bbde:	f000 80d1 	beq.w	800bd84 <_printf_i+0x1c4>
 800bbe2:	2f58      	cmp	r7, #88	@ 0x58
 800bbe4:	f000 80b8 	beq.w	800bd58 <_printf_i+0x198>
 800bbe8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bbec:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800bbf0:	e03a      	b.n	800bc68 <_printf_i+0xa8>
 800bbf2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800bbf6:	2b15      	cmp	r3, #21
 800bbf8:	d8f6      	bhi.n	800bbe8 <_printf_i+0x28>
 800bbfa:	a101      	add	r1, pc, #4	@ (adr r1, 800bc00 <_printf_i+0x40>)
 800bbfc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bc00:	0800bc59 	.word	0x0800bc59
 800bc04:	0800bc6d 	.word	0x0800bc6d
 800bc08:	0800bbe9 	.word	0x0800bbe9
 800bc0c:	0800bbe9 	.word	0x0800bbe9
 800bc10:	0800bbe9 	.word	0x0800bbe9
 800bc14:	0800bbe9 	.word	0x0800bbe9
 800bc18:	0800bc6d 	.word	0x0800bc6d
 800bc1c:	0800bbe9 	.word	0x0800bbe9
 800bc20:	0800bbe9 	.word	0x0800bbe9
 800bc24:	0800bbe9 	.word	0x0800bbe9
 800bc28:	0800bbe9 	.word	0x0800bbe9
 800bc2c:	0800bd6b 	.word	0x0800bd6b
 800bc30:	0800bc97 	.word	0x0800bc97
 800bc34:	0800bd25 	.word	0x0800bd25
 800bc38:	0800bbe9 	.word	0x0800bbe9
 800bc3c:	0800bbe9 	.word	0x0800bbe9
 800bc40:	0800bd8d 	.word	0x0800bd8d
 800bc44:	0800bbe9 	.word	0x0800bbe9
 800bc48:	0800bc97 	.word	0x0800bc97
 800bc4c:	0800bbe9 	.word	0x0800bbe9
 800bc50:	0800bbe9 	.word	0x0800bbe9
 800bc54:	0800bd2d 	.word	0x0800bd2d
 800bc58:	6833      	ldr	r3, [r6, #0]
 800bc5a:	1d1a      	adds	r2, r3, #4
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	6032      	str	r2, [r6, #0]
 800bc60:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bc64:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800bc68:	2301      	movs	r3, #1
 800bc6a:	e09c      	b.n	800bda6 <_printf_i+0x1e6>
 800bc6c:	6833      	ldr	r3, [r6, #0]
 800bc6e:	6820      	ldr	r0, [r4, #0]
 800bc70:	1d19      	adds	r1, r3, #4
 800bc72:	6031      	str	r1, [r6, #0]
 800bc74:	0606      	lsls	r6, r0, #24
 800bc76:	d501      	bpl.n	800bc7c <_printf_i+0xbc>
 800bc78:	681d      	ldr	r5, [r3, #0]
 800bc7a:	e003      	b.n	800bc84 <_printf_i+0xc4>
 800bc7c:	0645      	lsls	r5, r0, #25
 800bc7e:	d5fb      	bpl.n	800bc78 <_printf_i+0xb8>
 800bc80:	f9b3 5000 	ldrsh.w	r5, [r3]
 800bc84:	2d00      	cmp	r5, #0
 800bc86:	da03      	bge.n	800bc90 <_printf_i+0xd0>
 800bc88:	232d      	movs	r3, #45	@ 0x2d
 800bc8a:	426d      	negs	r5, r5
 800bc8c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bc90:	4858      	ldr	r0, [pc, #352]	@ (800bdf4 <_printf_i+0x234>)
 800bc92:	230a      	movs	r3, #10
 800bc94:	e011      	b.n	800bcba <_printf_i+0xfa>
 800bc96:	6821      	ldr	r1, [r4, #0]
 800bc98:	6833      	ldr	r3, [r6, #0]
 800bc9a:	0608      	lsls	r0, r1, #24
 800bc9c:	f853 5b04 	ldr.w	r5, [r3], #4
 800bca0:	d402      	bmi.n	800bca8 <_printf_i+0xe8>
 800bca2:	0649      	lsls	r1, r1, #25
 800bca4:	bf48      	it	mi
 800bca6:	b2ad      	uxthmi	r5, r5
 800bca8:	2f6f      	cmp	r7, #111	@ 0x6f
 800bcaa:	4852      	ldr	r0, [pc, #328]	@ (800bdf4 <_printf_i+0x234>)
 800bcac:	6033      	str	r3, [r6, #0]
 800bcae:	bf14      	ite	ne
 800bcb0:	230a      	movne	r3, #10
 800bcb2:	2308      	moveq	r3, #8
 800bcb4:	2100      	movs	r1, #0
 800bcb6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800bcba:	6866      	ldr	r6, [r4, #4]
 800bcbc:	60a6      	str	r6, [r4, #8]
 800bcbe:	2e00      	cmp	r6, #0
 800bcc0:	db05      	blt.n	800bcce <_printf_i+0x10e>
 800bcc2:	6821      	ldr	r1, [r4, #0]
 800bcc4:	432e      	orrs	r6, r5
 800bcc6:	f021 0104 	bic.w	r1, r1, #4
 800bcca:	6021      	str	r1, [r4, #0]
 800bccc:	d04b      	beq.n	800bd66 <_printf_i+0x1a6>
 800bcce:	4616      	mov	r6, r2
 800bcd0:	fbb5 f1f3 	udiv	r1, r5, r3
 800bcd4:	fb03 5711 	mls	r7, r3, r1, r5
 800bcd8:	5dc7      	ldrb	r7, [r0, r7]
 800bcda:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800bcde:	462f      	mov	r7, r5
 800bce0:	42bb      	cmp	r3, r7
 800bce2:	460d      	mov	r5, r1
 800bce4:	d9f4      	bls.n	800bcd0 <_printf_i+0x110>
 800bce6:	2b08      	cmp	r3, #8
 800bce8:	d10b      	bne.n	800bd02 <_printf_i+0x142>
 800bcea:	6823      	ldr	r3, [r4, #0]
 800bcec:	07df      	lsls	r7, r3, #31
 800bcee:	d508      	bpl.n	800bd02 <_printf_i+0x142>
 800bcf0:	6923      	ldr	r3, [r4, #16]
 800bcf2:	6861      	ldr	r1, [r4, #4]
 800bcf4:	4299      	cmp	r1, r3
 800bcf6:	bfde      	ittt	le
 800bcf8:	2330      	movle	r3, #48	@ 0x30
 800bcfa:	f806 3c01 	strble.w	r3, [r6, #-1]
 800bcfe:	f106 36ff 	addle.w	r6, r6, #4294967295
 800bd02:	1b92      	subs	r2, r2, r6
 800bd04:	6122      	str	r2, [r4, #16]
 800bd06:	f8cd a000 	str.w	sl, [sp]
 800bd0a:	464b      	mov	r3, r9
 800bd0c:	aa03      	add	r2, sp, #12
 800bd0e:	4621      	mov	r1, r4
 800bd10:	4640      	mov	r0, r8
 800bd12:	f7ff fee7 	bl	800bae4 <_printf_common>
 800bd16:	3001      	adds	r0, #1
 800bd18:	d14a      	bne.n	800bdb0 <_printf_i+0x1f0>
 800bd1a:	f04f 30ff 	mov.w	r0, #4294967295
 800bd1e:	b004      	add	sp, #16
 800bd20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd24:	6823      	ldr	r3, [r4, #0]
 800bd26:	f043 0320 	orr.w	r3, r3, #32
 800bd2a:	6023      	str	r3, [r4, #0]
 800bd2c:	4832      	ldr	r0, [pc, #200]	@ (800bdf8 <_printf_i+0x238>)
 800bd2e:	2778      	movs	r7, #120	@ 0x78
 800bd30:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800bd34:	6823      	ldr	r3, [r4, #0]
 800bd36:	6831      	ldr	r1, [r6, #0]
 800bd38:	061f      	lsls	r7, r3, #24
 800bd3a:	f851 5b04 	ldr.w	r5, [r1], #4
 800bd3e:	d402      	bmi.n	800bd46 <_printf_i+0x186>
 800bd40:	065f      	lsls	r7, r3, #25
 800bd42:	bf48      	it	mi
 800bd44:	b2ad      	uxthmi	r5, r5
 800bd46:	6031      	str	r1, [r6, #0]
 800bd48:	07d9      	lsls	r1, r3, #31
 800bd4a:	bf44      	itt	mi
 800bd4c:	f043 0320 	orrmi.w	r3, r3, #32
 800bd50:	6023      	strmi	r3, [r4, #0]
 800bd52:	b11d      	cbz	r5, 800bd5c <_printf_i+0x19c>
 800bd54:	2310      	movs	r3, #16
 800bd56:	e7ad      	b.n	800bcb4 <_printf_i+0xf4>
 800bd58:	4826      	ldr	r0, [pc, #152]	@ (800bdf4 <_printf_i+0x234>)
 800bd5a:	e7e9      	b.n	800bd30 <_printf_i+0x170>
 800bd5c:	6823      	ldr	r3, [r4, #0]
 800bd5e:	f023 0320 	bic.w	r3, r3, #32
 800bd62:	6023      	str	r3, [r4, #0]
 800bd64:	e7f6      	b.n	800bd54 <_printf_i+0x194>
 800bd66:	4616      	mov	r6, r2
 800bd68:	e7bd      	b.n	800bce6 <_printf_i+0x126>
 800bd6a:	6833      	ldr	r3, [r6, #0]
 800bd6c:	6825      	ldr	r5, [r4, #0]
 800bd6e:	6961      	ldr	r1, [r4, #20]
 800bd70:	1d18      	adds	r0, r3, #4
 800bd72:	6030      	str	r0, [r6, #0]
 800bd74:	062e      	lsls	r6, r5, #24
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	d501      	bpl.n	800bd7e <_printf_i+0x1be>
 800bd7a:	6019      	str	r1, [r3, #0]
 800bd7c:	e002      	b.n	800bd84 <_printf_i+0x1c4>
 800bd7e:	0668      	lsls	r0, r5, #25
 800bd80:	d5fb      	bpl.n	800bd7a <_printf_i+0x1ba>
 800bd82:	8019      	strh	r1, [r3, #0]
 800bd84:	2300      	movs	r3, #0
 800bd86:	6123      	str	r3, [r4, #16]
 800bd88:	4616      	mov	r6, r2
 800bd8a:	e7bc      	b.n	800bd06 <_printf_i+0x146>
 800bd8c:	6833      	ldr	r3, [r6, #0]
 800bd8e:	1d1a      	adds	r2, r3, #4
 800bd90:	6032      	str	r2, [r6, #0]
 800bd92:	681e      	ldr	r6, [r3, #0]
 800bd94:	6862      	ldr	r2, [r4, #4]
 800bd96:	2100      	movs	r1, #0
 800bd98:	4630      	mov	r0, r6
 800bd9a:	f7f4 fa39 	bl	8000210 <memchr>
 800bd9e:	b108      	cbz	r0, 800bda4 <_printf_i+0x1e4>
 800bda0:	1b80      	subs	r0, r0, r6
 800bda2:	6060      	str	r0, [r4, #4]
 800bda4:	6863      	ldr	r3, [r4, #4]
 800bda6:	6123      	str	r3, [r4, #16]
 800bda8:	2300      	movs	r3, #0
 800bdaa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bdae:	e7aa      	b.n	800bd06 <_printf_i+0x146>
 800bdb0:	6923      	ldr	r3, [r4, #16]
 800bdb2:	4632      	mov	r2, r6
 800bdb4:	4649      	mov	r1, r9
 800bdb6:	4640      	mov	r0, r8
 800bdb8:	47d0      	blx	sl
 800bdba:	3001      	adds	r0, #1
 800bdbc:	d0ad      	beq.n	800bd1a <_printf_i+0x15a>
 800bdbe:	6823      	ldr	r3, [r4, #0]
 800bdc0:	079b      	lsls	r3, r3, #30
 800bdc2:	d413      	bmi.n	800bdec <_printf_i+0x22c>
 800bdc4:	68e0      	ldr	r0, [r4, #12]
 800bdc6:	9b03      	ldr	r3, [sp, #12]
 800bdc8:	4298      	cmp	r0, r3
 800bdca:	bfb8      	it	lt
 800bdcc:	4618      	movlt	r0, r3
 800bdce:	e7a6      	b.n	800bd1e <_printf_i+0x15e>
 800bdd0:	2301      	movs	r3, #1
 800bdd2:	4632      	mov	r2, r6
 800bdd4:	4649      	mov	r1, r9
 800bdd6:	4640      	mov	r0, r8
 800bdd8:	47d0      	blx	sl
 800bdda:	3001      	adds	r0, #1
 800bddc:	d09d      	beq.n	800bd1a <_printf_i+0x15a>
 800bdde:	3501      	adds	r5, #1
 800bde0:	68e3      	ldr	r3, [r4, #12]
 800bde2:	9903      	ldr	r1, [sp, #12]
 800bde4:	1a5b      	subs	r3, r3, r1
 800bde6:	42ab      	cmp	r3, r5
 800bde8:	dcf2      	bgt.n	800bdd0 <_printf_i+0x210>
 800bdea:	e7eb      	b.n	800bdc4 <_printf_i+0x204>
 800bdec:	2500      	movs	r5, #0
 800bdee:	f104 0619 	add.w	r6, r4, #25
 800bdf2:	e7f5      	b.n	800bde0 <_printf_i+0x220>
 800bdf4:	0800c836 	.word	0x0800c836
 800bdf8:	0800c847 	.word	0x0800c847

0800bdfc <__sflush_r>:
 800bdfc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800be00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be04:	0716      	lsls	r6, r2, #28
 800be06:	4605      	mov	r5, r0
 800be08:	460c      	mov	r4, r1
 800be0a:	d454      	bmi.n	800beb6 <__sflush_r+0xba>
 800be0c:	684b      	ldr	r3, [r1, #4]
 800be0e:	2b00      	cmp	r3, #0
 800be10:	dc02      	bgt.n	800be18 <__sflush_r+0x1c>
 800be12:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800be14:	2b00      	cmp	r3, #0
 800be16:	dd48      	ble.n	800beaa <__sflush_r+0xae>
 800be18:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800be1a:	2e00      	cmp	r6, #0
 800be1c:	d045      	beq.n	800beaa <__sflush_r+0xae>
 800be1e:	2300      	movs	r3, #0
 800be20:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800be24:	682f      	ldr	r7, [r5, #0]
 800be26:	6a21      	ldr	r1, [r4, #32]
 800be28:	602b      	str	r3, [r5, #0]
 800be2a:	d030      	beq.n	800be8e <__sflush_r+0x92>
 800be2c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800be2e:	89a3      	ldrh	r3, [r4, #12]
 800be30:	0759      	lsls	r1, r3, #29
 800be32:	d505      	bpl.n	800be40 <__sflush_r+0x44>
 800be34:	6863      	ldr	r3, [r4, #4]
 800be36:	1ad2      	subs	r2, r2, r3
 800be38:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800be3a:	b10b      	cbz	r3, 800be40 <__sflush_r+0x44>
 800be3c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800be3e:	1ad2      	subs	r2, r2, r3
 800be40:	2300      	movs	r3, #0
 800be42:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800be44:	6a21      	ldr	r1, [r4, #32]
 800be46:	4628      	mov	r0, r5
 800be48:	47b0      	blx	r6
 800be4a:	1c43      	adds	r3, r0, #1
 800be4c:	89a3      	ldrh	r3, [r4, #12]
 800be4e:	d106      	bne.n	800be5e <__sflush_r+0x62>
 800be50:	6829      	ldr	r1, [r5, #0]
 800be52:	291d      	cmp	r1, #29
 800be54:	d82b      	bhi.n	800beae <__sflush_r+0xb2>
 800be56:	4a2a      	ldr	r2, [pc, #168]	@ (800bf00 <__sflush_r+0x104>)
 800be58:	40ca      	lsrs	r2, r1
 800be5a:	07d6      	lsls	r6, r2, #31
 800be5c:	d527      	bpl.n	800beae <__sflush_r+0xb2>
 800be5e:	2200      	movs	r2, #0
 800be60:	6062      	str	r2, [r4, #4]
 800be62:	04d9      	lsls	r1, r3, #19
 800be64:	6922      	ldr	r2, [r4, #16]
 800be66:	6022      	str	r2, [r4, #0]
 800be68:	d504      	bpl.n	800be74 <__sflush_r+0x78>
 800be6a:	1c42      	adds	r2, r0, #1
 800be6c:	d101      	bne.n	800be72 <__sflush_r+0x76>
 800be6e:	682b      	ldr	r3, [r5, #0]
 800be70:	b903      	cbnz	r3, 800be74 <__sflush_r+0x78>
 800be72:	6560      	str	r0, [r4, #84]	@ 0x54
 800be74:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800be76:	602f      	str	r7, [r5, #0]
 800be78:	b1b9      	cbz	r1, 800beaa <__sflush_r+0xae>
 800be7a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800be7e:	4299      	cmp	r1, r3
 800be80:	d002      	beq.n	800be88 <__sflush_r+0x8c>
 800be82:	4628      	mov	r0, r5
 800be84:	f7ff fca2 	bl	800b7cc <_free_r>
 800be88:	2300      	movs	r3, #0
 800be8a:	6363      	str	r3, [r4, #52]	@ 0x34
 800be8c:	e00d      	b.n	800beaa <__sflush_r+0xae>
 800be8e:	2301      	movs	r3, #1
 800be90:	4628      	mov	r0, r5
 800be92:	47b0      	blx	r6
 800be94:	4602      	mov	r2, r0
 800be96:	1c50      	adds	r0, r2, #1
 800be98:	d1c9      	bne.n	800be2e <__sflush_r+0x32>
 800be9a:	682b      	ldr	r3, [r5, #0]
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d0c6      	beq.n	800be2e <__sflush_r+0x32>
 800bea0:	2b1d      	cmp	r3, #29
 800bea2:	d001      	beq.n	800bea8 <__sflush_r+0xac>
 800bea4:	2b16      	cmp	r3, #22
 800bea6:	d11e      	bne.n	800bee6 <__sflush_r+0xea>
 800bea8:	602f      	str	r7, [r5, #0]
 800beaa:	2000      	movs	r0, #0
 800beac:	e022      	b.n	800bef4 <__sflush_r+0xf8>
 800beae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800beb2:	b21b      	sxth	r3, r3
 800beb4:	e01b      	b.n	800beee <__sflush_r+0xf2>
 800beb6:	690f      	ldr	r7, [r1, #16]
 800beb8:	2f00      	cmp	r7, #0
 800beba:	d0f6      	beq.n	800beaa <__sflush_r+0xae>
 800bebc:	0793      	lsls	r3, r2, #30
 800bebe:	680e      	ldr	r6, [r1, #0]
 800bec0:	bf08      	it	eq
 800bec2:	694b      	ldreq	r3, [r1, #20]
 800bec4:	600f      	str	r7, [r1, #0]
 800bec6:	bf18      	it	ne
 800bec8:	2300      	movne	r3, #0
 800beca:	eba6 0807 	sub.w	r8, r6, r7
 800bece:	608b      	str	r3, [r1, #8]
 800bed0:	f1b8 0f00 	cmp.w	r8, #0
 800bed4:	dde9      	ble.n	800beaa <__sflush_r+0xae>
 800bed6:	6a21      	ldr	r1, [r4, #32]
 800bed8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800beda:	4643      	mov	r3, r8
 800bedc:	463a      	mov	r2, r7
 800bede:	4628      	mov	r0, r5
 800bee0:	47b0      	blx	r6
 800bee2:	2800      	cmp	r0, #0
 800bee4:	dc08      	bgt.n	800bef8 <__sflush_r+0xfc>
 800bee6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800beea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800beee:	81a3      	strh	r3, [r4, #12]
 800bef0:	f04f 30ff 	mov.w	r0, #4294967295
 800bef4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bef8:	4407      	add	r7, r0
 800befa:	eba8 0800 	sub.w	r8, r8, r0
 800befe:	e7e7      	b.n	800bed0 <__sflush_r+0xd4>
 800bf00:	20400001 	.word	0x20400001

0800bf04 <_fflush_r>:
 800bf04:	b538      	push	{r3, r4, r5, lr}
 800bf06:	690b      	ldr	r3, [r1, #16]
 800bf08:	4605      	mov	r5, r0
 800bf0a:	460c      	mov	r4, r1
 800bf0c:	b913      	cbnz	r3, 800bf14 <_fflush_r+0x10>
 800bf0e:	2500      	movs	r5, #0
 800bf10:	4628      	mov	r0, r5
 800bf12:	bd38      	pop	{r3, r4, r5, pc}
 800bf14:	b118      	cbz	r0, 800bf1e <_fflush_r+0x1a>
 800bf16:	6a03      	ldr	r3, [r0, #32]
 800bf18:	b90b      	cbnz	r3, 800bf1e <_fflush_r+0x1a>
 800bf1a:	f7ff fa91 	bl	800b440 <__sinit>
 800bf1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d0f3      	beq.n	800bf0e <_fflush_r+0xa>
 800bf26:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800bf28:	07d0      	lsls	r0, r2, #31
 800bf2a:	d404      	bmi.n	800bf36 <_fflush_r+0x32>
 800bf2c:	0599      	lsls	r1, r3, #22
 800bf2e:	d402      	bmi.n	800bf36 <_fflush_r+0x32>
 800bf30:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bf32:	f7ff fbde 	bl	800b6f2 <__retarget_lock_acquire_recursive>
 800bf36:	4628      	mov	r0, r5
 800bf38:	4621      	mov	r1, r4
 800bf3a:	f7ff ff5f 	bl	800bdfc <__sflush_r>
 800bf3e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bf40:	07da      	lsls	r2, r3, #31
 800bf42:	4605      	mov	r5, r0
 800bf44:	d4e4      	bmi.n	800bf10 <_fflush_r+0xc>
 800bf46:	89a3      	ldrh	r3, [r4, #12]
 800bf48:	059b      	lsls	r3, r3, #22
 800bf4a:	d4e1      	bmi.n	800bf10 <_fflush_r+0xc>
 800bf4c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bf4e:	f7ff fbd1 	bl	800b6f4 <__retarget_lock_release_recursive>
 800bf52:	e7dd      	b.n	800bf10 <_fflush_r+0xc>

0800bf54 <__swbuf_r>:
 800bf54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf56:	460e      	mov	r6, r1
 800bf58:	4614      	mov	r4, r2
 800bf5a:	4605      	mov	r5, r0
 800bf5c:	b118      	cbz	r0, 800bf66 <__swbuf_r+0x12>
 800bf5e:	6a03      	ldr	r3, [r0, #32]
 800bf60:	b90b      	cbnz	r3, 800bf66 <__swbuf_r+0x12>
 800bf62:	f7ff fa6d 	bl	800b440 <__sinit>
 800bf66:	69a3      	ldr	r3, [r4, #24]
 800bf68:	60a3      	str	r3, [r4, #8]
 800bf6a:	89a3      	ldrh	r3, [r4, #12]
 800bf6c:	071a      	lsls	r2, r3, #28
 800bf6e:	d501      	bpl.n	800bf74 <__swbuf_r+0x20>
 800bf70:	6923      	ldr	r3, [r4, #16]
 800bf72:	b943      	cbnz	r3, 800bf86 <__swbuf_r+0x32>
 800bf74:	4621      	mov	r1, r4
 800bf76:	4628      	mov	r0, r5
 800bf78:	f000 f82a 	bl	800bfd0 <__swsetup_r>
 800bf7c:	b118      	cbz	r0, 800bf86 <__swbuf_r+0x32>
 800bf7e:	f04f 37ff 	mov.w	r7, #4294967295
 800bf82:	4638      	mov	r0, r7
 800bf84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bf86:	6823      	ldr	r3, [r4, #0]
 800bf88:	6922      	ldr	r2, [r4, #16]
 800bf8a:	1a98      	subs	r0, r3, r2
 800bf8c:	6963      	ldr	r3, [r4, #20]
 800bf8e:	b2f6      	uxtb	r6, r6
 800bf90:	4283      	cmp	r3, r0
 800bf92:	4637      	mov	r7, r6
 800bf94:	dc05      	bgt.n	800bfa2 <__swbuf_r+0x4e>
 800bf96:	4621      	mov	r1, r4
 800bf98:	4628      	mov	r0, r5
 800bf9a:	f7ff ffb3 	bl	800bf04 <_fflush_r>
 800bf9e:	2800      	cmp	r0, #0
 800bfa0:	d1ed      	bne.n	800bf7e <__swbuf_r+0x2a>
 800bfa2:	68a3      	ldr	r3, [r4, #8]
 800bfa4:	3b01      	subs	r3, #1
 800bfa6:	60a3      	str	r3, [r4, #8]
 800bfa8:	6823      	ldr	r3, [r4, #0]
 800bfaa:	1c5a      	adds	r2, r3, #1
 800bfac:	6022      	str	r2, [r4, #0]
 800bfae:	701e      	strb	r6, [r3, #0]
 800bfb0:	6962      	ldr	r2, [r4, #20]
 800bfb2:	1c43      	adds	r3, r0, #1
 800bfb4:	429a      	cmp	r2, r3
 800bfb6:	d004      	beq.n	800bfc2 <__swbuf_r+0x6e>
 800bfb8:	89a3      	ldrh	r3, [r4, #12]
 800bfba:	07db      	lsls	r3, r3, #31
 800bfbc:	d5e1      	bpl.n	800bf82 <__swbuf_r+0x2e>
 800bfbe:	2e0a      	cmp	r6, #10
 800bfc0:	d1df      	bne.n	800bf82 <__swbuf_r+0x2e>
 800bfc2:	4621      	mov	r1, r4
 800bfc4:	4628      	mov	r0, r5
 800bfc6:	f7ff ff9d 	bl	800bf04 <_fflush_r>
 800bfca:	2800      	cmp	r0, #0
 800bfcc:	d0d9      	beq.n	800bf82 <__swbuf_r+0x2e>
 800bfce:	e7d6      	b.n	800bf7e <__swbuf_r+0x2a>

0800bfd0 <__swsetup_r>:
 800bfd0:	b538      	push	{r3, r4, r5, lr}
 800bfd2:	4b29      	ldr	r3, [pc, #164]	@ (800c078 <__swsetup_r+0xa8>)
 800bfd4:	4605      	mov	r5, r0
 800bfd6:	6818      	ldr	r0, [r3, #0]
 800bfd8:	460c      	mov	r4, r1
 800bfda:	b118      	cbz	r0, 800bfe4 <__swsetup_r+0x14>
 800bfdc:	6a03      	ldr	r3, [r0, #32]
 800bfde:	b90b      	cbnz	r3, 800bfe4 <__swsetup_r+0x14>
 800bfe0:	f7ff fa2e 	bl	800b440 <__sinit>
 800bfe4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bfe8:	0719      	lsls	r1, r3, #28
 800bfea:	d422      	bmi.n	800c032 <__swsetup_r+0x62>
 800bfec:	06da      	lsls	r2, r3, #27
 800bfee:	d407      	bmi.n	800c000 <__swsetup_r+0x30>
 800bff0:	2209      	movs	r2, #9
 800bff2:	602a      	str	r2, [r5, #0]
 800bff4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bff8:	81a3      	strh	r3, [r4, #12]
 800bffa:	f04f 30ff 	mov.w	r0, #4294967295
 800bffe:	e033      	b.n	800c068 <__swsetup_r+0x98>
 800c000:	0758      	lsls	r0, r3, #29
 800c002:	d512      	bpl.n	800c02a <__swsetup_r+0x5a>
 800c004:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c006:	b141      	cbz	r1, 800c01a <__swsetup_r+0x4a>
 800c008:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c00c:	4299      	cmp	r1, r3
 800c00e:	d002      	beq.n	800c016 <__swsetup_r+0x46>
 800c010:	4628      	mov	r0, r5
 800c012:	f7ff fbdb 	bl	800b7cc <_free_r>
 800c016:	2300      	movs	r3, #0
 800c018:	6363      	str	r3, [r4, #52]	@ 0x34
 800c01a:	89a3      	ldrh	r3, [r4, #12]
 800c01c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c020:	81a3      	strh	r3, [r4, #12]
 800c022:	2300      	movs	r3, #0
 800c024:	6063      	str	r3, [r4, #4]
 800c026:	6923      	ldr	r3, [r4, #16]
 800c028:	6023      	str	r3, [r4, #0]
 800c02a:	89a3      	ldrh	r3, [r4, #12]
 800c02c:	f043 0308 	orr.w	r3, r3, #8
 800c030:	81a3      	strh	r3, [r4, #12]
 800c032:	6923      	ldr	r3, [r4, #16]
 800c034:	b94b      	cbnz	r3, 800c04a <__swsetup_r+0x7a>
 800c036:	89a3      	ldrh	r3, [r4, #12]
 800c038:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c03c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c040:	d003      	beq.n	800c04a <__swsetup_r+0x7a>
 800c042:	4621      	mov	r1, r4
 800c044:	4628      	mov	r0, r5
 800c046:	f000 f83f 	bl	800c0c8 <__smakebuf_r>
 800c04a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c04e:	f013 0201 	ands.w	r2, r3, #1
 800c052:	d00a      	beq.n	800c06a <__swsetup_r+0x9a>
 800c054:	2200      	movs	r2, #0
 800c056:	60a2      	str	r2, [r4, #8]
 800c058:	6962      	ldr	r2, [r4, #20]
 800c05a:	4252      	negs	r2, r2
 800c05c:	61a2      	str	r2, [r4, #24]
 800c05e:	6922      	ldr	r2, [r4, #16]
 800c060:	b942      	cbnz	r2, 800c074 <__swsetup_r+0xa4>
 800c062:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c066:	d1c5      	bne.n	800bff4 <__swsetup_r+0x24>
 800c068:	bd38      	pop	{r3, r4, r5, pc}
 800c06a:	0799      	lsls	r1, r3, #30
 800c06c:	bf58      	it	pl
 800c06e:	6962      	ldrpl	r2, [r4, #20]
 800c070:	60a2      	str	r2, [r4, #8]
 800c072:	e7f4      	b.n	800c05e <__swsetup_r+0x8e>
 800c074:	2000      	movs	r0, #0
 800c076:	e7f7      	b.n	800c068 <__swsetup_r+0x98>
 800c078:	20000024 	.word	0x20000024

0800c07c <__swhatbuf_r>:
 800c07c:	b570      	push	{r4, r5, r6, lr}
 800c07e:	460c      	mov	r4, r1
 800c080:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c084:	2900      	cmp	r1, #0
 800c086:	b096      	sub	sp, #88	@ 0x58
 800c088:	4615      	mov	r5, r2
 800c08a:	461e      	mov	r6, r3
 800c08c:	da0d      	bge.n	800c0aa <__swhatbuf_r+0x2e>
 800c08e:	89a3      	ldrh	r3, [r4, #12]
 800c090:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c094:	f04f 0100 	mov.w	r1, #0
 800c098:	bf14      	ite	ne
 800c09a:	2340      	movne	r3, #64	@ 0x40
 800c09c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c0a0:	2000      	movs	r0, #0
 800c0a2:	6031      	str	r1, [r6, #0]
 800c0a4:	602b      	str	r3, [r5, #0]
 800c0a6:	b016      	add	sp, #88	@ 0x58
 800c0a8:	bd70      	pop	{r4, r5, r6, pc}
 800c0aa:	466a      	mov	r2, sp
 800c0ac:	f000 f848 	bl	800c140 <_fstat_r>
 800c0b0:	2800      	cmp	r0, #0
 800c0b2:	dbec      	blt.n	800c08e <__swhatbuf_r+0x12>
 800c0b4:	9901      	ldr	r1, [sp, #4]
 800c0b6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c0ba:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c0be:	4259      	negs	r1, r3
 800c0c0:	4159      	adcs	r1, r3
 800c0c2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c0c6:	e7eb      	b.n	800c0a0 <__swhatbuf_r+0x24>

0800c0c8 <__smakebuf_r>:
 800c0c8:	898b      	ldrh	r3, [r1, #12]
 800c0ca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c0cc:	079d      	lsls	r5, r3, #30
 800c0ce:	4606      	mov	r6, r0
 800c0d0:	460c      	mov	r4, r1
 800c0d2:	d507      	bpl.n	800c0e4 <__smakebuf_r+0x1c>
 800c0d4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c0d8:	6023      	str	r3, [r4, #0]
 800c0da:	6123      	str	r3, [r4, #16]
 800c0dc:	2301      	movs	r3, #1
 800c0de:	6163      	str	r3, [r4, #20]
 800c0e0:	b003      	add	sp, #12
 800c0e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c0e4:	ab01      	add	r3, sp, #4
 800c0e6:	466a      	mov	r2, sp
 800c0e8:	f7ff ffc8 	bl	800c07c <__swhatbuf_r>
 800c0ec:	9f00      	ldr	r7, [sp, #0]
 800c0ee:	4605      	mov	r5, r0
 800c0f0:	4639      	mov	r1, r7
 800c0f2:	4630      	mov	r0, r6
 800c0f4:	f7ff f88c 	bl	800b210 <_malloc_r>
 800c0f8:	b948      	cbnz	r0, 800c10e <__smakebuf_r+0x46>
 800c0fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c0fe:	059a      	lsls	r2, r3, #22
 800c100:	d4ee      	bmi.n	800c0e0 <__smakebuf_r+0x18>
 800c102:	f023 0303 	bic.w	r3, r3, #3
 800c106:	f043 0302 	orr.w	r3, r3, #2
 800c10a:	81a3      	strh	r3, [r4, #12]
 800c10c:	e7e2      	b.n	800c0d4 <__smakebuf_r+0xc>
 800c10e:	89a3      	ldrh	r3, [r4, #12]
 800c110:	6020      	str	r0, [r4, #0]
 800c112:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c116:	81a3      	strh	r3, [r4, #12]
 800c118:	9b01      	ldr	r3, [sp, #4]
 800c11a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c11e:	b15b      	cbz	r3, 800c138 <__smakebuf_r+0x70>
 800c120:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c124:	4630      	mov	r0, r6
 800c126:	f000 f81d 	bl	800c164 <_isatty_r>
 800c12a:	b128      	cbz	r0, 800c138 <__smakebuf_r+0x70>
 800c12c:	89a3      	ldrh	r3, [r4, #12]
 800c12e:	f023 0303 	bic.w	r3, r3, #3
 800c132:	f043 0301 	orr.w	r3, r3, #1
 800c136:	81a3      	strh	r3, [r4, #12]
 800c138:	89a3      	ldrh	r3, [r4, #12]
 800c13a:	431d      	orrs	r5, r3
 800c13c:	81a5      	strh	r5, [r4, #12]
 800c13e:	e7cf      	b.n	800c0e0 <__smakebuf_r+0x18>

0800c140 <_fstat_r>:
 800c140:	b538      	push	{r3, r4, r5, lr}
 800c142:	4d07      	ldr	r5, [pc, #28]	@ (800c160 <_fstat_r+0x20>)
 800c144:	2300      	movs	r3, #0
 800c146:	4604      	mov	r4, r0
 800c148:	4608      	mov	r0, r1
 800c14a:	4611      	mov	r1, r2
 800c14c:	602b      	str	r3, [r5, #0]
 800c14e:	f7f5 fa5c 	bl	800160a <_fstat>
 800c152:	1c43      	adds	r3, r0, #1
 800c154:	d102      	bne.n	800c15c <_fstat_r+0x1c>
 800c156:	682b      	ldr	r3, [r5, #0]
 800c158:	b103      	cbz	r3, 800c15c <_fstat_r+0x1c>
 800c15a:	6023      	str	r3, [r4, #0]
 800c15c:	bd38      	pop	{r3, r4, r5, pc}
 800c15e:	bf00      	nop
 800c160:	20009310 	.word	0x20009310

0800c164 <_isatty_r>:
 800c164:	b538      	push	{r3, r4, r5, lr}
 800c166:	4d06      	ldr	r5, [pc, #24]	@ (800c180 <_isatty_r+0x1c>)
 800c168:	2300      	movs	r3, #0
 800c16a:	4604      	mov	r4, r0
 800c16c:	4608      	mov	r0, r1
 800c16e:	602b      	str	r3, [r5, #0]
 800c170:	f7f5 fa50 	bl	8001614 <_isatty>
 800c174:	1c43      	adds	r3, r0, #1
 800c176:	d102      	bne.n	800c17e <_isatty_r+0x1a>
 800c178:	682b      	ldr	r3, [r5, #0]
 800c17a:	b103      	cbz	r3, 800c17e <_isatty_r+0x1a>
 800c17c:	6023      	str	r3, [r4, #0]
 800c17e:	bd38      	pop	{r3, r4, r5, pc}
 800c180:	20009310 	.word	0x20009310

0800c184 <_init>:
 800c184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c186:	bf00      	nop
 800c188:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c18a:	bc08      	pop	{r3}
 800c18c:	469e      	mov	lr, r3
 800c18e:	4770      	bx	lr

0800c190 <_fini>:
 800c190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c192:	bf00      	nop
 800c194:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c196:	bc08      	pop	{r3}
 800c198:	469e      	mov	lr, r3
 800c19a:	4770      	bx	lr
